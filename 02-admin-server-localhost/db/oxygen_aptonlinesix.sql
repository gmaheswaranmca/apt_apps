-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Feb 01, 2024 at 07:14 PM
-- Server version: 10.6.16-MariaDB
-- PHP Version: 8.1.27

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `oxygen_aptonlinesix`
--
CREATE DATABASE IF NOT EXISTS `oxygen_aptonlinesix` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci;
USE `oxygen_aptonlinesix`;

-- --------------------------------------------------------

--
-- Table structure for table `aa_link`
--

DROP TABLE IF EXISTS `aa_link`;
CREATE TABLE IF NOT EXISTS `aa_link` (
  `link_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `link_text` varchar(1000) NOT NULL DEFAULT ' ',
  `link_url` varchar(1000) NOT NULL DEFAULT ' ',
  `order_no` int(11) NOT NULL DEFAULT 0,
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`link_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `aa_make_score`
--

DROP TABLE IF EXISTS `aa_make_score`;
CREATE TABLE IF NOT EXISTS `aa_make_score` (
  `report_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `report_name` varchar(100) NOT NULL DEFAULT ' ',
  `test_papers` varchar(2000) NOT NULL DEFAULT ' ',
  `field_list` varchar(1000) NOT NULL DEFAULT ' ',
  `field_caption` varchar(1000) NOT NULL DEFAULT ' ',
  `user_list` varchar(8000) NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`report_id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `aa_make_score`
--

INSERT INTO `aa_make_score` (`report_id`, `report_name`, `test_papers`, `field_list`, `field_caption`, `user_list`, `is_active`) VALUES
(15, 'Assessment Test #001', 'Assessment Test #001', 'sno, fullname, answered_1, score_1, attendance_1, TestStartedAt_1, TimeSpent_1, username', 'S. No., Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Login User ID', '*', 1);

-- --------------------------------------------------------

--
-- Table structure for table `aa_mkrpt_field`
--

DROP TABLE IF EXISTS `aa_mkrpt_field`;
CREATE TABLE IF NOT EXISTS `aa_mkrpt_field` (
  `field_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `field_name` varchar(250) NOT NULL DEFAULT ' ',
  `field_list` varchar(1000) NOT NULL DEFAULT ' ',
  `field_caption` varchar(1000) NOT NULL DEFAULT ' ',
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`field_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `aa_mkrpt_field`
--

INSERT INTO `aa_mkrpt_field` (`field_id`, `field_name`, `field_list`, `field_caption`, `is_active`) VALUES
(1, 'Single Test Paper - Login ID at Last', 'sno, fullname, answered_1, score_1, attendance_1, username', 'S. No., Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Login User ID', 0),
(2, 'Single Test Paper - Test Started At(OFF), Time Spent, Login ID Bef Name', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins)', 0),
(3, 'Two Test Paper - Test Started At, Time Spent, Login ID at Last', 'sno, fullname, answered_1, score_1, attendance_1, TestStartedAt_1, TimeSpent_1, answered_2, score_2, attendance_2, TestStartedAt_2, TimeSpent_2, username', 'S. No., Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Login User ID', 0),
(4, 'Three Test Paper - Test Started At(OFF), Time Spent, Login ID at Last', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1, answered_2, score_2, attendance_2, TimeSpent_2, answered_3, score_3, attendance_3, TimeSpent_3', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins)', 0),
(5, 'Seven Test Paper - Scores Only, Login ID at Last', 'sno, fullname, score_1, score_2, score_3, score_4, score_5, score_6, score_7, username', 'S. No., Name of Student, Score (Out of ~qn_count~), Score (Out of ~qn_count~), Score (Out of ~qn_count~), Score (Out of ~qn_count~), Score (Out of ~qn_count~), Score (Out of ~qn_count~), Score (Out of ~qn_count~), Login User ID', 0),
(6, 'Four Test Paper - Test Started At, Time Spent, Login ID Bef Name', 'sno, fullname, answered_1, score_1, attendance_1, TestStartedAt_1, TimeSpent_1, answered_2, score_2, attendance_2, TestStartedAt_2, TimeSpent_2, answered_3, score_3, attendance_3, TestStartedAt_3, TimeSpent_3, answered_4, score_4, attendance_4, TestStartedAt_4, TimeSpent_4, username', 'S. No., Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Test Started At, Time Spent (Max ~time_limit~ mins), Login User ID', 0),
(7, 'Analysis - Three Test Paper - (+Remark) Test Started At, Time Spent, Login ID Bef Name', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1, TimePer_1, ScorePer_1, Remark_1, answered_2, score_2, attendance_2, TimeSpent_2, TimePer_1, ScorePer_1, Remark_2, answered_3, score_3, attendance_3, TimeSpent_3, TimePer_1, ScorePer_1, Remark_3', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins),Time %(Max 100%), Score %(Max 100%), Remark', 0),
(8, 'Analysis + Rule - Three Test Paper - (+Rule For Remark +Remark) Test Started At, Time Spent, Login ID Bef Name', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1, TimePer_1, ScorePer_1, RuleRemark_1, Remark_1, answered_2, score_2, attendance_2, TimeSpent_2, TimePer_2, ScorePer_2, RuleRemark_2, Remark_2, answered_3, score_3, attendance_3, TimeSpent_3, TimePer_3, ScorePer_3, RuleRemark_3, Remark_3', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins),Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark', 0),
(9, 'Analysis + Rule - One Test Paper - (+Rule For Remark +Remark) Test Started At, Time Spent, Login ID Bef Name', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1, TimePer_1, ScorePer_1, RuleRemark_1, Remark_1', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Rules For Remark, Remarks', 1),
(10, 'Analysis + Rule - Four Test Paper - (+Rule For Remark +Remark) Test Started At, Time Spent, Login ID Bef Name', 'sno, username, fullname, answered_1, score_1, attendance_1, TimeSpent_1, TimePer_1, ScorePer_1, RuleRemark_1, Remark_1, answered_2, score_2, attendance_2, TimeSpent_2, TimePer_2, ScorePer_2, RuleRemark_2, Remark_2, answered_3, score_3, attendance_3, TimeSpent_3, TimePer_3, ScorePer_3, RuleRemark_3, Remark_3, answered_4, score_4, attendance_4, TimeSpent_4, TimePer_4, ScorePer_4, RuleRemark_4, Remark_4', 'S. No., Login ID, Name of Student, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins), Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins),Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark, Qns Answered (Out of ~qn_count~), Score (Out of ~qn_count~), Attendance, Time Spent (Max ~time_limit~ mins),Time %(Max 100%), Score %(Max 100%), Rule For Remark, Remark', 0);

-- --------------------------------------------------------

--
-- Table structure for table `aa_mkrpt_usrgroup`
--

DROP TABLE IF EXISTS `aa_mkrpt_usrgroup`;
CREATE TABLE IF NOT EXISTS `aa_mkrpt_usrgroup` (
  `group_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `group_name` varchar(250) NOT NULL DEFAULT ' ',
  `user_list` varchar(8000) NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `aa_mkrpt_usrgroup`
--

INSERT INTO `aa_mkrpt_usrgroup` (`group_id`, `group_name`, `user_list`, `is_active`) VALUES
(2, 'Ultra', '*', 0),
(11, 'Ultra', '*', 1);

-- --------------------------------------------------------

--
-- Table structure for table `answers`
--

DROP TABLE IF EXISTS `answers`;
CREATE TABLE IF NOT EXISTS `answers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `answer_text` varchar(800) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `answer_image` varchar(450) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `correct_answer` int(11) NOT NULL,
  `priority` int(11) DEFAULT NULL,
  `correct_answer_text` varchar(800) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `answer_pos` int(11) NOT NULL DEFAULT 0,
  `parent_id` int(11) NOT NULL,
  `answer_text_eng` varchar(800) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `control_type` int(11) DEFAULT NULL,
  `answer_parent_id` int(11) DEFAULT NULL,
  `text_unit` char(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `group_id` (`group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `answers`
--

INSERT INTO `answers` (`id`, `group_id`, `answer_text`, `answer_image`, `correct_answer`, `priority`, `correct_answer_text`, `answer_pos`, `parent_id`, `answer_text_eng`, `control_type`, `answer_parent_id`, `text_unit`) VALUES
(1, 1, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(2, 1, 'B only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(3, 1, 'C and D', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(4, 1, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(5, 1, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(6, 2, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(7, 2, '21', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(8, 2, 'infinite loop', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(9, 2, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(10, 2, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(11, 3, 'skip', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(12, 3, 'continue', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(13, 3, 'never exit', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(14, 3, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(15, 3, 'b and c', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(16, 4, 'A only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(17, 4, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(18, 4, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(19, 4, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(20, 4, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(21, 5, '1,2,3,4,1,2,3,4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(22, 5, '1,2,3,1,2,3,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(23, 5, '1,2,3,4,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(24, 5, '1,2,3,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(25, 5, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(26, 6, '1,2,3,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(27, 6, '1,2,3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(28, 6, '1,2,3,4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(29, 6, '1,2,3,4,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(30, 6, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(31, 7, '50  50  50', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(32, 7, '50  51  52', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(33, 7, '50  51  52  53', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(34, 7, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(35, 7, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(36, 8, 'A,B,C,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(37, 8, 'A,A,A,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(38, 8, 'A,B,C', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(39, 8, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(40, 8, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(41, 9, '1  2  3  4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(42, 9, '1  2  3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(43, 9, '3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(44, 9, '4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(45, 9, 'None of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(46, 10, '1,2,3,4,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(47, 10, '0,1,2,3,4,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(48, 10, '1,2,3,4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(49, 10, '0,1,2,3,4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(50, 10, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(51, 11, 'Speed and Easiness', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(52, 11, 'Initialization, Incre / Decre', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(53, 11, 'Semicolons, Variables', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(54, 11, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(55, 11, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(56, 12, 'MOGLI, SHAREKHAN', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(57, 12, 'MOGLI, MOGLI', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(58, 12, 'MOGLI, SHAREKHAN, BALU', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(59, 12, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(60, 12, 'infinite loop', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(61, 13, '4 3 2 1', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(62, 13, '4 3 2 1 0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(63, 13, '3 2 1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(64, 13, 'Compile error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(65, 13, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(66, 14, '0,1,2,3,4,5,6', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(67, 14, '0,1,2,4,5,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(68, 14, '1,2,3,4,5,6,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(69, 14, '1,2,4,5,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(70, 14, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(71, 15, '0,1,2,3,4,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(72, 15, '1,2,3,4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(73, 15, '1,2,3,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(74, 15, '1,2,3,4,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(75, 15, 'Compile error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(76, 16, 'FFF', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(77, 16, 'XXX', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(78, 16, 'FOX', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(79, 16, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(80, 16, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(81, 17, 'BRAZIL BRAZIL', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(82, 17, 'BRAZIL CHILE', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(83, 17, 'BRAZIL CHILE SYDNEY', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(84, 17, 'SYDNEY SYDNEY', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(85, 17, 'None  of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(86, 18, 'if else', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(87, 18, 'switch', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(88, 18, 'enum', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(89, 18, 'exit', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(90, 18, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(91, 19, '1 2 3 4 5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(92, 19, '1,2,3,4,5,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(93, 19, '1 2 3 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(94, 19, '1,2,3,4,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(95, 19, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(96, 20, '1,1,1,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(97, 20, '1,2,2,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(98, 20, '1,1,2,', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(99, 20, '1,2,1,2,', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(100, 20, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(101, 21, 'Objects have identity, state, and behavior.', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(102, 21, 'Objects have state and behavior.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(103, 21, 'Objects have size and weight.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(104, 21, 'Objects have existence.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(105, 21, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(106, 22, 'methods', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(107, 22, 'variables', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(108, 22, 'classes', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(109, 22, 'interfaces', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(110, 22, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(111, 23, 'initializing', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(112, 23, 'instantiating', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(113, 23, 'interfacing', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(114, 23, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(115, 23, 'garbage', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(116, 24, '.java', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(117, 24, '.jar', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(118, 24, '.class', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(119, 24, '.cls', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(120, 24, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(121, 25, 'class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(122, 25, 'java', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(123, 25, 'new', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(124, 25, 'create', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(125, 25, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(126, 26, '1', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(127, 26, '2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(128, 26, '3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(129, 26, 'Any number', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(130, 26, 'None ofthese', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(131, 27, 'Hello Boss!', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(132, 27, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(133, 27, 'Runtime Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(134, 27, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(135, 27, 'Noneof these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(136, 28, 'state', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(137, 28, 'method', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(138, 28, 'behaviour', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(139, 28, 'reference', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(140, 28, 'procedure', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(141, 29, 'BINGO', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(142, 29, 'bingo', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(143, 29, 'Bingo', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(144, 29, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(145, 29, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(146, 30, '5  5', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(147, 30, '20 20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(148, 30, '5  20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(149, 30, '20  5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(150, 30, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(151, 31, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(152, 31, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(153, 31, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(154, 31, 'All of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(155, 31, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(156, 32, 'unchangeable', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(157, 32, 'eternal', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(158, 32, 'immutable', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(159, 32, 'non volatile', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(160, 32, 'unique', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(161, 33, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(162, 33, 'B only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(163, 33, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(164, 33, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(165, 33, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(166, 34, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(167, 34, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(168, 34, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(169, 34, 'D only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(170, 34, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(171, 35, 'constructor can\'t be private', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(172, 35, '50', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(173, 35, '10', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(174, 35, '10  50', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(175, 35, 'constructor can\'t be static', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(176, 36, 'private', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(177, 36, 'public', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(178, 36, 'protected', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(179, 36, 'default', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(180, 36, 'static', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(181, 37, 'Animal Wild', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(182, 37, 'Wild Animal', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(183, 37, 'Wild', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(184, 37, 'Animal', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(185, 37, 'Compile error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(186, 38, '0  8', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(187, 38, '5  0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(188, 38, '0  0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(189, 38, '5  8', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(190, 38, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(191, 39, 'reference variables', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(192, 39, 'object', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(193, 39, 'instance variables', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(194, 39, 'static variables', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(195, 39, 'public variables', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(196, 40, '1 and 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(197, 40, '2 and 4', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(198, 40, '3 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(199, 40, '1 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(200, 40, '1 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(201, 41, '1 only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(202, 41, '2 only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(203, 41, '3 only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(204, 41, '4 only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(205, 41, '1 and 2 only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(206, 42, 'Mammal eats food', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(207, 42, 'Cattle eats hay', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(208, 42, 'Horse eats hay', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(209, 42, 'Class cast Exception at runtime.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(210, 42, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(211, 43, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(212, 43, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(213, 43, 'C only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(214, 43, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(215, 43, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(216, 44, 'class B:A{}', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(217, 44, 'class B extends A{}', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(218, 44, 'class B extends class A{}', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(219, 44, 'class B implements A{}', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(220, 44, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(221, 45, '1 and 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(222, 45, '2 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(223, 45, '3 and 5', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(224, 45, '3 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(225, 45, '2 and 5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(226, 46, 'ExamDerived', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(227, 46, 'ExamBase Derived', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(228, 46, 'BaseExam Derived', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(229, 46, 'ExamDerived Base', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(230, 46, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(231, 47, '12', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(232, 47, '23', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(233, 47, '123', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(234, 47, '321', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(235, 47, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(236, 48, 'Only (II)', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(237, 48, '(I) and (II)', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(238, 48, '(II) and (III)', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(239, 48, 'Only (I)', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(240, 48, 'Only (III)', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(241, 49, 'Class One method1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(242, 49, 'Class Two method1', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(243, 49, 'Compilation Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(244, 49, 'Throws a NoSuch MethodException at runtime.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(245, 49, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(246, 50, 'Base to derived class', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(247, 50, 'Derived to base class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(248, 50, 'Random order', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(249, 50, 'both a and b', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(250, 50, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(251, 51, 'Class B method2 Class C method3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(252, 51, 'Class C method2 Class C method3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(253, 51, 'Compilation Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(254, 51, 'Runtime exception', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(255, 51, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(256, 52, '30', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(257, 52, '10', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(258, 52, '40', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(259, 52, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(260, 52, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(261, 53, '1 and 2', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(262, 53, '2 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(263, 53, '1 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(264, 53, '1 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(265, 53, '2 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(266, 54, 'Hi I am Child', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(267, 54, 'Hi i am parent', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(268, 54, 'Compile error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(269, 54, 'Runtime error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(270, 54, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(271, 55, 'only I', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(272, 55, 'only III', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(273, 55, 'I and II', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(274, 55, 'II and III', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(275, 55, 'II and IV', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(276, 56, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(277, 56, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(278, 56, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(279, 56, 'All of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(280, 56, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(281, 57, '15', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(282, 57, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(283, 57, '30', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(284, 57, 'compile error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(285, 57, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(286, 58, 'abstract', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(287, 58, 'superclass', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(288, 58, 'static class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(289, 58, 'final', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(290, 58, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(291, 59, 'superclass', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(292, 59, 'abstract', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(293, 59, 'final', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(294, 59, 'object class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(295, 59, 'derived class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(296, 60, 'A a = new B();', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(297, 60, 'A a = new B(5);', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(298, 60, 'A a = new A(String s);', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(299, 60, 'b ad c', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(300, 60, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(301, 61, 'Method overloading', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(302, 61, 'Method overriding', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(303, 61, 'Constructor overloading', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(304, 61, 'All of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(305, 61, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(306, 62, 'Method 1', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(307, 62, 'Method 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(308, 62, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(309, 62, 'Runtime Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(310, 62, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(311, 63, 'Class One method1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(312, 63, 'Class Two method1', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(313, 63, 'both a and b', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(314, 63, 'Nothing will be printed', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(315, 63, 'Compilation Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(316, 64, '20', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(317, 64, '25', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(318, 64, '20 25', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(319, 64, 'Compile error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(320, 64, 'runtime error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(321, 65, '10', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(322, 65, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(323, 65, '30', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(324, 65, '40', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(325, 65, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(326, 66, 'Method overloading', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(327, 66, 'Constructor overloading', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(328, 66, 'Method overriding', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(329, 66, 'Run time polymorphism', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(330, 66, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(331, 67, 'Class A method', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(332, 67, 'Class B method', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(333, 67, 'Compilation Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(334, 67, 'Runtime Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(335, 67, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(336, 68, 'super', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(337, 68, 'static', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(338, 68, 'final', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(339, 68, 'public', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(340, 68, 'private', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(341, 69, 'Value-B 11', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(342, 69, 'Value-B 10', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(343, 69, 'Value-A 10', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(344, 69, 'Value-A 11', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(345, 69, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(346, 70, 'long', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(347, 70, 'int', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(348, 70, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(349, 70, 'Runtime exception', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(350, 70, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(351, 71, '9.0  9.0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(352, 71, '9  9', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(353, 71, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(354, 71, 'Runtime Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(355, 71, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(356, 72, 'Value-A Name-B', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(357, 72, 'Value-A Value-A', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(358, 72, 'Value-A Name-C', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(359, 72, 'Name-B Name-C', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(360, 72, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(361, 73, 'Value-A', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(362, 73, 'Name-B', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(363, 73, 'Value-A Name-B', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(364, 73, 'Compilation fails - private methods can\'t be override', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(365, 73, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(366, 74, 'A B 8', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(367, 74, 'A 5 B 8', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(368, 74, 'A B 5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(369, 74, 'B 8 A 5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(370, 74, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(371, 75, 'I am a Person', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(372, 75, 'I am a Student', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(373, 75, 'I am a Person I am a Student', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(374, 75, 'I am a Student I am a Person', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(375, 75, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(376, 76, 'Father\'s Car', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(377, 76, 'Son\'s Car', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(378, 76, 'Son\'s Car Father\'s Car', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(379, 76, 'Compiler Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(380, 76, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(381, 77, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(382, 77, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(383, 77, 'C only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(384, 77, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(385, 77, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(386, 78, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(387, 78, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(388, 78, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(389, 78, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(390, 78, 'All of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(391, 79, 'public abstract method();', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(392, 79, 'public abstract void method();', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(393, 79, 'public void abstract Method();', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(394, 79, 'public void method() {}', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(395, 79, 'public abstract void method() {}', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(396, 80, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(397, 80, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(398, 80, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(399, 80, 'D only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(400, 80, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(401, 81, '1 and 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(402, 81, '2 and 4', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(403, 81, '3 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(404, 81, '1 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(405, 81, '2 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(406, 82, 'b is an instance of A.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(407, 82, 'b is an instance of C.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(408, 82, 'b is an instance of A followed by b is an instance of C.', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(409, 82, 'b is an instance of C followed by b is an instance of A.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(410, 82, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(411, 83, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(412, 83, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(413, 83, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(414, 83, 'D only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(415, 83, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(416, 84, 'will print Class One method', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(417, 84, 'will print Class Two method', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(418, 84, 'compiles fine but print nothing', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(419, 84, 'Compilation Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(420, 84, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(421, 85, '1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(422, 85, '2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(423, 85, '3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(424, 85, '4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(425, 85, 'None of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(426, 86, 'Successful run and print 37', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(427, 86, 'Compilation error due to line 1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(428, 86, 'Compilation error due to line 2', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(429, 86, 'Runtime error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(430, 86, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(431, 87, 'class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(432, 87, 'abstract class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(433, 87, 'interface', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(434, 87, 'method', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(435, 87, 'constructor', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(436, 88, '10', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(437, 88, '12', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(438, 88, 'compile error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(439, 88, 'runtime error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(440, 88, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(441, 89, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(442, 89, 'B only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(443, 89, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(444, 89, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(445, 89, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(446, 90, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(447, 90, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(448, 90, 'C only', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(449, 90, 'D only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(450, 90, 'All of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(451, 91, '1 and 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(452, 91, '2 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(453, 91, '3 and 6', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(454, 91, '3 and 5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(455, 91, '5 and 6', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(456, 92, 'The keywords public and abstract cannot be used together.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(457, 92, 'The method numberOfStudent() in class School must have a body.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(458, 92, 'You must add a return statement in method numberOfStudent().', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(459, 92, 'Class School must be defined abstract.', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(460, 92, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(461, 93, 'The keywords public and abstract cannot be used together.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(462, 93, 'The method numberOfStudent() in class must have a body.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(463, 93, 'You must add a return statement in method numberOfStudent().', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(464, 93, 'Class School must be defined abstract.', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(465, 93, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(466, 94, '1 and 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(467, 94, '2 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(468, 94, '3 and 4', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(469, 94, '1 and 3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(470, 94, '2 and 4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(471, 95, 'test-name', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(472, 95, 'Compilation fails due to an error on lines 1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(473, 95, 'Compilation fails due to an error on lines 2', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(474, 95, 'Compilation succeed but Runtime Exception', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(475, 95, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(476, 96, 'abstract', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(477, 96, 'extends', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(478, 96, 'abstract and extends', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(479, 96, 'Constructor', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(480, 96, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(481, 97, 'At run time', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(482, 97, 'At compile time', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(483, 97, 'At coding time', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(484, 97, 'At execution time', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(485, 97, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(486, 98, 'More than one method with same name but different method signature and different number or type of parameters', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(487, 98, 'More than one method with same name, same signature but different number of signature', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(488, 98, 'More than one method with same name, same signature, same number of parameters but different type', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(489, 98, 'More than one method with same name, same number of parameters and type but different signature', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(490, 98, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(491, 99, 'Sample', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(492, 99, 'Hello Sample', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(493, 99, 'Compilation error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(494, 99, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(495, 99, 'Runtime Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(496, 100, '1', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(497, 100, '2', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(498, 100, '3', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(499, 100, '4', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(500, 100, '5', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(501, 101, 'It is necessary to use new operator to initialize an array', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(502, 101, 'Array can be initialized using comma separated expressions surrounded by curly braces', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(503, 101, 'Array can be initialized when they are declared', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(504, 101, 'Array size cannot change, once it is declared.', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(505, 101, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(506, 102, 'Inheritance', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(507, 102, 'Multiple inheritance for classes', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(508, 102, 'multiple inheritance of interfaces', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(509, 102, 'compile time polymorphism', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(510, 102, 'Interface', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(511, 103, 'Compile time polymorphism', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(512, 103, 'Execution time polymorphism', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(513, 103, 'Multiple polymorphism', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(514, 103, 'Multilevel polymorphism', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(515, 103, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(516, 104, 'More than one method with same name but different method signature and different number or type of parameters', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(517, 104, 'More than one method with same name, same signature but different number of signature', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(518, 104, 'More than one method with same name, same signature, same number of parameters but different type', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(519, 104, 'More than one method with same name, same number of parameters and type but different signature', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(520, 104, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(521, 105, 'abstract', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(522, 105, 'extends', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(523, 105, 'abstract and extends', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(524, 105, 'Constructor', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(525, 105, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(526, 106, '0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(527, 106, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(528, 106, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(529, 106, 'Garbage', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(530, 106, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(531, 107, 'new', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(532, 107, 'this', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(533, 107, 'invoke', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(534, 107, 'class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(535, 107, 'object', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(536, 108, 'integer', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(537, 108, 'garbage', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(538, 108, 'no', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(539, 108, 'float', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(540, 108, 'initial', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(541, 109, 'abstract', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(542, 109, 'static', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(543, 109, 'final', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(544, 109, 'public', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(545, 109, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(546, 110, 'A only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(547, 110, 'B only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(548, 110, 'C only', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(549, 110, 'All of these', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(550, 110, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(551, 111, 'super', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(552, 111, 'static', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(553, 111, 'this', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(554, 111, 'final', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(555, 111, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(556, 112, '0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(557, 112, '20', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(558, 112, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(559, 112, 'Garbage', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(560, 112, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(561, 113, '2 1 0 1 0 0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(562, 113, '0 1 2 1 2 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(563, 113, '2 1 2 0 1 2', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(564, 113, '0 1 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(565, 113, 'Compie Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(566, 114, 'static class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(567, 114, 'dynamic class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(568, 114, 'final class', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(569, 114, 'abstract class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(570, 114, 'super class', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(571, 115, '30  35', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(572, 115, '35  35', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(573, 115, '35  40', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(574, 115, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(575, 115, 'Runtime error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(576, 116, '0 1 2', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(577, 116, '0 1 2 0 2 0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(578, 116, '2 1 0 1 0 0', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(579, 116, '0 2 0 1 2 0', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(580, 116, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(581, 117, '20  20  25', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(582, 117, '20  25  30', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(583, 117, '20  30  25', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(584, 117, 'Compile Error', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(585, 117, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(586, 118, 'Final', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(587, 118, 'throw', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(588, 118, 'try', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(589, 118, 'catch', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(590, 118, 'None of these', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(591, 119, '20', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(592, 119, '25', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(593, 119, '30', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(594, 119, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(595, 119, 'No output', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(596, 120, 'Base::show() called', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(597, 120, 'Derived::show() called', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(598, 120, 'Compile Error', NULL, 1, 0, '', 0, 0, NULL, 1, 0, ''),
(599, 120, 'Exception', NULL, 0, 0, '', 0, 0, NULL, 1, 0, ''),
(600, 120, 'both a and b', NULL, 0, 0, '', 0, 0, NULL, 1, 0, '');

-- --------------------------------------------------------

--
-- Table structure for table `apt_tp_rule`
--

DROP TABLE IF EXISTS `apt_tp_rule`;
CREATE TABLE IF NOT EXISTS `apt_tp_rule` (
  `tp_id` bigint(20) UNSIGNED NOT NULL,
  `rule` varchar(4000) NOT NULL DEFAULT '',
  PRIMARY KEY (`tp_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `apt_tp_rule`
--

INSERT INTO `apt_tp_rule` (`tp_id`, `rule`) VALUES
(1, ''),
(2, ''),
(3, ''),
(4, ''),
(5, ''),
(6, ''),
(7, ''),
(8, ''),
(9, ''),
(10, ''),
(11, ''),
(12, ''),
(13, ''),
(14, ''),
(15, ''),
(16, ''),
(17, ''),
(18, ''),
(19, ''),
(20, '');

-- --------------------------------------------------------

--
-- Table structure for table `assignments`
--

DROP TABLE IF EXISTS `assignments`;
CREATE TABLE IF NOT EXISTS `assignments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `quiz_id` int(11) NOT NULL DEFAULT 0,
  `org_quiz_id` int(11) NOT NULL DEFAULT 0,
  `results_mode` int(11) NOT NULL DEFAULT 0,
  `added_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `quiz_time` int(11) NOT NULL DEFAULT 0,
  `show_results` int(11) NOT NULL DEFAULT 0,
  `pass_score` decimal(10,2) NOT NULL DEFAULT 0.00,
  `quiz_type` int(11) NOT NULL DEFAULT 0,
  `status` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `assignments`
--

INSERT INTO `assignments` (`id`, `quiz_id`, `org_quiz_id`, `results_mode`, `added_date`, `quiz_time`, `show_results`, `pass_score`, `quiz_type`, `status`) VALUES
(1, 1, 1, 1, '2023-09-24 18:15:04', 60, 1, 40.00, 1, 2),
(2, 2, 2, 1, '2023-09-24 18:15:04', 60, 1, 40.00, 1, 0),
(3, 3, 3, 1, '2023-09-24 18:15:05', 60, 1, 40.00, 1, 0),
(4, 1, 1, 1, '2023-09-24 18:15:05', 60, 1, 40.00, 1, 2),
(5, 2, 2, 1, '2023-09-24 18:15:05', 60, 1, 40.00, 1, 0),
(6, 3, 3, 1, '2023-09-24 18:15:05', 60, 1, 40.00, 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `assignment_users`
--

DROP TABLE IF EXISTS `assignment_users`;
CREATE TABLE IF NOT EXISTS `assignment_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `assignment_id` int(11) NOT NULL DEFAULT 0,
  `user_type` int(11) NOT NULL DEFAULT 0,
  `user_id` int(11) NOT NULL DEFAULT 0,
  `shuffled_qn_ids` varchar(8000) NOT NULL DEFAULT '',
  `answered_ids` varchar(8000) NOT NULL DEFAULT '',
  `qns_time_spent` varchar(8000) NOT NULL DEFAULT ' ',
  `qns_visited` varchar(8000) NOT NULL DEFAULT ' ',
  `time_test_init` datetime DEFAULT NULL,
  `time_test_start` datetime DEFAULT NULL,
  `time_test_lastqn_answered` datetime DEFAULT NULL,
  `time_test_end` datetime DEFAULT NULL,
  `count_qns_answered` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `count_qns_correct` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `count_qns_visited` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `count_test_page_away` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `count_test_app_away` int(10) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `assignment_id` (`assignment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=643 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `assignment_users`
--

INSERT INTO `assignment_users` (`id`, `assignment_id`, `user_type`, `user_id`, `shuffled_qn_ids`, `answered_ids`, `qns_time_spent`, `qns_visited`, `time_test_init`, `time_test_start`, `time_test_lastqn_answered`, `time_test_end`, `count_qns_answered`, `count_qns_correct`, `count_qns_visited`, `count_test_page_away`, `count_test_app_away`) VALUES
(1, 1, 1, 2, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(2, 1, 1, 3, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(3, 1, 1, 4, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(4, 1, 1, 5, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(5, 1, 1, 6, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(6, 1, 1, 7, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(7, 1, 1, 8, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(8, 1, 1, 9, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(9, 1, 1, 10, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(10, 1, 1, 11, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(11, 1, 1, 12, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(12, 1, 1, 13, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(13, 1, 1, 14, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(14, 1, 1, 15, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(15, 1, 1, 16, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(16, 1, 1, 17, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(17, 1, 1, 18, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(18, 1, 1, 19, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(19, 1, 1, 20, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(20, 1, 1, 21, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(21, 1, 1, 22, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(22, 1, 1, 23, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(23, 1, 1, 24, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(24, 1, 1, 25, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(25, 1, 1, 26, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(26, 1, 1, 27, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(27, 1, 1, 28, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(28, 1, 1, 29, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(29, 1, 1, 30, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(30, 1, 1, 31, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(31, 1, 1, 32, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(32, 1, 1, 33, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(33, 1, 1, 34, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(34, 1, 1, 35, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(35, 1, 1, 36, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(36, 1, 1, 37, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(37, 1, 1, 38, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(38, 1, 1, 39, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(39, 1, 1, 40, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(40, 1, 1, 41, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(41, 1, 1, 42, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(42, 1, 1, 43, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(43, 1, 1, 44, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(44, 1, 1, 45, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(45, 1, 1, 46, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(46, 1, 1, 47, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(47, 1, 1, 48, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(48, 1, 1, 49, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(49, 1, 1, 50, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(50, 1, 1, 51, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(51, 1, 1, 52, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(52, 1, 1, 53, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(53, 1, 1, 54, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(54, 1, 1, 55, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(55, 1, 1, 56, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(56, 1, 1, 57, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(57, 1, 1, 58, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(58, 1, 1, 59, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(59, 1, 1, 60, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(60, 1, 1, 61, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(61, 1, 1, 62, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(62, 1, 1, 63, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(63, 1, 1, 64, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(64, 1, 1, 65, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(65, 1, 1, 66, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(66, 1, 1, 67, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(67, 1, 1, 68, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(68, 1, 1, 69, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(69, 1, 1, 70, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(70, 1, 1, 71, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(71, 1, 1, 72, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(72, 1, 1, 73, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(73, 1, 1, 74, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(74, 1, 1, 75, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(75, 1, 1, 76, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(76, 2, 1, 2, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(77, 2, 1, 3, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(78, 2, 1, 4, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(79, 2, 1, 5, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(80, 2, 1, 6, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(81, 2, 1, 7, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(82, 2, 1, 8, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(83, 2, 1, 9, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(84, 2, 1, 10, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(85, 2, 1, 11, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(86, 2, 1, 12, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(87, 2, 1, 13, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(88, 2, 1, 14, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(89, 2, 1, 15, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(90, 2, 1, 16, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(91, 2, 1, 17, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(92, 2, 1, 18, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(93, 2, 1, 19, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(94, 2, 1, 20, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(95, 2, 1, 21, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(96, 2, 1, 22, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(97, 2, 1, 23, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(98, 2, 1, 24, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(99, 2, 1, 25, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(100, 2, 1, 26, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(101, 2, 1, 27, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(102, 2, 1, 28, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(103, 2, 1, 29, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(104, 2, 1, 30, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(105, 2, 1, 31, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(106, 2, 1, 32, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(107, 2, 1, 33, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(108, 2, 1, 34, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(109, 2, 1, 35, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(110, 2, 1, 36, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(111, 2, 1, 37, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(112, 2, 1, 38, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(113, 2, 1, 39, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(114, 2, 1, 40, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(115, 2, 1, 41, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(116, 2, 1, 42, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(117, 2, 1, 43, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(118, 2, 1, 44, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(119, 2, 1, 45, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(120, 2, 1, 46, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(121, 2, 1, 47, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(122, 2, 1, 48, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(123, 2, 1, 49, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(124, 2, 1, 50, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(125, 2, 1, 51, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(126, 2, 1, 52, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(127, 2, 1, 53, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(128, 2, 1, 54, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(129, 2, 1, 55, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(130, 2, 1, 56, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(131, 2, 1, 57, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(132, 2, 1, 58, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(133, 2, 1, 59, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(134, 2, 1, 60, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(135, 2, 1, 61, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(136, 2, 1, 62, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(137, 2, 1, 63, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(138, 2, 1, 64, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(139, 2, 1, 65, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(140, 2, 1, 66, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(141, 2, 1, 67, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(142, 2, 1, 68, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(143, 2, 1, 69, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(144, 2, 1, 70, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(145, 2, 1, 71, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(146, 2, 1, 72, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(147, 2, 1, 73, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(148, 2, 1, 74, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(149, 2, 1, 75, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(150, 2, 1, 76, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(151, 3, 1, 2, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(152, 3, 1, 3, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(153, 3, 1, 4, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(154, 3, 1, 5, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(155, 3, 1, 6, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(156, 3, 1, 7, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(157, 3, 1, 8, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(158, 3, 1, 9, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(159, 3, 1, 10, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(160, 3, 1, 11, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(161, 3, 1, 12, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(162, 3, 1, 13, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(163, 3, 1, 14, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(164, 3, 1, 15, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(165, 3, 1, 16, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(166, 3, 1, 17, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(167, 3, 1, 18, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(168, 3, 1, 19, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(169, 3, 1, 20, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(170, 3, 1, 21, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(171, 3, 1, 22, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(172, 3, 1, 23, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(173, 3, 1, 24, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(174, 3, 1, 25, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(175, 3, 1, 26, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(176, 3, 1, 27, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(177, 3, 1, 28, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(178, 3, 1, 29, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(179, 3, 1, 30, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(180, 3, 1, 31, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(181, 3, 1, 32, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(182, 3, 1, 33, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(183, 3, 1, 34, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(184, 3, 1, 35, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(185, 3, 1, 36, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(186, 3, 1, 37, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(187, 3, 1, 38, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(188, 3, 1, 39, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(189, 3, 1, 40, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(190, 3, 1, 41, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(191, 3, 1, 42, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(192, 3, 1, 43, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(193, 3, 1, 44, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(194, 3, 1, 45, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(195, 3, 1, 46, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(196, 3, 1, 47, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(197, 3, 1, 48, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(198, 3, 1, 49, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(199, 3, 1, 50, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(200, 3, 1, 51, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(201, 3, 1, 52, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(202, 3, 1, 53, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(203, 3, 1, 54, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(204, 3, 1, 55, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(205, 3, 1, 56, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(206, 3, 1, 57, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(207, 3, 1, 58, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(208, 3, 1, 59, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(209, 3, 1, 60, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(210, 3, 1, 61, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(211, 3, 1, 62, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(212, 3, 1, 63, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(213, 3, 1, 64, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(214, 3, 1, 65, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(215, 3, 1, 66, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(216, 3, 1, 67, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(217, 3, 1, 68, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(218, 3, 1, 69, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(219, 3, 1, 70, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(220, 3, 1, 71, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(221, 3, 1, 72, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(222, 3, 1, 73, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(223, 3, 1, 74, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(224, 3, 1, 75, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(225, 3, 1, 76, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(226, 4, 1, 77, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(227, 4, 1, 78, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(228, 4, 1, 79, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(229, 4, 1, 80, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(230, 4, 1, 81, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(231, 4, 1, 82, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(232, 4, 1, 83, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(233, 4, 1, 84, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(234, 4, 1, 85, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(235, 4, 1, 86, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(236, 4, 1, 87, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(237, 4, 1, 88, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(238, 4, 1, 89, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(239, 4, 1, 90, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(240, 4, 1, 91, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(241, 4, 1, 92, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(242, 4, 1, 93, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(243, 4, 1, 94, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(244, 4, 1, 95, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(245, 4, 1, 96, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(246, 4, 1, 97, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(247, 4, 1, 98, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(248, 4, 1, 99, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(249, 4, 1, 100, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(250, 4, 1, 101, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(251, 4, 1, 102, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(252, 4, 1, 103, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(253, 4, 1, 104, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(254, 4, 1, 105, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(255, 4, 1, 106, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(256, 4, 1, 107, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(257, 4, 1, 108, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(258, 4, 1, 109, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(259, 4, 1, 110, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(260, 4, 1, 111, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(261, 4, 1, 112, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(262, 4, 1, 113, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(263, 4, 1, 114, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(264, 4, 1, 115, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(265, 4, 1, 116, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(266, 4, 1, 117, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(267, 4, 1, 118, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(268, 4, 1, 119, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(269, 4, 1, 120, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(270, 4, 1, 121, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(271, 4, 1, 122, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(272, 4, 1, 123, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(273, 4, 1, 124, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(274, 4, 1, 125, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(275, 4, 1, 126, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(276, 4, 1, 127, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(277, 4, 1, 128, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(278, 4, 1, 129, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(279, 4, 1, 130, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(280, 4, 1, 131, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(281, 4, 1, 132, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(282, 4, 1, 133, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(283, 4, 1, 134, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(284, 4, 1, 135, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(285, 4, 1, 136, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(286, 4, 1, 137, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(287, 4, 1, 138, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(288, 4, 1, 139, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(289, 4, 1, 140, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(290, 4, 1, 141, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(291, 4, 1, 142, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(292, 4, 1, 143, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(293, 4, 1, 144, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(294, 4, 1, 145, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(295, 4, 1, 146, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(296, 4, 1, 147, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(297, 4, 1, 148, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(298, 4, 1, 149, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(299, 4, 1, 150, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(300, 4, 1, 151, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(301, 4, 1, 152, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(302, 4, 1, 153, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(303, 4, 1, 154, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(304, 4, 1, 155, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(305, 4, 1, 156, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(306, 4, 1, 157, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(307, 4, 1, 158, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(308, 4, 1, 159, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(309, 4, 1, 160, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(310, 4, 1, 161, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(311, 4, 1, 162, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(312, 4, 1, 163, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(313, 4, 1, 164, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(314, 4, 1, 165, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(315, 4, 1, 166, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(316, 4, 1, 167, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(317, 4, 1, 168, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(318, 4, 1, 169, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(319, 4, 1, 170, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(320, 4, 1, 171, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(321, 4, 1, 172, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(322, 4, 1, 173, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(323, 4, 1, 174, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(324, 4, 1, 175, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(325, 4, 1, 176, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(326, 4, 1, 177, '1:16,2:8,3:37,4:30,5:4,6:31,7:35,8:22,9:28,10:13,11:7,12:19,13:17,14:9,15:38,16:26,17:39,18:5,19:25,20:21,21:29,22:27,23:23,24:36,25:11,26:3,27:33,28:32,29:2,30:24,31:20,32:1,33:34,34:40,35:18,36:12,37:14,38:6,39:10,40:15', '1:3,2:8,3:14,4:16,5:23,6:28,7:33,8:39,9:42,10:48,11:53,12:57,13:61,14:68,15:72,16:80,17:83,18:87,19:91,20:96,21:102,22:107,23:111,24:118,25:123,26:128,27:132,28:136,29:144,30:146,31:151,32:158,33:163,34:169,35:171,36:180,37:181,38:187,39:193,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(327, 4, 1, 178, '1:6,2:20,3:40,4:12,5:35,6:8,7:11,8:7,9:28,10:23,11:5,12:27,13:31,14:16,15:33,16:38,17:22,18:32,19:21,20:34,21:13,22:39,23:15,24:1,25:19,26:30,27:37,28:4,29:24,30:18,31:14,32:3,33:25,34:17,35:36,36:29,37:9,38:26,39:2,40:10', '1:4,2:8,3:15,4:19,5:21,6:29,7:33,8:39,9:43,10:49,11:55,12:59,13:61,14:67,15:72,16:79,17:81,18:89,19:94,20:98,21:103,22:109,23:113,24:120,25:125,26:128,27:132,28:139,29:142,30:147,31:155,32:158,33:163,34:167,35:172,36:180,37:183,38:187,39:195,40:200', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(328, 4, 1, 179, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(329, 4, 1, 180, '1:14,2:38,3:29,4:35,5:12,6:39,7:26,8:8,9:32,10:15,11:5,12:30,13:13,14:18,15:34,16:25,17:21,18:4,19:7,20:28,21:27,22:33,23:31,24:23,25:40,26:16,27:9,28:2,29:11,30:36,31:1,32:37,33:22,34:24,35:10,36:17,37:20,38:19,39:3,40:6', '1:2,2:7,3:11,4:17,5:23,6:29,7:33,8:38,9:42,10:50,11:52,12:58,13:64,14:69,15:72,16:78,17:82,18:89,19:95,20:98,21:102,22:107,23:112,24:118,25:123,26:126,27:132,28:136,29:144,30:147,31:151,32:158,33:162,34:168,35:175,36:180,37:185,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(330, 4, 1, 181, '1:29,2:1,3:40,4:38,5:20,6:32,7:36,8:33,9:28,10:14,11:31,12:27,13:26,14:9,15:13,16:15,17:16,18:35,19:18,20:23,21:8,22:3,23:24,24:6,25:7,26:5,27:11,28:12,29:19,30:34,31:21,32:25,33:2,34:4,35:39,36:17,37:10,38:37,39:30,40:22', '1:2,2:7,3:15,4:16,5:22,6:29,7:32,8:36,9:45,10:47,11:53,12:58,13:61,14:69,15:74,16:78,17:82,18:90,19:91,20:98,21:102,22:106,23:112,24:118,25:123,26:126,27:131,28:138,29:141,30:146,31:151,32:158,33:162,34:168,35:174,36:180,37:181,38:186,39:194,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(331, 4, 1, 182, '1:31,2:23,3:35,4:16,5:11,6:1,7:5,8:18,9:4,10:32,11:17,12:25,13:26,14:14,15:7,16:2,17:9,18:22,19:12,20:19,21:15,22:13,23:37,24:30,25:36,26:34,27:38,28:24,29:40,30:21,31:28,32:6,33:39,34:10,35:3,36:27,37:33,38:20,39:29,40:8', '1:2,2:6,3:12,4:18,5:22,6:26,7:33,8:40,9:41,10:47,11:54,12:58,13:61,14:69,15:74,16:78,17:83,18:90,19:91,20:99,21:101,22:107,23:112,24:118,25:123,26:126,27:131,28:136,29:142,30:148,31:151,32:158,33:162,34:169,35:172,36:180,37:181,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(332, 4, 1, 183, '1:28,2:25,3:29,4:26,5:32,6:31,7:15,8:12,9:21,10:22,11:40,12:24,13:6,14:10,15:1,16:33,17:19,18:14,19:11,20:37,21:36,22:16,23:2,24:34,25:35,26:13,27:4,28:20,29:5,30:18,31:17,32:7,33:27,34:23,35:3,36:30,37:38,38:39,39:8,40:9', '1:2,2:7,3:14,4:16,5:22,6:26,7:35,8:38,9:45,10:50,11:52,12:58,13:61,14:69,15:71,16:80,17:82,18:89,19:95,20:100,21:101,22:110,23:112,24:118,25:123,26:129,27:131,28:136,29:141,30:150,31:153,32:158,33:162,34:169,35:175,36:180,37:181,38:190,39:193,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(333, 4, 1, 184, '1:4,2:19,3:16,4:38,5:24,6:40,7:2,8:33,9:15,10:11,11:17,12:37,13:3,14:22,15:31,16:18,17:21,18:35,19:28,20:39,21:27,22:30,23:7,24:29,25:32,26:6,27:25,28:12,29:36,30:14,31:23,32:5,33:8,34:9,35:26,36:10,37:1,38:13,39:34,40:20', '1:2,2:7,3:14,4:18,5:23,6:28,7:35,8:36,9:45,10:47,11:52,12:58,13:61,14:67,15:72,16:80,17:82,18:86,19:91,20:97,21:102,22:107,23:112,24:118,25:123,26:129,27:132,28:138,29:144,30:146,31:151,32:158,33:163,34:170,35:175,36:180,37:185,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(334, 4, 1, 185, '1:18,2:19,3:22,4:33,5:30,6:34,7:16,8:21,9:5,10:38,11:17,12:12,13:8,14:28,15:3,16:29,17:11,18:25,19:20,20:39,21:7,22:14,23:15,24:37,25:31,26:4,27:32,28:2,29:40,30:26,31:6,32:27,33:1,34:36,35:24,36:35,37:23,38:10,39:9,40:13', '1:4,2:6,3:14,4:17,5:24,6:30,7:33,8:36,9:45,10:47,11:52,12:58,13:61,14:68,15:75,16:80,17:85,18:87,19:91,20:100,21:102,22:106,23:112,24:116,25:123,26:129,27:135,28:136,29:141,30:148,31:152,32:158,33:162,34:169,35:175,36:176,37:183,38:189,39:193,40:196', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(335, 4, 1, 186, '1:15,2:40,3:13,4:35,5:19,6:21,7:16,8:23,9:30,10:1,11:32,12:6,13:18,14:3,15:22,16:20,17:27,18:37,19:10,20:31,21:7,22:26,23:34,24:8,25:9,26:2,27:28,28:17,29:25,30:4,31:12,32:38,33:5,34:14,35:29,36:39,37:33,38:24,39:36,40:11', '1:2,2:6,3:13,4:19,5:22,6:29,7:32,8:39,9:45,10:47,11:52,12:56,13:61,14:67,15:72,16:78,17:83,18:87,19:95,20:97,21:102,22:107,23:112,24:118,25:123,26:126,27:131,28:136,29:141,30:146,31:155,32:158,33:163,34:168,35:175,36:180,37:182,38:188,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(336, 4, 1, 187, '1:26,2:12,3:5,4:36,5:2,6:7,7:22,8:15,9:16,10:8,11:1,12:4,13:33,14:17,15:27,16:25,17:23,18:39,19:9,20:13,21:31,22:32,23:21,24:35,25:3,26:20,27:6,28:40,29:37,30:11,31:10,32:34,33:29,34:14,35:18,36:28,37:38,38:19,39:30,40:24', '1:2,2:7,3:11,4:16,5:23,6:30,7:34,8:36,9:45,10:47,11:51,12:59,13:61,14:69,15:75,16:80,17:85,18:90,19:95,20:100,21:101,22:110,23:112,24:118,25:123,26:129,27:132,28:136,29:141,30:146,31:155,32:158,33:162,34:168,35:171,36:176,37:182,38:190,39:193,40:200', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(337, 4, 1, 188, '1:26,2:3,3:36,4:1,5:27,6:30,7:10,8:17,9:38,10:13,11:11,12:19,13:21,14:15,15:16,16:7,17:33,18:14,19:20,20:28,21:4,22:29,23:40,24:32,25:23,26:37,27:8,28:31,29:24,30:9,31:6,32:2,33:34,34:12,35:18,36:22,37:35,38:25,39:5,40:39', '1:3,2:8,3:13,4:17,5:22,6:28,7:32,8:37,9:42,10:49,11:52,12:57,13:64,14:66,15:72,16:78,17:83,18:90,19:94,20:98,21:102,22:108,23:113,24:116,25:123,26:127,27:134,28:140,29:141,30:147,31:154,32:159,33:164,34:168,35:173,36:180,37:181,38:187,39:194,40:199', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(338, 4, 1, 189, '1:15,2:5,3:20,4:26,5:40,6:17,7:33,8:18,9:31,10:7,11:12,12:24,13:39,14:38,15:10,16:3,17:16,18:22,19:35,20:25,21:37,22:29,23:6,24:30,25:4,26:32,27:1,28:27,29:13,30:21,31:34,32:8,33:11,34:2,35:28,36:9,37:36,38:23,39:14,40:19', '1:2,2:7,3:12,4:16,5:21,6:28,7:33,8:36,9:45,10:47,11:52,12:58,13:61,14:68,15:72,16:78,17:82,18:90,19:91,20:96,21:102,22:107,23:112,24:118,25:123,26:126,27:132,28:138,29:144,30:146,31:151,32:158,33:162,34:169,35:175,36:180,37:185,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(339, 4, 1, 190, '1:11,2:13,3:28,4:30,5:8,6:37,7:29,8:39,9:24,10:26,11:4,12:38,13:20,14:17,15:9,16:40,17:18,18:21,19:10,20:6,21:19,22:36,23:34,24:23,25:16,26:35,27:33,28:22,29:5,30:27,31:15,32:25,33:12,34:31,35:14,36:32,37:2,38:3,39:1,40:7', '1:2,2:9,3:13,4:18,5:22,6:27,7:33,8:39,9:43,10:48,11:52,12:57,13:62,14:67,15:73,16:76,17:84,18:88,19:93,20:96,21:104,22:108,23:113,24:118,25:124,26:128,27:132,28:137,29:141,30:148,31:153,32:156,33:163,34:167,35:173,36:179,37:182,38:188,39:194,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(340, 4, 1, 191, '1:9,2:38,3:32,4:4,5:34,6:17,7:20,8:14,9:5,10:21,11:40,12:29,13:12,14:16,15:3,16:10,17:8,18:31,19:36,20:37,21:23,22:15,23:18,24:27,25:22,26:26,27:25,28:28,29:7,30:6,31:13,32:24,33:19,34:33,35:35,36:2,37:11,38:1,39:30,40:39', '1:2,2:6,3:12,4:18,5:24,6:29,7:32,8:40,9:41,10:47,11:54,12:58,13:61,14:66,15:74,16:77,17:83,18:87,19:94,20:98,21:101,22:107,23:112,24:116,25:123,26:126,27:131,28:138,29:141,30:148,31:154,32:158,33:162,34:169,35:174,36:180,37:181,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(341, 4, 1, 192, '1:6,2:18,3:8,4:5,5:1,6:34,7:29,8:21,9:26,10:19,11:25,12:3,13:22,14:39,15:33,16:9,17:32,18:4,19:30,20:27,21:7,22:13,23:16,24:24,25:35,26:23,27:28,28:38,29:11,30:15,31:37,32:2,33:12,34:17,35:10,36:36,37:14,38:20,39:40,40:31', '1:2,2:8,3:11,4:18,5:21,6:29,7:32,8:38,9:45,10:49,11:52,12:58,13:61,14:69,15:74,16:79,17:82,18:87,19:91,20:96,21:102,22:108,23:112,24:116,25:123,26:129,27:135,28:136,29:141,30:148,31:154,32:160,33:162,34:168,35:172,36:180,37:181,38:186,39:193,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(342, 4, 1, 193, '1:29,2:37,3:26,4:16,5:2,6:35,7:11,8:34,9:10,10:13,11:14,12:22,13:4,14:38,15:6,16:31,17:17,18:36,19:7,20:18,21:33,22:5,23:32,24:24,25:9,26:20,27:23,28:25,29:30,30:27,31:3,32:21,33:40,34:8,35:1,36:15,37:12,38:19,39:28,40:39', '1:4,2:7,3:11,4:16,5:24,6:26,7:35,8:39,9:45,10:50,11:52,12:58,13:61,14:69,15:72,16:80,17:85,18:90,19:95,20:97,21:101,22:106,23:112,24:117,25:123,26:128,27:132,28:136,29:141,30:146,31:154,32:158,33:162,34:167,35:171,36:180,37:185,38:189,39:193,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(343, 4, 1, 194, '1:2,2:19,3:29,4:35,5:12,6:14,7:11,8:31,9:22,10:27,11:23,12:25,13:21,14:1,15:32,16:34,17:24,18:15,19:39,20:7,21:17,22:37,23:33,24:28,25:16,26:8,27:20,28:5,29:6,30:9,31:36,32:3,33:4,34:38,35:40,36:13,37:10,38:26,39:18,40:30', '1:2,2:7,3:11,4:19,5:25,6:26,7:34,8:36,9:45,10:50,11:52,12:58,13:61,14:69,15:75,16:80,17:85,18:86,19:95,20:98,21:102,22:108,23:112,24:118,25:123,26:129,27:132,28:138,29:144,30:148,31:151,32:158,33:162,34:169,35:175,36:180,37:182,38:189,39:194,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(344, 4, 1, 195, '1:3,2:10,3:13,4:15,5:30,6:7,7:28,8:38,9:16,10:35,11:9,12:26,13:1,14:37,15:27,16:5,17:34,18:21,19:36,20:20,21:32,22:39,23:19,24:33,25:14,26:24,27:11,28:8,29:12,30:40,31:23,32:17,33:22,34:31,35:29,36:25,37:6,38:4,39:2,40:18', '1:4,2:6,3:14,4:19,5:23,6:30,7:35,8:36,9:42,10:50,11:54,12:60,13:61,14:69,15:75,16:80,17:85,18:87,19:95,20:98,21:103,22:107,23:113,24:116,25:123,26:128,27:131,28:137,29:141,30:148,31:153,32:160,33:165,34:167,35:175,36:177,37:183,38:189,39:191,40:199', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(345, 4, 1, 196, '1:21,2:39,3:22,4:8,5:17,6:30,7:16,8:26,9:37,10:35,11:3,12:20,13:38,14:1,15:14,16:4,17:18,18:31,19:33,20:24,21:7,22:12,23:28,24:40,25:25,26:2,27:9,28:13,29:11,30:32,31:5,32:29,33:27,34:34,35:10,36:19,37:15,38:6,39:36,40:23', '1:2,2:7,3:14,4:16,5:21,6:28,7:33,8:36,9:45,10:46,11:54,12:58,13:61,14:69,15:71,16:78,17:82,18:86,19:92,20:100,21:102,22:106,23:113,24:118,25:122,26:126,27:133,28:138,29:141,30:146,31:151,32:156,33:162,34:168,35:172,36:178,37:181,38:186,39:194,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(346, 4, 1, 197, '1:36,2:17,3:27,4:16,5:12,6:8,7:5,8:40,9:31,10:6,11:10,12:15,13:35,14:23,15:33,16:34,17:2,18:24,19:3,20:21,21:28,22:13,23:26,24:25,25:38,26:7,27:4,28:39,29:11,30:1,31:19,32:29,33:30,34:18,35:20,36:32,37:9,38:37,39:14,40:22', '1:3,2:7,3:15,4:17,5:21,6:29,7:32,8:38,9:43,10:47,11:53,12:58,13:61,14:67,15:74,16:78,17:82,18:86,19:95,20:98,21:102,22:107,23:112,24:118,25:123,26:126,27:131,28:138,29:144,30:146,31:151,32:158,33:162,34:169,35:171,36:180,37:182,38:186,39:193,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(347, 4, 1, 198, '1:21,2:4,3:30,4:2,5:36,6:32,7:27,8:24,9:17,10:28,11:37,12:18,13:12,14:39,15:13,16:25,17:6,18:15,19:29,20:40,21:20,22:26,23:16,24:31,25:11,26:35,27:1,28:14,29:7,30:5,31:23,32:34,33:9,34:10,35:22,36:33,37:38,38:8,39:3,40:19', '1:3,2:7,3:12,4:16,5:24,6:28,7:31,8:38,9:43,10:46,11:54,12:58,13:61,14:69,15:71,16:76,17:82,18:87,19:93,20:97,21:101,22:108,23:111,24:119,25:125,26:129,27:131,28:136,29:141,30:146,31:153,32:158,33:163,34:168,35:172,36:180,37:183,38:188,39:191,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(348, 4, 1, 199, '1:26,2:2,3:24,4:3,5:19,6:31,7:32,8:8,9:17,10:12,11:7,12:38,13:22,14:33,15:6,16:11,17:23,18:18,19:35,20:14,21:4,22:36,23:30,24:39,25:20,26:29,27:16,28:27,29:13,30:15,31:10,32:21,33:5,34:9,35:34,36:40,37:25,38:1,39:37,40:28', '1:3,2:7,3:11,4:18,5:23,6:28,7:32,8:36,9:41,10:48,11:53,12:58,13:63,14:67,15:74,16:78,17:85,18:89,19:91,20:99,21:102,22:108,23:112,24:118,25:123,26:128,27:132,28:140,29:142,30:148,31:155,32:156,33:165,34:169,35:174,36:177,37:184,38:187,39:193,40:199', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(349, 4, 1, 200, '1:13,2:33,3:3,4:21,5:22,6:23,7:17,8:15,9:10,10:29,11:12,12:31,13:8,14:2,15:30,16:16,17:27,18:14,19:36,20:24,21:19,22:38,23:7,24:39,25:18,26:1,27:28,28:4,29:9,30:20,31:37,32:40,33:35,34:25,35:26,36:6,37:34,38:32,39:5,40:11', '1:1,2:8,3:14,4:18,5:21,6:28,7:33,8:38,9:41,10:46,11:54,12:56,13:61,14:67,15:72,16:76,17:81,18:87,19:91,20:96,21:102,22:106,23:111,24:116,25:122,26:126,27:131,28:138,29:141,30:147,31:151,32:159,33:162,34:168,35:174,36:177,37:181,38:186,39:191,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(350, 4, 1, 201, '1:7,2:16,3:18,4:33,5:34,6:2,7:37,8:20,9:22,10:19,11:11,12:15,13:29,14:23,15:8,16:21,17:40,18:12,19:36,20:1,21:5,22:31,23:17,24:39,25:30,26:35,27:32,28:3,29:26,30:9,31:25,32:28,33:13,34:38,35:24,36:14,37:4,38:27,39:10,40:6', '1:2,2:7,3:12,4:17,5:22,6:27,7:32,8:37,9:42,10:47,11:52,12:57,13:62,14:67,15:72,16:77,17:82,18:87,19:92,20:97,21:102,22:107,23:112,24:116,25:122,26:127,27:132,28:137,29:142,30:147,31:152,32:157,33:162,34:167,35:172,36:177,37:182,38:187,39:192,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(351, 4, 1, 202, '1:7,2:8,3:2,4:15,5:35,6:23,7:10,8:32,9:13,10:9,11:20,12:17,13:6,14:38,15:31,16:24,17:34,18:27,19:29,20:5,21:19,22:4,23:1,24:16,25:18,26:12,27:22,28:30,29:3,30:14,31:37,32:11,33:25,34:39,35:28,36:33,37:40,38:26,39:21,40:36', '1:2,2:7,3:14,4:20,5:22,6:29,7:34,8:36,9:41,10:50,11:54,12:58,13:65,14:68,15:72,16:80,17:85,18:86,19:95,20:100,21:101,22:108,23:112,24:118,25:123,26:126,27:132,28:137,29:141,30:148,31:154,32:158,33:162,34:169,35:175,36:180,37:182,38:188,39:194,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(352, 4, 1, 203, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(353, 4, 1, 204, '1:1,2:33,3:14,4:10,5:17,6:35,7:9,8:24,9:23,10:38,11:25,12:13,13:12,14:28,15:21,16:16,17:19,18:4,19:11,20:2,21:37,22:32,23:34,24:8,25:39,26:3,27:18,28:36,29:29,30:15,31:30,32:40,33:7,34:20,35:22,36:6,37:27,38:26,39:31,40:5', '1:2,2:7,3:15,4:16,5:-1,6:30,7:34,8:36,9:42,10:47,11:54,12:56,13:61,14:70,15:75,16:80,17:-1,18:90,19:91,20:100,21:102,22:108,23:111,24:120,25:121,26:129,27:133,28:137,29:141,30:146,31:153,32:160,33:162,34:169,35:175,36:179,37:185,38:189,39:195,40:200', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(354, 4, 1, 205, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(355, 4, 1, 206, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(356, 4, 1, 207, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(357, 4, 1, 208, '1:28,2:15,3:5,4:7,5:3,6:31,7:35,8:12,9:36,10:39,11:19,12:21,13:8,14:1,15:26,16:23,17:6,18:4,19:27,20:29,21:9,22:33,23:13,24:22,25:37,26:11,27:25,28:40,29:16,30:18,31:38,32:14,33:10,34:32,35:34,36:24,37:20,38:17,39:2,40:30', '1:4,2:8,3:14,4:16,5:24,6:27,7:34,8:38,9:45,10:49,11:54,12:58,13:61,14:69,15:75,16:79,17:83,18:89,19:91,20:99,21:102,22:106,23:112,24:118,25:123,26:126,27:131,28:136,29:141,30:147,31:155,32:158,33:162,34:168,35:171,36:180,37:185,38:190,39:194,40:198', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(358, 4, 1, 209, '1:5,2:23,3:19,4:9,5:29,6:38,7:39,8:10,9:31,10:37,11:21,12:2,13:35,14:13,15:18,16:32,17:1,18:17,19:12,20:28,21:24,22:16,23:30,24:20,25:11,26:25,27:33,28:8,29:40,30:36,31:26,32:3,33:22,34:34,35:4,36:27,37:15,38:14,39:6,40:7', '1:2,2:10,3:15,4:19,5:25,6:26,7:33,8:36,9:45,10:47,11:52,12:58,13:61,14:67,15:71,16:78,17:83,18:88,19:91,20:99,21:102,22:107,23:112,24:118,25:123,26:126,27:133,28:136,29:141,30:150,31:154,32:158,33:165,34:167,35:175,36:180,37:182,38:189,39:194,40:199', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(359, 4, 1, 210, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(360, 4, 1, 211, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(361, 4, 1, 212, '1:14,2:26,3:40,4:10,5:17,6:31,7:34,8:22,9:8,10:23,11:33,12:5,13:29,14:3,15:25,16:12,17:18,18:36,19:4,20:38,21:6,22:39,23:16,24:11,25:27,26:2,27:20,28:19,29:9,30:21,31:24,32:1,33:35,34:30,35:37,36:28,37:7,38:15,39:32,40:13', '1:2,2:7,3:11,4:16,5:23,6:26,7:32,8:36,9:45,10:47,11:52,12:58,13:61,14:69,15:74,16:80,17:82,18:86,19:91,20:99,21:101,22:107,23:112,24:118,25:123,26:126,27:132,28:136,29:141,30:146,31:154,32:158,33:162,34:169,35:175,36:176,37:182,38:187,39:194,40:197', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(362, 4, 1, 213, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(363, 4, 1, 214, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(364, 4, 1, 215, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(365, 5, 1, 77, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(366, 5, 1, 78, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(367, 5, 1, 79, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(368, 5, 1, 80, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(369, 5, 1, 81, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(370, 5, 1, 82, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(371, 5, 1, 83, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(372, 5, 1, 84, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(373, 5, 1, 85, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(374, 5, 1, 86, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(375, 5, 1, 87, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(376, 5, 1, 88, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(377, 5, 1, 89, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(378, 5, 1, 90, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(379, 5, 1, 91, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(380, 5, 1, 92, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(381, 5, 1, 93, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(382, 5, 1, 94, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(383, 5, 1, 95, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(384, 5, 1, 96, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(385, 5, 1, 97, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(386, 5, 1, 98, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(387, 5, 1, 99, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(388, 5, 1, 100, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(389, 5, 1, 101, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(390, 5, 1, 102, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(391, 5, 1, 103, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(392, 5, 1, 104, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(393, 5, 1, 105, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(394, 5, 1, 106, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(395, 5, 1, 107, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(396, 5, 1, 108, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(397, 5, 1, 109, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(398, 5, 1, 110, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(399, 5, 1, 111, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(400, 5, 1, 112, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(401, 5, 1, 113, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(402, 5, 1, 114, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(403, 5, 1, 115, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(404, 5, 1, 116, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(405, 5, 1, 117, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(406, 5, 1, 118, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(407, 5, 1, 119, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(408, 5, 1, 120, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(409, 5, 1, 121, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(410, 5, 1, 122, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(411, 5, 1, 123, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(412, 5, 1, 124, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(413, 5, 1, 125, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(414, 5, 1, 126, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(415, 5, 1, 127, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(416, 5, 1, 128, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(417, 5, 1, 129, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(418, 5, 1, 130, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(419, 5, 1, 131, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(420, 5, 1, 132, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(421, 5, 1, 133, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(422, 5, 1, 134, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(423, 5, 1, 135, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(424, 5, 1, 136, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(425, 5, 1, 137, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(426, 5, 1, 138, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(427, 5, 1, 139, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(428, 5, 1, 140, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(429, 5, 1, 141, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(430, 5, 1, 142, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(431, 5, 1, 143, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(432, 5, 1, 144, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(433, 5, 1, 145, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(434, 5, 1, 146, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(435, 5, 1, 147, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(436, 5, 1, 148, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(437, 5, 1, 149, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(438, 5, 1, 150, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(439, 5, 1, 151, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(440, 5, 1, 152, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(441, 5, 1, 153, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(442, 5, 1, 154, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(443, 5, 1, 155, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(444, 5, 1, 156, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(445, 5, 1, 157, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(446, 5, 1, 158, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(447, 5, 1, 159, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(448, 5, 1, 160, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(449, 5, 1, 161, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(450, 5, 1, 162, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(451, 5, 1, 163, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(452, 5, 1, 164, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(453, 5, 1, 165, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(454, 5, 1, 166, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(455, 5, 1, 167, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(456, 5, 1, 168, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(457, 5, 1, 169, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(458, 5, 1, 170, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(459, 5, 1, 171, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(460, 5, 1, 172, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(461, 5, 1, 173, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(462, 5, 1, 174, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(463, 5, 1, 175, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(464, 5, 1, 176, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(465, 5, 1, 177, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(466, 5, 1, 178, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(467, 5, 1, 179, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(468, 5, 1, 180, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(469, 5, 1, 181, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(470, 5, 1, 182, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(471, 5, 1, 183, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(472, 5, 1, 184, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(473, 5, 1, 185, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(474, 5, 1, 186, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(475, 5, 1, 187, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(476, 5, 1, 188, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(477, 5, 1, 189, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(478, 5, 1, 190, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(479, 5, 1, 191, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(480, 5, 1, 192, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(481, 5, 1, 193, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(482, 5, 1, 194, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(483, 5, 1, 195, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(484, 5, 1, 196, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(485, 5, 1, 197, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(486, 5, 1, 198, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(487, 5, 1, 199, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(488, 5, 1, 200, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(489, 5, 1, 201, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(490, 5, 1, 202, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(491, 5, 1, 203, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(492, 5, 1, 204, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(493, 5, 1, 205, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(494, 5, 1, 206, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(495, 5, 1, 207, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(496, 5, 1, 208, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(497, 5, 1, 209, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(498, 5, 1, 210, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(499, 5, 1, 211, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0);
INSERT INTO `assignment_users` (`id`, `assignment_id`, `user_type`, `user_id`, `shuffled_qn_ids`, `answered_ids`, `qns_time_spent`, `qns_visited`, `time_test_init`, `time_test_start`, `time_test_lastqn_answered`, `time_test_end`, `count_qns_answered`, `count_qns_correct`, `count_qns_visited`, `count_test_page_away`, `count_test_app_away`) VALUES
(500, 5, 1, 212, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(501, 5, 1, 213, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(502, 5, 1, 214, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(503, 5, 1, 215, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(504, 6, 1, 77, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(505, 6, 1, 78, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(506, 6, 1, 79, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(507, 6, 1, 80, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(508, 6, 1, 81, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(509, 6, 1, 82, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(510, 6, 1, 83, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(511, 6, 1, 84, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(512, 6, 1, 85, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(513, 6, 1, 86, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(514, 6, 1, 87, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(515, 6, 1, 88, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(516, 6, 1, 89, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(517, 6, 1, 90, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(518, 6, 1, 91, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(519, 6, 1, 92, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(520, 6, 1, 93, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(521, 6, 1, 94, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(522, 6, 1, 95, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(523, 6, 1, 96, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(524, 6, 1, 97, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(525, 6, 1, 98, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(526, 6, 1, 99, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(527, 6, 1, 100, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(528, 6, 1, 101, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(529, 6, 1, 102, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(530, 6, 1, 103, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(531, 6, 1, 104, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(532, 6, 1, 105, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(533, 6, 1, 106, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(534, 6, 1, 107, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(535, 6, 1, 108, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(536, 6, 1, 109, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(537, 6, 1, 110, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(538, 6, 1, 111, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(539, 6, 1, 112, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(540, 6, 1, 113, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(541, 6, 1, 114, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(542, 6, 1, 115, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(543, 6, 1, 116, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(544, 6, 1, 117, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(545, 6, 1, 118, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(546, 6, 1, 119, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(547, 6, 1, 120, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(548, 6, 1, 121, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(549, 6, 1, 122, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(550, 6, 1, 123, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(551, 6, 1, 124, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(552, 6, 1, 125, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(553, 6, 1, 126, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(554, 6, 1, 127, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(555, 6, 1, 128, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(556, 6, 1, 129, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(557, 6, 1, 130, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(558, 6, 1, 131, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(559, 6, 1, 132, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(560, 6, 1, 133, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(561, 6, 1, 134, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(562, 6, 1, 135, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(563, 6, 1, 136, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(564, 6, 1, 137, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(565, 6, 1, 138, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(566, 6, 1, 139, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(567, 6, 1, 140, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(568, 6, 1, 141, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(569, 6, 1, 142, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(570, 6, 1, 143, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(571, 6, 1, 144, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(572, 6, 1, 145, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(573, 6, 1, 146, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(574, 6, 1, 147, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(575, 6, 1, 148, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(576, 6, 1, 149, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(577, 6, 1, 150, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(578, 6, 1, 151, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(579, 6, 1, 152, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(580, 6, 1, 153, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(581, 6, 1, 154, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(582, 6, 1, 155, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(583, 6, 1, 156, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(584, 6, 1, 157, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(585, 6, 1, 158, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(586, 6, 1, 159, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(587, 6, 1, 160, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(588, 6, 1, 161, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(589, 6, 1, 162, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(590, 6, 1, 163, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(591, 6, 1, 164, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(592, 6, 1, 165, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(593, 6, 1, 166, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(594, 6, 1, 167, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(595, 6, 1, 168, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(596, 6, 1, 169, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(597, 6, 1, 170, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(598, 6, 1, 171, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(599, 6, 1, 172, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(600, 6, 1, 173, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(601, 6, 1, 174, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(602, 6, 1, 175, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(603, 6, 1, 176, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(604, 6, 1, 177, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(605, 6, 1, 178, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(606, 6, 1, 179, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(607, 6, 1, 180, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(608, 6, 1, 181, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(609, 6, 1, 182, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(610, 6, 1, 183, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(611, 6, 1, 184, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(612, 6, 1, 185, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(613, 6, 1, 186, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(614, 6, 1, 187, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(615, 6, 1, 188, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(616, 6, 1, 189, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(617, 6, 1, 190, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(618, 6, 1, 191, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(619, 6, 1, 192, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(620, 6, 1, 193, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(621, 6, 1, 194, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(622, 6, 1, 195, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(623, 6, 1, 196, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(624, 6, 1, 197, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(625, 6, 1, 198, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(626, 6, 1, 199, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(627, 6, 1, 200, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(628, 6, 1, 201, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(629, 6, 1, 202, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(630, 6, 1, 203, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(631, 6, 1, 204, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(632, 6, 1, 205, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(633, 6, 1, 206, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(634, 6, 1, 207, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(635, 6, 1, 208, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(636, 6, 1, 209, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(637, 6, 1, 210, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(638, 6, 1, 211, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(639, 6, 1, 212, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(640, 6, 1, 213, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(641, 6, 1, 214, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0),
(642, 6, 1, 215, '', '', ' ', ' ', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `cats`
--

DROP TABLE IF EXISTS `cats`;
CREATE TABLE IF NOT EXISTS `cats` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cat_name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `cats`
--

INSERT INTO `cats` (`id`, `cat_name`) VALUES
(1, 'Assessment Test #001'),
(2, 'Assessment Test #002'),
(3, 'Assessment Test #003');

-- --------------------------------------------------------

--
-- Table structure for table `imported_users`
--

DROP TABLE IF EXISTS `imported_users`;
CREATE TABLE IF NOT EXISTS `imported_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL DEFAULT '',
  `surname` varchar(255) NOT NULL DEFAULT '',
  `user_name` varchar(150) NOT NULL DEFAULT '',
  `password` varchar(150) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `imported_users`
--

INSERT INTO `imported_users` (`id`, `name`, `surname`, `user_name`, `password`) VALUES
(1, 'test1', 'test2', 'user1', 'ee11cbb19052e40b07aac0ca060c23ee'),
(2, 'test2', 'test2', 'user2', 'ee11cbb19052e40b07aac0ca060c23ee');

-- --------------------------------------------------------

--
-- Table structure for table `maxedu_cp_loadmax`
--

DROP TABLE IF EXISTS `maxedu_cp_loadmax`;
CREATE TABLE IF NOT EXISTS `maxedu_cp_loadmax` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `loadtext` varchar(50) NOT NULL,
  `loadval` double NOT NULL DEFAULT 0,
  `loadtime` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=817 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `maxedu_cp_loadmax`
--

INSERT INTO `maxedu_cp_loadmax` (`id`, `loadtext`, `loadval`, `loadtime`) VALUES
(1, '[0,0.01,0.05]', 0.05, '2020-07-21 03:03:56'),
(2, '[0.08,0.03,0.05]', 0.08, '2020-07-21 03:05:36'),
(3, '[0.08,0.1,0.08]', 0.1, '2020-07-21 05:05:46'),
(4, '[0.12,0.11,0.08]', 0.12, '2020-07-21 05:06:24'),
(5, '[0.21,0.12,0.09]', 0.21, '2020-07-21 05:07:20'),
(6, '[0.27,0.14,0.09]', 0.27, '2020-07-21 05:07:25'),
(7, '[0.47,0.18,0.11]', 0.47, '2020-07-21 05:12:10'),
(8, '[0,0.01,0.05]', 0.05, '2020-07-21 06:54:37'),
(9, '[0.07,0.03,0.05]', 0.07, '2020-07-21 08:19:46'),
(10, '[0.14,0.16,0.1]', 0.16, '2020-07-21 09:19:03'),
(11, '[0.04,0.1,0.09]', 0.1, '2020-07-21 10:29:42'),
(12, '[0.15,0.11,0.1]', 0.15, '2020-07-21 10:30:45'),
(13, '[0.29,0.14,0.11]', 0.29, '2020-07-21 10:30:53'),
(14, '[0.35,0.11,0.09]', 0.35, '2020-07-21 10:56:10'),
(15, '[0.01,0.06,0.07]', 0.07, '2020-07-21 11:00:01'),
(16, '[0.08,0.06,0.07]', 0.08, '2020-07-21 11:02:06'),
(17, '[0.13,0.07,0.07]', 0.13, '2020-07-21 11:02:31'),
(18, '[0.17,0.07,0.06]', 0.17, '2020-07-21 11:08:04'),
(19, '[0.18,0.1,0.06]', 0.18, '2020-07-21 11:12:18'),
(20, '[0.22,0.11,0.08]', 0.22, '2020-07-21 11:25:37'),
(21, '[0.27,0.12,0.09]', 0.27, '2020-07-21 11:25:45'),
(22, '[0.29,0.13,0.09]', 0.29, '2020-07-21 11:26:01'),
(23, '[0.09,0.08,0.07]', 0.09, '2020-07-22 02:21:04'),
(24, '[0.33,0.1,0.07]', 0.33, '2020-07-22 02:28:04'),
(25, '[0.39,0.12,0.07]', 0.39, '2020-07-22 02:28:12'),
(26, '[0.68,0.18,0.09]', 0.68, '2020-07-22 02:28:16'),
(27, '[0.02,0.05,0.05]', 0.05, '2020-07-22 09:40:09'),
(28, '[0.11,0.06,0.05]', 0.11, '2020-07-22 11:25:48'),
(29, '[0.15,0.08,0.05]', 0.15, '2020-07-22 11:27:26'),
(30, '[0.25,0.11,0.06]', 0.25, '2020-07-22 11:30:00'),
(31, '[0.29,0.13,0.07]', 0.29, '2020-07-22 11:31:37'),
(32, '[0.09,0.07,0.05]', 0.09, '2020-07-22 12:48:04'),
(33, '[0.15,0.08,0.06]', 0.15, '2020-07-22 12:48:11'),
(34, '[0,0.01,0.05]', 0.05, '2020-07-23 02:10:30'),
(35, '[0.08,0.03,0.05]', 0.08, '2020-07-23 02:11:17'),
(36, '[0.16,0.05,0.06]', 0.16, '2020-07-23 02:21:49'),
(37, '[0.33,0.09,0.07]', 0.33, '2020-07-23 02:25:01'),
(38, '[0.38,0.13,0.07]', 0.38, '2020-07-23 02:28:23'),
(39, '[0.43,0.14,0.08]', 0.43, '2020-07-23 02:28:27'),
(40, '[0.44,0.16,0.08]', 0.44, '2020-07-23 02:28:39'),
(41, '[0.49,0.17,0.09]', 0.49, '2020-07-23 02:28:43'),
(42, '[0.61,0.2,0.1]', 0.61, '2020-07-23 02:28:47'),
(43, '[0.64,0.21,0.1]', 0.64, '2020-07-23 02:28:51'),
(44, '[0.02,0.02,0.05]', 0.05, '2020-07-23 04:13:58'),
(45, '[0.08,0.03,0.05]', 0.08, '2020-07-23 04:20:00'),
(46, '[0.1,0.04,0.05]', 0.1, '2020-07-23 04:21:32'),
(47, '[0.08,0.08,0.06]', 0.08, '2020-07-23 09:20:15'),
(48, '[0.06,0.07,0.06]', 0.07, '2020-07-23 13:58:02'),
(49, '[0.01,0.05,0.05]', 0.05, '2020-07-23 14:00:01'),
(50, '[0.08,0.05,0.05]', 0.08, '2020-07-23 14:01:50'),
(51, '[0.13,0.06,0.05]', 0.13, '2020-07-23 14:02:16'),
(52, '[0.2,0.08,0.06]', 0.2, '2020-07-23 14:02:21'),
(53, '[0.02,0.02,0.05]', 0.05, '2020-07-23 18:16:38'),
(54, '[0.08,0.03,0.05]', 0.08, '2020-07-23 18:25:04'),
(55, '[0.14,0.05,0.05]', 0.14, '2020-07-23 18:45:18'),
(56, '[0.17,0.06,0.06]', 0.17, '2020-07-23 18:45:49'),
(57, '[0.23,0.08,0.06]', 0.23, '2020-07-23 18:46:37'),
(58, '[0,0.01,0.05]', 0.05, '2020-07-23 21:07:14'),
(59, '[0.01,0.06,0.06]', 0.06, '2020-07-24 02:32:36'),
(60, '[0.08,0.04,0.05]', 0.08, '2020-07-24 02:37:02'),
(61, '[0.12,0.06,0.05]', 0.12, '2020-07-24 02:37:52'),
(62, '[0.14,0.07,0.05]', 0.14, '2020-07-24 02:38:28'),
(63, '[0.04,0.03,0.05]', 0.05, '2020-07-24 06:47:09'),
(64, '[0.1,0.04,0.05]', 0.1, '2020-07-24 06:47:35'),
(65, '[0,0.01,0.05]', 0.05, '2020-07-24 08:24:03'),
(66, '[0.09,0.04,0.05]', 0.09, '2020-07-24 08:31:27'),
(67, '[0,0.01,0.05]', 0.05, '2020-07-24 09:01:24'),
(68, '[0.14,0.05,0.06]', 0.14, '2020-07-24 09:03:19'),
(69, '[0,0.01,0.05]', 0.05, '2020-07-24 10:33:13'),
(70, '[0.16,0.05,0.06]', 0.16, '2020-07-24 10:36:54'),
(71, '[0.22,0.06,0.06]', 0.22, '2020-07-24 10:37:04'),
(72, '[0.03,0.22,0.16]', 0.22, '2020-07-25 02:33:25'),
(73, '[0.29,0.14,0.14]', 0.29, '2020-07-25 02:38:42'),
(74, '[0.34,0.16,0.15]', 0.34, '2020-07-25 02:38:46'),
(75, '[0,0.01,0.05]', 0.05, '2020-07-25 03:09:15'),
(76, '[0.06,0.06,0.05]', 0.06, '2020-07-25 04:29:16'),
(77, '[0.1,0.06,0.05]', 0.1, '2020-07-25 07:58:04'),
(78, '[0,0.01,0.05]', 0.05, '2020-07-25 10:46:33'),
(79, '[0,0.01,0.05]', 0.05, '2020-07-25 12:08:55'),
(80, '[0,0.01,0.05]', 0.05, '2020-07-25 14:09:35'),
(81, '[0.08,0.09,0.07]', 0.09, '2020-07-26 04:24:18'),
(82, '[0.06,0.06,0.05]', 0.06, '2020-07-26 05:27:44'),
(83, '[0.1,0.07,0.05]', 0.1, '2020-07-26 05:29:02'),
(84, '[0.11,0.09,0.06]', 0.11, '2020-07-26 09:01:25'),
(85, '[0.15,0.08,0.05]', 0.15, '2020-07-26 09:04:30'),
(86, '[0.16,0.07,0.06]', 0.16, '2020-07-26 09:08:47'),
(87, '[0.19,0.09,0.06]', 0.19, '2020-07-26 09:10:02'),
(88, '[0.25,0.11,0.06]', 0.25, '2020-07-26 09:30:43'),
(89, '[0.02,0.04,0.05]', 0.05, '2020-07-26 10:16:37'),
(90, '[0.08,0.03,0.05]', 0.08, '2020-07-26 10:20:17'),
(91, '[0.13,0.05,0.05]', 0.13, '2020-07-26 10:20:46'),
(92, '[0,0.01,0.05]', 0.05, '2020-07-26 12:05:48'),
(93, '[0.12,0.04,0.05]', 0.12, '2020-07-26 12:17:57'),
(94, '[0,0.01,0.05]', 0.05, '2020-08-07 02:55:10'),
(95, '[0.03,0.04,0.05]', 0.05, '2020-08-07 03:16:08'),
(96, '[0,0.02,0.05]', 0.05, '2020-08-07 04:35:01'),
(97, '[0,0.02,0.05]', 0.05, '2020-08-07 07:41:20'),
(98, '[0,0.01,0.05]', 0.05, '2020-08-07 11:25:40'),
(99, '[0,0.01,0.05]', 0.05, '2020-08-08 02:59:50'),
(100, '[0,0.01,0.05]', 0.05, '2020-08-08 03:00:00'),
(101, '[0.08,0.03,0.05]', 0.08, '2020-08-08 03:01:59'),
(102, '[0.12,0.04,0.05]', 0.12, '2020-08-08 03:02:39'),
(103, '[0,0.01,0.05]', 0.05, '2020-08-08 11:07:23'),
(104, '[0,0.01,0.05]', 0.05, '2020-08-08 13:31:53'),
(105, '[0.08,0.03,0.05]', 0.08, '2020-08-08 13:35:08'),
(106, '[0.02,0.02,0.05]', 0.05, '2020-08-09 10:22:48'),
(107, '[0,0.01,0.05]', 0.05, '2020-08-09 14:26:36'),
(108, '[0,0.13,0.14]', 0.14, '2020-08-10 02:36:03'),
(109, '[0,0.01,0.05]', 0.05, '2020-08-10 03:08:15'),
(110, '[0.08,0.03,0.05]', 0.08, '2020-08-10 03:08:18'),
(111, '[0.38,0.14,0.09]', 0.38, '2020-08-10 03:35:15'),
(112, '[0.1,0.07,0.05]', 0.1, '2020-08-10 05:03:33'),
(113, '[0.14,0.08,0.06]', 0.14, '2020-08-10 05:04:04'),
(114, '[0.25,0.1,0.06]', 0.25, '2020-08-10 05:06:20'),
(115, '[0.28,0.12,0.07]', 0.28, '2020-08-10 05:07:03'),
(116, '[0.03,0.05,0.05]', 0.05, '2020-08-10 06:57:58'),
(117, '[0.09,0.06,0.05]', 0.09, '2020-08-10 06:58:56'),
(118, '[0.13,0.07,0.05]', 0.13, '2020-08-10 06:59:24'),
(119, '[0.08,0.06,0.05]', 0.08, '2020-08-10 07:00:02'),
(120, '[0.1,0.06,0.05]', 0.1, '2020-08-10 07:01:30'),
(121, '[0.13,0.07,0.05]', 0.13, '2020-08-10 07:02:10'),
(122, '[0.03,0.04,0.05]', 0.05, '2020-08-10 09:10:20'),
(123, '[0,0.01,0.05]', 0.05, '2020-08-10 11:05:12'),
(124, '[0.08,0.03,0.05]', 0.08, '2020-08-10 11:15:09'),
(125, '[0.13,0.04,0.05]', 0.13, '2020-08-11 03:10:15'),
(126, '[0.16,0.06,0.06]', 0.16, '2020-08-11 03:53:55'),
(127, '[0.18,0.09,0.06]', 0.18, '2020-08-11 03:56:40'),
(128, '[0.05,0.06,0.05]', 0.06, '2020-08-11 04:00:00'),
(129, '[0.24,0.06,0.06]', 0.24, '2020-08-11 04:39:58'),
(130, '[0.16,0.07,0.06]', 0.16, '2020-08-11 07:24:07'),
(131, '[0.18,0.11,0.07]', 0.18, '2020-08-11 09:54:41'),
(132, '[0.2,0.12,0.07]', 0.2, '2020-08-11 09:55:05'),
(133, '[0,0.03,0.05]', 0.05, '2020-08-11 10:19:49'),
(134, '[0,0.01,0.05]', 0.05, '2020-08-11 11:10:23'),
(135, '[0,0.03,0.05]', 0.05, '2020-08-12 13:52:32'),
(136, '[0.08,0.04,0.05]', 0.08, '2020-08-12 13:53:58'),
(137, '[0.1,0.05,0.05]', 0.1, '2020-08-12 13:55:17'),
(138, '[0.11,0.06,0.05]', 0.11, '2020-08-12 13:56:22'),
(139, '[0.12,0.06,0.05]', 0.12, '2020-08-12 13:57:23'),
(140, '[0.01,0.04,0.05]', 0.05, '2020-08-12 14:00:00'),
(141, '[0.08,0.04,0.05]', 0.08, '2020-08-12 14:02:32'),
(142, '[0.09,0.03,0.05]', 0.09, '2020-08-12 14:24:23'),
(143, '[0.17,0.05,0.06]', 0.17, '2020-08-12 14:29:36'),
(144, '[0.24,0.09,0.06]', 0.24, '2020-08-12 14:46:34'),
(145, '[0.27,0.1,0.06]', 0.27, '2020-08-12 14:46:46'),
(146, '[0.03,0.04,0.05]', 0.05, '2020-08-12 15:00:02'),
(147, '[0.08,0.04,0.05]', 0.08, '2020-08-12 15:03:42'),
(148, '[0.13,0.05,0.05]', 0.13, '2020-08-12 15:04:07'),
(149, '[0.19,0.08,0.06]', 0.19, '2020-08-12 15:09:02'),
(150, '[0.25,0.07,0.06]', 0.25, '2020-08-12 15:25:14'),
(151, '[0.35,0.11,0.07]', 0.35, '2020-08-12 15:26:04'),
(152, '[0.57,0.17,0.09]', 0.57, '2020-08-12 15:46:00'),
(153, '[0.67,0.24,0.12]', 0.67, '2020-08-12 15:55:35'),
(154, '[0.7,0.25,0.13]', 0.7, '2020-08-12 15:55:39'),
(155, '[0.05,0.12,0.11]', 0.12, '2020-08-12 16:00:02'),
(156, '[0.13,0.14,0.11]', 0.14, '2020-08-12 16:00:06'),
(157, '[0.18,0.14,0.12]', 0.18, '2020-08-12 16:00:19'),
(158, '[0.25,0.11,0.1]', 0.25, '2020-08-12 16:09:08'),
(159, '[0.29,0.12,0.11]', 0.29, '2020-08-12 16:09:20'),
(160, '[0,0.01,0.05]', 0.05, '2020-08-12 21:31:08'),
(161, '[0.01,0.07,0.07]', 0.07, '2020-08-13 14:07:34'),
(162, '[0.08,0.08,0.07]', 0.08, '2020-08-13 14:08:44'),
(163, '[0.11,0.08,0.07]', 0.11, '2020-08-13 14:09:44'),
(164, '[0,0.01,0.05]', 0.05, '2020-08-13 21:34:02'),
(165, '[0.08,0.03,0.05]', 0.08, '2020-08-13 21:34:05'),
(166, '[0.14,0.05,0.05]', 0.14, '2020-08-13 21:34:25'),
(167, '[0.02,0.02,0.05]', 0.05, '2020-08-14 13:37:48'),
(168, '[0.08,0.03,0.05]', 0.08, '2020-08-14 13:39:02'),
(169, '[0.14,0.05,0.05]', 0.14, '2020-08-14 13:39:22'),
(170, '[0.2,0.06,0.06]', 0.2, '2020-08-14 13:39:30'),
(171, '[0.3,0.09,0.07]', 0.3, '2020-08-14 13:39:50'),
(172, '[0,0.02,0.05]', 0.05, '2020-08-14 14:00:00'),
(173, '[0.08,0.03,0.05]', 0.08, '2020-08-14 14:01:51'),
(174, '[0.13,0.04,0.05]', 0.13, '2020-08-14 14:02:20'),
(175, '[0.06,0.08,0.12]', 0.12, '2020-08-14 19:12:15'),
(176, '[0.2,0.13,0.14]', 0.2, '2020-08-14 19:18:52'),
(177, '[0.26,0.14,0.14]', 0.26, '2020-08-14 19:18:55'),
(178, '[0,0.01,0.05]', 0.05, '2020-08-14 20:24:01'),
(179, '[0.08,0.03,0.05]', 0.08, '2020-08-14 20:25:09'),
(180, '[0.09,0.04,0.05]', 0.09, '2020-08-14 20:50:08'),
(181, '[0.01,0.02,0.05]', 0.05, '2020-08-14 21:00:00'),
(182, '[0.08,0.03,0.05]', 0.08, '2020-08-14 21:02:45'),
(183, '[0.13,0.04,0.05]', 0.13, '2020-08-14 21:03:21'),
(184, '[0.16,0.05,0.06]', 0.16, '2020-08-14 21:38:32'),
(185, '[0,0.01,0.05]', 0.05, '2020-08-14 22:00:02'),
(186, '[4.89,-1,3.79]', 4.89, '2020-10-10 16:40:54'),
(187, '[3.09,-1,5.33]', 5.33, '2020-10-10 16:40:56'),
(188, '[3.37,-1,6.91]', 6.91, '2020-10-15 12:44:38'),
(189, '[1.57,1.72,1.81]', 1.81, '2020-11-12 18:43:32'),
(190, '[1.06,1.36,1.42]', 1.42, '2020-11-13 07:01:01'),
(191, '[1.44,1.45,1.48]', 1.48, '2020-11-13 08:59:28'),
(192, '[1.48,1.46,1.49]', 1.49, '2020-11-13 08:59:32'),
(193, '[1.52,1.47,1.49]', 1.52, '2020-11-13 08:59:37'),
(194, '[1.8,1.52,1.51]', 1.8, '2020-11-13 08:59:43'),
(195, '[1.82,1.53,1.51]', 1.82, '2020-11-13 08:59:46'),
(196, '[1.91,1.56,1.52]', 1.91, '2020-11-13 08:59:52'),
(197, '[2.16,1.61,1.54]', 2.16, '2020-11-13 08:59:57'),
(198, '[1.99,1.59,1.53]', 1.99, '2020-11-13 09:00:02'),
(199, '[2.09,1.63,1.54]', 2.09, '2020-11-13 09:00:32'),
(200, '[2.25,1.67,1.56]', 2.25, '2020-11-13 09:00:37'),
(201, '[43.12,41.23,40.42]', 43.12, '2020-11-13 22:50:26'),
(202, '[43.91,41.42,40.49]', 43.91, '2020-11-13 22:50:31'),
(203, '[44.16,41.52,40.52]', 44.16, '2020-11-13 22:50:36'),
(204, '[48.43,43.09,41.11]', 48.43, '2020-11-13 22:51:24'),
(205, '[49.72,43.55,41.28]', 49.72, '2020-11-13 22:51:36'),
(206, '[50.23,43.76,41.36]', 50.23, '2020-11-13 22:51:43'),
(207, '[50.72,44.88,41.9]', 50.72, '2020-11-13 22:52:47'),
(208, '[51.47,45.13,41.99]', 51.47, '2020-11-13 22:52:51'),
(209, '[10.05,11.02,11.72]', 11.72, '2020-11-14 07:00:55'),
(210, '[10.47,11.08,11.73]', 11.73, '2020-11-14 07:01:05'),
(211, '[12.2,12.65,12.36]', 12.65, '2020-11-14 12:36:09'),
(212, '[12.27,12.66,12.36]', 12.66, '2020-11-14 12:36:14'),
(213, '[12.33,12.67,12.37]', 12.67, '2020-11-14 12:36:19'),
(214, '[15.27,17.6,17.95]', 17.95, '2020-11-16 14:02:03'),
(215, '[14.36,13.62,13.56]', 14.36, '2020-11-16 23:37:16'),
(216, '[14.4,13.65,13.57]', 14.4, '2020-11-16 23:37:24'),
(217, '[14.97,14.41,14.23]', 14.97, '2020-11-17 09:39:23'),
(218, '[32.88,23.83,18.11]', 32.88, '2020-11-17 17:11:52'),
(219, '[13.15,13.46,13.63]', 13.63, '2020-11-18 08:39:39'),
(220, '[13.43,13.51,13.64]', 13.64, '2020-11-18 08:39:45'),
(221, '[13.56,13.54,13.65]', 13.65, '2020-11-18 08:39:51'),
(222, '[13.67,13.55,13.65]', 13.67, '2020-11-18 08:40:06'),
(223, '[13.91,13.54,13.64]', 13.91, '2020-11-18 08:41:01'),
(224, '[14.8,13.73,13.7]', 14.8, '2020-11-18 08:41:09'),
(225, '[6.47,5.39,5.44]', 6.47, '2020-12-13 20:00:08'),
(226, '[6.54,5.46,5.47]', 6.54, '2020-12-13 20:00:30'),
(227, '[6.58,5.49,5.47]', 6.58, '2020-12-13 20:00:35'),
(228, '[6.72,5.56,5.5]', 6.72, '2020-12-13 20:00:50'),
(229, '[7.5,5.74,5.34]', 7.5, '2020-12-13 20:38:03'),
(230, '[4.24,4.83,5.05]', 5.05, '2020-12-13 21:00:01'),
(231, '[5.9,5.17,5.16]', 5.9, '2020-12-13 21:00:04'),
(232, '[6.47,5.3,5.2]', 6.47, '2020-12-13 21:00:09'),
(233, '[6.23,5.86,5.24]', 6.23, '2020-12-14 11:12:57'),
(234, '[6.29,5.88,5.26]', 6.29, '2020-12-14 11:13:05'),
(235, '[7.4,6.73,6.62]', 7.4, '2020-12-14 17:50:24'),
(236, '[7.67,6.84,6.66]', 7.67, '2020-12-14 17:50:52'),
(237, '[6.26,7.2,7.32]', 7.32, '2020-12-19 20:03:47'),
(238, '[8.19,7.14,7.2]', 8.19, '2020-12-19 20:09:14'),
(239, '[8.26,7.18,7.21]', 8.26, '2020-12-19 20:09:17'),
(240, '[8.38,7.24,7.23]', 8.38, '2020-12-19 20:09:29'),
(241, '[8.51,7.28,7.25]', 8.51, '2020-12-19 20:09:33'),
(242, '[8.95,7.39,7.29]', 8.95, '2020-12-19 20:09:41'),
(243, '[9.12,7.45,7.31]', 9.12, '2020-12-19 20:09:45'),
(244, '[9.13,7.91,7.5]', 9.13, '2020-12-19 20:13:20'),
(245, '[9.5,8.24,7.66]', 9.5, '2020-12-19 20:15:28'),
(246, '[7.52,7.39,7.19]', 7.52, '2020-12-19 21:12:05'),
(247, '[7.68,7.42,7.21]', 7.68, '2020-12-19 21:12:11'),
(248, '[6.78,7.37,7.18]', 7.37, '2020-12-20 12:49:08'),
(249, '[5.36,5.78,6.29]', 6.29, '2020-12-21 23:43:53'),
(250, '[5.93,6,6.27]', 6.27, '2020-12-22 16:14:43'),
(251, '[6.46,6.09,6.29]', 6.46, '2020-12-22 16:15:10'),
(252, '[5.67,5.2,5.03]', 5.67, '2020-12-26 12:35:39'),
(253, '[6.81,6.23,5.75]', 6.81, '2020-12-26 19:12:00'),
(254, '[6.83,6.24,5.75]', 6.83, '2020-12-26 19:12:02'),
(255, '[6.86,6.27,5.77]', 6.86, '2020-12-26 19:12:11'),
(256, '[6.97,6.32,5.79]', 6.97, '2020-12-26 19:12:33'),
(257, '[5.76,5.33,5.48]', 5.76, '2020-12-26 20:30:38'),
(258, '[5.92,5.38,5.48]', 5.92, '2020-12-26 20:31:16'),
(259, '[6.32,5.47,5.51]', 6.32, '2020-12-26 20:31:24'),
(260, '[5.32,5.67,5.77]', 5.77, '2020-12-27 09:19:15'),
(261, '[6.55,6.15,6.33]', 6.55, '2020-12-27 16:56:51'),
(262, '[7.22,6.3,6.38]', 7.22, '2020-12-27 16:56:56'),
(263, '[7.41,6.38,6.41]', 7.41, '2020-12-27 16:57:11'),
(264, '[5.17,5.91,6.23]', 6.23, '2020-12-27 17:00:00'),
(265, '[5.64,6,6.26]', 6.26, '2020-12-27 17:00:05'),
(266, '[6.31,5.81,5.98]', 6.31, '2020-12-27 17:14:21'),
(267, '[6.33,5.84,5.99]', 6.33, '2020-12-27 17:14:37'),
(268, '[6.63,5.91,6.01]', 6.63, '2020-12-27 17:14:41'),
(269, '[6.65,5.95,6.02]', 6.65, '2020-12-27 17:14:57'),
(270, '[6.92,6.01,6.04]', 6.92, '2020-12-27 17:15:01'),
(271, '[7.01,6.05,6.05]', 7.01, '2020-12-27 17:15:05'),
(272, '[7.09,6.11,6.07]', 7.09, '2020-12-27 17:15:21'),
(273, '[7.57,6.23,6.11]', 7.57, '2020-12-27 17:15:29'),
(274, '[7.76,6.29,6.13]', 7.76, '2020-12-27 17:15:33'),
(275, '[7.81,6.45,6.19]', 7.81, '2020-12-27 17:16:13'),
(276, '[7.89,7.52,7.71]', 7.89, '2020-12-27 19:46:14'),
(277, '[7.93,8.49,8.33]', 8.49, '2020-12-27 20:31:52'),
(278, '[8.53,8.54,8.36]', 8.54, '2020-12-27 20:32:31'),
(279, '[8.65,8.57,8.37]', 8.65, '2020-12-27 20:32:36'),
(280, '[8.79,8.6,8.38]', 8.79, '2020-12-27 20:32:46'),
(281, '[8.89,8.62,8.39]', 8.89, '2020-12-27 20:32:51'),
(282, '[8.99,8.65,8.4]', 8.99, '2020-12-27 20:33:16'),
(283, '[8.56,7.68,7.76]', 8.56, '2020-12-27 21:50:45'),
(284, '[4.98,4.67,4.75]', 4.98, '2020-12-28 16:56:20'),
(285, '[5.19,4.74,4.77]', 5.19, '2020-12-28 16:56:45'),
(286, '[5.49,4.81,4.79]', 5.49, '2020-12-28 16:56:55'),
(287, '[5.4,5.33,5.04]', 5.4, '2020-12-28 17:07:02'),
(288, '[5.45,5.3,5.05]', 5.45, '2020-12-28 17:08:10'),
(289, '[5.97,5.41,5.08]', 5.97, '2020-12-28 17:08:17'),
(290, '[4.45,4.54,4.75]', 4.75, '2020-12-29 06:50:40'),
(291, '[4.9,4.63,4.78]', 4.9, '2020-12-29 06:50:42'),
(292, '[8.42,7.74,7.34]', 8.42, '2021-01-03 23:26:29'),
(293, '[8.55,7.77,7.35]', 8.55, '2021-01-03 23:26:34'),
(294, '[8.58,7.79,7.36]', 8.58, '2021-01-03 23:26:38'),
(295, '[4.06,4.98,5.39]', 5.39, '2021-01-04 09:52:58'),
(296, '[5.03,5.1,5.41]', 5.41, '2021-01-04 09:53:26'),
(297, '[5.77,5.32,5.22]', 5.77, '2021-01-04 10:14:50'),
(298, '[6.07,6.1,6.08]', 6.1, '2021-01-04 12:36:07'),
(299, '[6.23,6.13,6.09]', 6.23, '2021-01-04 12:36:10'),
(300, '[6.69,6.23,6.13]', 6.69, '2021-01-04 12:36:15'),
(301, '[5.65,5.87,5.97]', 5.97, '2021-01-04 13:00:00'),
(302, '[5.87,5.91,5.98]', 5.98, '2021-01-04 13:00:12'),
(303, '[5.99,5.93,5.99]', 5.99, '2021-01-04 13:00:28'),
(304, '[6.23,5.98,6]', 6.23, '2021-01-04 13:00:32'),
(305, '[6.46,6.04,6.02]', 6.46, '2021-01-04 13:00:48'),
(306, '[6.58,6.07,6.03]', 6.58, '2021-01-04 13:00:52'),
(307, '[5.45,5.89,6.22]', 6.22, '2021-01-04 16:58:32'),
(308, '[7.27,6.53,6.15]', 7.27, '2021-01-04 17:40:48'),
(309, '[7.57,6.6,6.18]', 7.57, '2021-01-04 17:40:53'),
(310, '[7.76,6.66,6.2]', 7.76, '2021-01-04 17:40:59'),
(311, '[8.26,6.78,6.24]', 8.26, '2021-01-04 17:41:04'),
(312, '[8.3,7.39,7.48]', 8.3, '2021-01-04 21:31:31'),
(313, '[8.8,7.66,7.55]', 8.8, '2021-01-04 21:33:12'),
(314, '[9.06,7.77,7.59]', 9.06, '2021-01-04 21:33:28'),
(315, '[7.82,6.95,6.27]', 7.82, '2021-01-05 09:28:38'),
(316, '[6.41,7.29,7.54]', 7.54, '2021-01-05 17:09:16'),
(317, '[7.58,7.35,7.53]', 7.58, '2021-01-05 17:11:07'),
(318, '[8.58,7.51,7.57]', 8.58, '2021-01-05 17:12:03'),
(319, '[6.49,6.4,6.34]', 6.49, '2021-01-05 18:00:00'),
(320, '[6.53,6.41,6.34]', 6.53, '2021-01-05 18:00:07'),
(321, '[6.57,6.42,6.35]', 6.57, '2021-01-05 18:00:11'),
(322, '[6.7,6.44,6.36]', 6.7, '2021-01-05 18:00:31'),
(323, '[6.97,6.09,6.19]', 6.97, '2021-01-05 18:04:05'),
(324, '[7.13,6.14,6.21]', 7.13, '2021-01-05 18:04:10'),
(325, '[8.14,8.44,8.34]', 8.44, '2021-01-05 19:47:51'),
(326, '[8.45,8.5,8.36]', 8.5, '2021-01-05 19:47:53'),
(327, '[8.72,8.55,8.37]', 8.72, '2021-01-05 19:48:04'),
(328, '[6.76,5.97,6.25]', 6.76, '2021-01-06 00:25:03'),
(329, '[10.4,10.92,10.23]', 10.92, '2021-01-07 18:33:14'),
(330, '[12.21,11.29,10.35]', 12.21, '2021-01-07 18:33:22'),
(331, '[10.52,10.72,10.8]', 10.8, '2021-01-07 20:33:26'),
(332, '[7.59,8.24,9.26]', 9.26, '2021-01-07 21:00:01'),
(333, '[7.78,8.27,9.27]', 9.27, '2021-01-07 21:00:06'),
(334, '[8.36,8.39,9.3]', 9.3, '2021-01-07 21:00:11'),
(335, '[8.73,8.46,9.32]', 9.32, '2021-01-07 21:00:16'),
(336, '[9,8.52,9.33]', 9.33, '2021-01-07 21:00:23'),
(337, '[9.86,8.74,9.37]', 9.86, '2021-01-07 21:01:04'),
(338, '[9.01,7.31,6.83]', 9.01, '2021-01-09 13:55:00'),
(339, '[7.32,7.45,7.05]', 7.45, '2021-01-09 14:01:52'),
(340, '[7.66,7.3,7.04]', 7.66, '2021-01-09 14:04:08'),
(341, '[7.12,7.25,7.23]', 7.25, '2021-01-17 00:24:52'),
(342, '[5.65,5.76,5.69]', 5.76, '2021-01-17 07:07:34'),
(343, '[5.84,5.8,5.7]', 5.84, '2021-01-17 07:07:37'),
(344, '[6.01,5.84,5.71]', 6.01, '2021-01-17 07:07:42'),
(345, '[6.27,5.89,5.73]', 6.27, '2021-01-17 07:08:07'),
(346, '[5.26,5.81,6]', 6, '2021-01-17 10:02:12'),
(347, '[7.17,6.11,6.08]', 7.17, '2021-01-17 10:03:03'),
(348, '[7.3,6.17,6.1]', 7.3, '2021-01-17 10:03:13'),
(349, '[7.36,6.2,6.11]', 7.36, '2021-01-17 10:03:18'),
(350, '[8.45,6.47,6.2]', 8.45, '2021-01-17 10:03:33'),
(351, '[7.16,7.24,7.12]', 7.24, '2021-01-17 13:03:48'),
(352, '[7.31,7.26,7.13]', 7.31, '2021-01-17 13:03:56'),
(353, '[7.36,7.27,7.14]', 7.36, '2021-01-17 13:04:01'),
(354, '[7.57,7.32,7.15]', 7.57, '2021-01-17 13:04:06'),
(355, '[8.59,8.57,8]', 8.59, '2021-01-17 13:13:47'),
(356, '[7.9,7.46,7.27]', 7.9, '2021-01-17 14:38:30'),
(357, '[9.45,8.91,8.85]', 9.45, '2021-01-17 20:26:39'),
(358, '[9.46,8.94,8.86]', 9.46, '2021-01-17 20:27:04'),
(359, '[9.7,8.74,8.74]', 9.7, '2021-01-17 20:31:29'),
(360, '[9.81,8.78,8.75]', 9.81, '2021-01-17 20:31:34'),
(361, '[9.98,8.83,8.77]', 9.98, '2021-01-17 20:31:40'),
(362, '[10.6,9.12,8.86]', 10.6, '2021-01-17 20:33:03'),
(363, '[11.2,8.91,8.77]', 11.2, '2021-01-17 20:51:03'),
(364, '[11.91,9.1,8.83]', 11.91, '2021-01-17 20:51:08'),
(365, '[9.38,9.07,8.9]', 9.38, '2021-01-17 21:27:09'),
(366, '[9.43,9.09,8.91]', 9.43, '2021-01-17 21:27:13'),
(367, '[9.56,9.12,8.92]', 9.56, '2021-01-17 21:27:18'),
(368, '[10,9.22,8.95]', 10, '2021-01-17 21:27:23'),
(369, '[10.29,9.34,9]', 10.29, '2021-01-17 21:28:10'),
(370, '[10.58,9.44,9.04]', 10.58, '2021-01-17 21:28:26'),
(371, '[10.66,9.53,9.08]', 10.66, '2021-01-17 21:28:45'),
(372, '[5.57,5.67,5.75]', 5.75, '2021-01-18 09:00:42'),
(373, '[5.64,5.68,5.76]', 5.76, '2021-01-18 09:00:51'),
(374, '[5.81,5.72,5.77]', 5.81, '2021-01-18 09:01:07'),
(375, '[5.91,5.74,5.77]', 5.91, '2021-01-18 09:01:11'),
(376, '[5.95,5.75,5.77]', 5.95, '2021-01-18 09:01:39'),
(377, '[6.27,5.82,5.8]', 6.27, '2021-01-18 09:01:43'),
(378, '[6.33,5.84,5.8]', 6.33, '2021-01-18 09:01:47'),
(379, '[6.76,5.94,5.84]', 6.76, '2021-01-18 09:01:59'),
(380, '[6.78,5.96,5.84]', 6.78, '2021-01-18 09:02:03'),
(381, '[6.94,6.03,5.87]', 6.94, '2021-01-18 09:02:19'),
(382, '[10.1,9.58,9.32]', 10.1, '2021-01-18 17:43:26'),
(383, '[10.13,9.6,9.33]', 10.13, '2021-01-18 17:44:02'),
(384, '[10.43,9.7,9.37]', 10.43, '2021-01-18 17:44:29'),
(385, '[11.91,10.06,9.5]', 11.91, '2021-01-18 17:45:06'),
(386, '[11.99,10.11,9.52]', 11.99, '2021-01-18 17:45:10'),
(387, '[12.41,10.49,9.73]', 12.41, '2021-01-18 17:47:57'),
(388, '[8.19,8.82,9.25]', 9.25, '2021-01-18 18:04:56'),
(389, '[6.39,6.66,6.26]', 6.66, '2021-01-19 06:50:16'),
(390, '[6.67,6.68,6.28]', 6.68, '2021-01-19 06:50:59'),
(391, '[6.7,6.69,6.29]', 6.7, '2021-01-19 06:51:03'),
(392, '[6.74,6.66,6.29]', 6.74, '2021-01-19 06:51:43'),
(393, '[6.8,6.66,6.3]', 6.8, '2021-01-19 06:52:03'),
(394, '[6.04,6.29,6.32]', 6.32, '2021-01-19 07:17:38'),
(395, '[6.28,6.33,6.33]', 6.33, '2021-01-19 07:17:43'),
(396, '[6.35,6.29,6.31]', 6.35, '2021-01-19 07:19:02'),
(397, '[6.36,6.29,6.31]', 6.36, '2021-01-19 07:19:22'),
(398, '[6.53,6.21,6.27]', 6.53, '2021-01-19 07:20:49'),
(399, '[6.64,6.24,6.28]', 6.64, '2021-01-19 07:20:53'),
(400, '[6.67,6.25,6.28]', 6.67, '2021-01-19 07:21:01'),
(401, '[7.1,6.35,6.31]', 7.1, '2021-01-19 07:21:05'),
(402, '[5.95,6.52,6.09]', 6.52, '2021-01-19 09:04:09'),
(403, '[6.6,6.19,6.03]', 6.6, '2021-01-19 09:10:07'),
(404, '[6.63,6.2,6.03]', 6.63, '2021-01-19 09:10:11'),
(405, '[6.66,6.22,6.04]', 6.66, '2021-01-19 09:10:19'),
(406, '[7.01,6.3,6.07]', 7.01, '2021-01-19 09:10:23'),
(407, '[7.08,6.32,6.11]', 7.08, '2021-01-19 09:15:59'),
(408, '[7.43,6.8,6.82]', 7.43, '2021-01-19 14:17:57'),
(409, '[7.6,6.86,6.84]', 7.6, '2021-01-19 14:18:13'),
(410, '[7.64,6.88,6.84]', 7.64, '2021-01-19 14:18:17'),
(411, '[7.77,8.07,8.01]', 8.07, '2021-01-19 17:19:23'),
(412, '[7.95,8.11,8.02]', 8.11, '2021-01-19 17:19:26'),
(413, '[8.28,8.17,8.04]', 8.28, '2021-01-19 17:19:33'),
(414, '[8.74,8.26,8.07]', 8.74, '2021-01-19 17:20:14'),
(415, '[8.76,8.27,8.08]', 8.76, '2021-01-19 17:20:19'),
(416, '[8.78,8.28,8.08]', 8.78, '2021-01-19 17:20:23'),
(417, '[8.8,8.08,8.02]', 8.8, '2021-01-19 17:23:48'),
(418, '[9.49,8.24,8.07]', 9.49, '2021-01-19 17:24:00'),
(419, '[10.25,8.42,8.13]', 10.25, '2021-01-19 17:24:04'),
(420, '[8.83,8.41,8.06]', 8.83, '2021-01-19 20:00:45'),
(421, '[9.19,8.5,8.09]', 9.19, '2021-01-19 20:00:53'),
(422, '[8.64,7.72,7.09]', 8.64, '2021-01-20 08:55:14'),
(423, '[8.75,7.81,7.13]', 8.75, '2021-01-20 08:55:41'),
(424, '[8.81,7.87,7.17]', 8.81, '2021-01-20 08:55:59'),
(425, '[9.55,8.04,7.23]', 9.55, '2021-01-20 08:56:04'),
(426, '[6.41,7.35,7.13]', 7.35, '2021-01-20 09:00:00'),
(427, '[7.18,7.49,7.18]', 7.49, '2021-01-20 09:00:06'),
(428, '[7.41,7.53,7.2]', 7.53, '2021-01-20 09:00:11'),
(429, '[8.1,7.67,7.24]', 8.1, '2021-01-20 09:00:16'),
(430, '[8.2,7.71,7.27]', 8.2, '2021-01-20 09:01:08'),
(431, '[8.33,7.75,7.29]', 8.33, '2021-01-20 09:01:18'),
(432, '[8.38,7.77,7.3]', 8.38, '2021-01-20 09:01:23'),
(433, '[8.51,7.81,7.32]', 8.51, '2021-01-20 09:01:28'),
(434, '[8.64,7.87,7.34]', 8.64, '2021-01-20 09:01:42'),
(435, '[8.82,7.94,7.38]', 8.82, '2021-01-20 09:02:02'),
(436, '[9.07,8.01,7.41]', 9.07, '2021-01-20 09:02:09'),
(437, '[9.24,8.11,7.45]', 9.24, '2021-01-20 09:02:29'),
(438, '[9.53,8.21,7.49]', 9.53, '2021-01-20 09:02:39'),
(439, '[9.65,8.25,7.51]', 9.65, '2021-01-20 09:02:44'),
(440, '[5.68,5.24,5.65]', 5.68, '2021-01-20 10:17:06'),
(441, '[5.71,5.25,5.66]', 5.71, '2021-01-20 10:17:09'),
(442, '[5.73,5.26,5.66]', 5.73, '2021-01-20 10:17:13'),
(443, '[5.75,5.3,5.66]', 5.75, '2021-01-20 10:17:49'),
(444, '[5.93,5.35,5.67]', 5.93, '2021-01-20 10:17:57'),
(445, '[6.02,5.37,5.68]', 6.02, '2021-01-20 10:18:01'),
(446, '[6.03,5.4,5.68]', 6.03, '2021-01-20 10:18:17'),
(447, '[6.05,5.46,5.69]', 6.05, '2021-01-20 10:18:51'),
(448, '[6.78,5.66,5.73]', 6.78, '2021-01-20 10:19:59'),
(449, '[8.08,5.94,5.82]', 8.08, '2021-01-20 10:20:03'),
(450, '[11.19,9.03,8.67]', 11.19, '2021-01-20 17:30:52'),
(451, '[11.39,9.26,8.75]', 11.39, '2021-01-20 17:31:25'),
(452, '[3.2,3.89,4.33]', 4.33, '2021-01-21 09:10:45'),
(453, '[3.42,3.92,4.34]', 4.34, '2021-01-21 09:10:50'),
(454, '[5.11,4.24,4.44]', 5.11, '2021-01-21 09:11:02'),
(455, '[5.26,4.29,4.45]', 5.26, '2021-01-21 09:11:08'),
(456, '[5.62,3.93,4.03]', 5.62, '2021-01-21 09:24:21'),
(457, '[7.16,4.38,4.17]', 7.16, '2021-01-21 09:25:04'),
(458, '[6.57,6.98,7.55]', 7.55, '2021-01-21 17:26:01'),
(459, '[4.41,4.56,4.53]', 4.56, '2021-01-22 08:59:53'),
(460, '[4.54,4.58,4.54]', 4.58, '2021-01-22 08:59:56'),
(461, '[5.7,4.82,4.62]', 5.7, '2021-01-22 09:00:02'),
(462, '[7.73,8.72,9.5]', 9.5, '2021-03-09 11:59:47'),
(463, '[9.71,9.08,9.6]', 9.71, '2021-03-09 12:00:02'),
(464, '[9.89,9.13,9.62]', 9.89, '2021-03-09 12:00:06'),
(465, '[12.56,12.5,12.16]', 12.56, '2021-03-09 16:58:32'),
(466, '[12.68,12.52,12.17]', 12.68, '2021-03-09 16:58:37'),
(467, '[12.86,12.57,12.19]', 12.86, '2021-03-09 16:58:44'),
(468, '[13.47,12.68,12.23]', 13.47, '2021-03-09 16:59:04'),
(469, '[13.81,12.8,12.28]', 13.81, '2021-03-09 16:59:28'),
(470, '[14.07,12.87,12.31]', 14.07, '2021-03-09 16:59:33'),
(471, '[14.78,13.87,12.82]', 14.78, '2021-03-09 17:02:59'),
(472, '[15.33,14.53,13.57]', 15.33, '2021-03-09 17:42:43'),
(473, '[9.83,9.75,9.86]', 9.86, '2021-03-09 22:14:00'),
(474, '[10,9.79,9.87]', 10, '2021-03-09 22:14:06'),
(475, '[7.64,7.7,7.61]', 7.7, '2021-03-10 08:53:42'),
(476, '[7.75,7.72,7.62]', 7.75, '2021-03-10 08:53:44'),
(477, '[7.77,7.72,7.62]', 7.77, '2021-03-10 08:53:49'),
(478, '[9.43,8.77,8.09]', 9.43, '2021-03-10 09:17:56'),
(479, '[9.46,8.8,8.1]', 9.46, '2021-03-10 09:18:04'),
(480, '[9.58,8.83,8.12]', 9.58, '2021-03-10 09:18:08'),
(481, '[7.65,7.89,8.49]', 8.49, '2021-03-10 17:30:24'),
(482, '[8.21,8,8.51]', 8.51, '2021-03-10 17:30:41'),
(483, '[8.78,8.12,8.52]', 8.78, '2021-03-10 17:31:33'),
(484, '[9.09,8.22,8.54]', 9.09, '2021-03-10 17:31:54'),
(485, '[6.28,6.14,6.53]', 6.53, '2021-03-11 08:31:16'),
(486, '[6.55,6.2,6.55]', 6.55, '2021-03-11 08:31:34'),
(487, '[6.68,6.25,6.55]', 6.68, '2021-03-11 08:32:00'),
(488, '[6.79,6.28,6.56]', 6.79, '2021-03-11 08:32:05'),
(489, '[8.87,8.93,9.35]', 9.35, '2021-03-11 17:29:47'),
(490, '[9.36,8.97,9.32]', 9.36, '2021-03-11 17:31:16'),
(491, '[6.54,7.46,7.43]', 7.46, '2021-03-12 10:03:30'),
(492, '[6.74,7.48,7.44]', 7.48, '2021-03-12 10:03:33'),
(493, '[7.03,7.52,7.45]', 7.52, '2021-03-12 10:03:42'),
(494, '[7.64,7.34,7.38]', 7.64, '2021-03-12 10:05:50'),
(495, '[1.16,-1,6.32]', 6.32, '2021-03-19 21:13:09'),
(496, '[13.69,13.4,13.05]', 13.69, '2021-03-19 21:40:04'),
(497, '[14.12,13.5,13.08]', 14.12, '2021-03-19 21:40:09'),
(498, '[11.38,14.85,13.42]', 14.85, '2021-03-20 07:36:14'),
(499, '[23.89,19.43,15.9]', 23.89, '2021-03-20 09:05:38'),
(500, '[23.9,19.75,16.12]', 23.9, '2021-03-20 09:06:10'),
(501, '[25.4,20.21,16.3]', 25.4, '2021-03-20 09:06:18'),
(502, '[26.92,20.8,16.56]', 26.92, '2021-03-20 09:06:38'),
(503, '[28.77,21.93,17.17]', 28.77, '2021-03-20 09:07:31'),
(504, '[29.11,22.11,17.25]', 29.11, '2021-03-20 09:07:36'),
(505, '[29.5,24.37,20.55]', 29.5, '2021-03-20 09:19:27'),
(506, '[10.76,10.26,11.34]', 11.34, '2021-03-20 11:17:51'),
(507, '[11.99,10.74,11.4]', 11.99, '2021-03-20 11:19:28'),
(508, '[12.03,10.89,11.38]', 12.03, '2021-03-20 11:21:00'),
(509, '[12.16,11.1,11.4]', 12.16, '2021-03-20 11:22:35'),
(510, '[12.4,11.09,11.19]', 12.4, '2021-03-20 11:30:11'),
(511, '[12.5,11.15,11.2]', 12.5, '2021-03-20 11:30:21'),
(512, '[13.18,11.36,11.27]', 13.18, '2021-03-20 11:30:37'),
(513, '[14.69,13.08,11.89]', 14.69, '2021-03-20 12:32:20'),
(514, '[14.71,13.12,11.91]', 14.71, '2021-03-20 12:32:23'),
(515, '[14.74,13.15,11.93]', 14.74, '2021-03-20 12:32:28'),
(516, '[13.45,11.97,12.33]', 13.45, '2021-03-20 17:09:06'),
(517, '[13.48,12.02,12.34]', 13.48, '2021-03-20 17:09:14'),
(518, '[13.52,12.05,12.35]', 13.52, '2021-03-20 17:09:19'),
(519, '[14.64,13.6,12.9]', 14.64, '2021-03-20 17:12:31'),
(520, '[14.79,13.67,12.93]', 14.79, '2021-03-20 17:12:45'),
(521, '[18.65,14.25,13.17]', 18.65, '2021-03-20 17:15:16'),
(522, '[14.48,15.08,14.83]', 15.08, '2021-03-21 20:00:40'),
(523, '[15.37,15.21,14.88]', 15.37, '2021-03-21 20:00:59'),
(524, '[15.38,15.14,14.87]', 15.38, '2021-03-21 20:02:02'),
(525, '[15.5,13.6,13.51]', 15.5, '2021-03-21 20:24:59'),
(526, '[16.02,13.74,13.56]', 16.02, '2021-03-21 20:25:04'),
(527, '[16.66,13.91,13.62]', 16.66, '2021-03-21 20:25:10'),
(528, '[11.47,12.83,14.22]', 14.22, '2021-03-21 21:15:51'),
(529, '[12.58,12.97,14.23]', 14.23, '2021-03-21 21:16:16'),
(530, '[3.67,-1,2.15]', 3.67, '2021-03-30 17:18:43'),
(531, '[5.45,-1,2.26]', 5.45, '2021-03-30 17:18:45'),
(532, '[2.72,-1,6.7]', 6.7, '2021-03-30 17:19:05'),
(533, '[6.75,-1,4.75]', 6.75, '2021-03-30 17:19:57'),
(534, '[1.86,-1,6.95]', 6.95, '2021-03-30 17:20:20'),
(535, '[6.61,-1,7]', 7, '2021-03-30 17:24:57'),
(536, '[2.71,-1,4.94]', 4.94, '2021-04-05 18:14:22'),
(537, '[2.22,-1,1.05]', 2.22, '2021-04-12 16:04:50'),
(538, '[2.92,-1,3.77]', 3.77, '2021-04-12 16:04:52'),
(539, '[3.26,-1,5.84]', 5.84, '2021-04-12 16:04:58'),
(540, '[5.3,-1,6.71]', 6.71, '2021-04-12 16:05:03'),
(541, '[6.38,-1,6.78]', 6.78, '2021-04-12 16:06:06'),
(542, '[3.39,-1,6.81]', 6.81, '2021-04-12 16:06:21'),
(543, '[2.63,-1,3.65]', 3.65, '2021-04-13 11:41:21'),
(544, '[3.73,-1,5.69]', 5.69, '2021-04-13 11:41:23'),
(545, '[1.03,-1,1.92]', 1.92, '2021-04-16 17:27:43'),
(546, '[2.37,-1,0.47]', 2.37, '2021-04-16 17:27:45'),
(547, '[3.42,-1,6.23]', 6.23, '2021-04-16 17:27:47'),
(548, '[6.36,-1,2.99]', 6.36, '2021-04-16 17:28:18'),
(549, '[6.1,-1,6.22]', 6.22, '2021-04-20 17:47:31'),
(550, '[5.02,-1,6.9]', 6.9, '2021-04-20 17:47:47'),
(551, '[2.42,-1,4.95]', 4.95, '2021-04-21 08:08:56'),
(552, '[1.96,-1,6.64]', 6.64, '2021-04-21 08:09:02'),
(553, '[6.9,-1,4.72]', 6.9, '2021-04-21 08:09:05'),
(554, '[3.84,-1,0.47]', 3.84, '2021-04-21 18:49:10'),
(555, '[1.29,-1,3.94]', 3.94, '2021-04-21 18:49:17'),
(556, '[5.91,-1,5.06]', 5.91, '2021-04-21 18:49:20'),
(557, '[1.27,-1,6.09]', 6.09, '2021-04-21 18:49:30'),
(558, '[5.6,-1,6.12]', 6.12, '2021-04-21 18:49:55'),
(559, '[6.67,-1,1.97]', 6.67, '2021-04-21 18:50:07'),
(560, '[5.14,-1,6.99]', 6.99, '2021-04-21 18:50:15'),
(561, '[2.03,-1,1.28]', 2.03, '2021-04-22 17:33:26'),
(562, '[5.4,-1,3.83]', 5.4, '2021-04-22 17:33:28'),
(563, '[2.94,-1,6.88]', 6.88, '2021-04-28 15:13:46'),
(564, '[5.31,-1,0.33]', 5.31, '2021-04-29 15:34:07'),
(565, '[6.74,-1,4.9]', 6.74, '2021-04-29 15:34:09'),
(566, '[3.77,-1,2.38]', 3.77, '2021-05-06 18:03:21'),
(567, '[6.68,-1,1.94]', 6.68, '2021-05-06 18:03:25'),
(568, '[6.61,-1,5.03]', 6.61, '2021-05-11 17:31:42'),
(569, '[12.66,11.67,10.96]', 12.66, '2021-05-17 16:42:11'),
(570, '[13.09,11.77,11]', 13.09, '2021-05-17 16:42:14'),
(571, '[12.08,11.81,11.95]', 12.08, '2021-05-17 19:13:19'),
(572, '[12.13,11.82,11.95]', 12.13, '2021-05-17 19:13:32'),
(573, '[12.43,11.88,11.96]', 12.43, '2021-05-17 19:14:03'),
(574, '[11.89,11.72,12.32]', 12.32, '2021-05-17 20:19:48'),
(575, '[11.84,11.7,11.64]', 11.84, '2021-05-17 22:51:17'),
(576, '[11.85,11.71,11.64]', 11.85, '2021-05-17 22:51:19'),
(577, '[11.87,11.71,11.64]', 11.87, '2021-05-17 22:51:24'),
(578, '[12.36,11.82,11.68]', 12.36, '2021-05-17 22:51:29'),
(579, '[12.41,11.84,11.69]', 12.41, '2021-05-17 22:51:34'),
(580, '[12.47,12.35,11.94]', 12.47, '2021-05-17 23:10:37'),
(581, '[12.76,12.41,11.96]', 12.76, '2021-05-17 23:10:39'),
(582, '[12.89,12.45,11.98]', 12.89, '2021-05-17 23:10:50'),
(583, '[10.91,10.93,10.87]', 10.93, '2021-05-18 03:13:03'),
(584, '[11.08,10.97,10.88]', 11.08, '2021-05-18 03:13:06'),
(585, '[11.15,10.98,10.89]', 11.15, '2021-05-18 03:13:10'),
(586, '[11.37,11.04,10.9]', 11.37, '2021-05-18 03:13:23'),
(587, '[11.5,11.07,10.92]', 11.5, '2021-05-18 03:13:27'),
(588, '[11.71,11.13,10.94]', 11.71, '2021-05-18 03:13:46'),
(589, '[11.73,11.16,10.95]', 11.73, '2021-05-18 03:14:02'),
(590, '[11.9,11.26,11]', 11.9, '2021-05-18 03:15:06'),
(591, '[11.92,11.29,11.01]', 11.92, '2021-05-18 03:15:14'),
(592, '[12.17,11.35,11.03]', 12.17, '2021-05-18 03:15:18'),
(593, '[12.47,11.43,11.06]', 12.47, '2021-05-18 03:15:26'),
(594, '[8.56,8.35,8.44]', 8.56, '2021-05-18 07:37:59'),
(595, '[12.55,11.9,11.61]', 12.55, '2021-05-18 15:57:03'),
(596, '[13.06,12.02,11.65]', 13.06, '2021-05-18 15:57:05'),
(597, '[13.94,12.22,11.71]', 13.94, '2021-05-18 15:57:12'),
(598, '[10.35,11.02,11.44]', 11.44, '2021-05-18 16:47:25'),
(599, '[10.57,11.06,11.45]', 11.45, '2021-05-18 16:47:27'),
(600, '[15.22,14.89,14.7]', 15.22, '2021-05-18 18:50:55'),
(601, '[15.95,15.04,14.75]', 15.95, '2021-05-18 18:51:05'),
(602, '[12.74,12.8,13.32]', 13.32, '2021-05-18 23:29:55'),
(603, '[14.79,13.23,13.45]', 14.79, '2021-05-18 23:30:02'),
(604, '[15.45,13.39,13.51]', 15.45, '2021-05-18 23:30:10'),
(605, '[15.81,13.5,13.54]', 15.81, '2021-05-18 23:30:14'),
(606, '[10.94,11.54,11.35]', 11.54, '2021-05-19 15:56:53'),
(607, '[11.26,11.6,11.37]', 11.6, '2021-05-19 15:56:57'),
(608, '[11.69,11.6,11.38]', 11.69, '2021-05-19 15:57:55'),
(609, '[12.47,11.77,11.43]', 12.47, '2021-05-19 15:58:03'),
(610, '[12.57,11.82,11.47]', 12.57, '2021-05-19 15:59:04'),
(611, '[12.69,11.93,11.52]', 12.69, '2021-05-19 16:00:00'),
(612, '[12.96,12,11.55]', 12.96, '2021-05-19 16:00:08'),
(613, '[13.12,12.05,11.56]', 13.12, '2021-05-19 16:00:12'),
(614, '[15.97,15.14,14.12]', 15.97, '2021-05-19 18:18:52'),
(615, '[9.9,10.5,10.45]', 10.5, '2021-05-20 00:03:17'),
(616, '[10.19,10.3,10.18]', 10.3, '2021-05-20 10:03:12'),
(617, '[11.06,10.87,10.81]', 11.06, '2021-05-20 13:07:00'),
(618, '[11.78,11.08,10.74]', 11.78, '2021-05-20 15:58:33'),
(619, '[11.8,11.14,10.78]', 11.8, '2021-05-20 15:59:16'),
(620, '[13.62,11.55,10.91]', 13.62, '2021-05-20 15:59:40'),
(621, '[13.01,11.56,10.93]', 13.01, '2021-05-20 16:00:05'),
(622, '[11.55,11.05,11.2]', 11.55, '2021-05-20 18:05:30'),
(623, '[11.64,11.08,11.21]', 11.64, '2021-05-20 18:05:38'),
(624, '[12.17,11.13,10.72]', 12.17, '2021-05-20 19:46:37'),
(625, '[12.22,11.3,10.81]', 12.22, '2021-05-20 19:48:07'),
(626, '[12.29,11.32,10.83]', 12.29, '2021-05-20 19:48:13'),
(627, '[10.55,10.77,10.96]', 10.96, '2021-05-20 20:28:18'),
(628, '[11.12,10.85,10.97]', 11.12, '2021-05-20 20:29:00'),
(629, '[11.19,10.87,10.98]', 11.19, '2021-05-20 20:29:05'),
(630, '[11.38,10.74,10.88]', 11.38, '2021-05-20 20:32:15'),
(631, '[11.96,10.89,10.93]', 11.96, '2021-05-20 20:32:25'),
(632, '[12.04,10.92,10.94]', 12.04, '2021-05-20 20:32:30'),
(633, '[10.08,9.87,9.9]', 10.08, '2021-05-21 14:27:23'),
(634, '[10.31,9.92,9.92]', 10.31, '2021-05-21 14:28:01'),
(635, '[10.37,9.94,9.92]', 10.37, '2021-05-21 14:28:06'),
(636, '[8.32,9.59,9.4]', 9.59, '2021-05-21 15:07:23'),
(637, '[8.53,9.61,9.41]', 9.61, '2021-05-21 15:07:25'),
(638, '[10.92,9.79,9.31]', 10.92, '2021-05-21 15:41:51'),
(639, '[11.61,9.99,9.38]', 11.61, '2021-05-21 15:42:05'),
(640, '[10.59,10.94,11.1]', 11.1, '2021-05-21 18:57:43'),
(641, '[10.78,10.98,11.11]', 11.11, '2021-05-21 18:57:50'),
(642, '[10.88,10.99,11.12]', 11.12, '2021-05-21 18:57:55'),
(643, '[10.38,10.58,10.74]', 10.74, '2021-05-21 19:50:25'),
(644, '[10.51,10.61,10.75]', 10.75, '2021-05-21 19:50:28'),
(645, '[10.95,10.7,10.77]', 10.95, '2021-05-21 19:50:33'),
(646, '[11.19,10.75,10.79]', 11.19, '2021-05-21 19:50:39'),
(647, '[11.26,10.77,10.8]', 11.26, '2021-05-21 19:50:44'),
(648, '[11.56,10.84,10.82]', 11.56, '2021-05-21 19:50:47'),
(649, '[11.82,10.94,10.85]', 11.82, '2021-05-21 19:51:11'),
(650, '[11.92,10.97,10.86]', 11.92, '2021-05-21 19:51:14'),
(651, '[12.1,11.05,10.89]', 12.1, '2021-05-21 19:55:14'),
(652, '[12.17,11.1,10.91]', 12.17, '2021-05-21 19:55:26'),
(653, '[12.48,11.18,10.93]', 12.48, '2021-05-21 19:55:31'),
(654, '[12.64,11.27,10.97]', 12.64, '2021-05-21 19:55:46'),
(655, '[12.21,11.26,11]', 12.21, '2021-05-21 20:00:03'),
(656, '[12.25,11.31,11.02]', 12.25, '2021-05-21 20:00:18'),
(657, '[12.59,11.31,11.06]', 12.59, '2021-05-21 20:05:04'),
(658, '[12.75,11.38,11.08]', 12.75, '2021-05-21 20:05:15'),
(659, '[12.87,11.15,10.93]', 12.87, '2021-05-21 20:19:03'),
(660, '[10.53,10.27,10.32]', 10.53, '2021-05-21 23:55:01'),
(661, '[10.56,10.29,10.33]', 10.56, '2021-05-21 23:55:07'),
(662, '[10.68,10.32,10.34]', 10.68, '2021-05-21 23:55:12'),
(663, '[10.76,10.34,10.34]', 10.76, '2021-05-21 23:56:05'),
(664, '[12.11,11.14,10.65]', 12.11, '2021-05-22 00:02:16'),
(665, '[12.22,10.84,10.6]', 12.22, '2021-05-22 00:06:04'),
(666, '[12.53,10.93,10.63]', 12.53, '2021-05-22 00:06:08'),
(667, '[12.57,10.97,10.64]', 12.57, '2021-05-22 00:06:12'),
(668, '[12.6,11,10.65]', 12.6, '2021-05-22 00:06:20'),
(669, '[10.57,10.49,10.8]', 10.8, '2021-05-22 16:14:51'),
(670, '[10.84,10.55,10.81]', 10.84, '2021-05-22 16:14:54'),
(671, '[12.11,11.63,11.27]', 12.11, '2021-05-22 16:28:54'),
(672, '[12.25,11.68,11.29]', 12.25, '2021-05-22 16:29:04'),
(673, '[13.05,12.34,11.79]', 13.05, '2021-05-22 16:37:44'),
(674, '[13.2,12.39,11.8]', 13.2, '2021-05-22 16:37:47'),
(675, '[9.47,10.54,11.01]', 11.01, '2021-05-22 19:04:23'),
(676, '[10.84,10.08,9.76]', 10.84, '2021-05-23 01:33:20'),
(677, '[10.89,11.76,11.8]', 11.8, '2021-05-23 16:02:34'),
(678, '[11.14,11.8,11.81]', 11.81, '2021-05-23 16:02:37'),
(679, '[10.53,10.37,10.23]', 10.53, '2021-05-24 00:01:34'),
(680, '[10.56,10.38,10.24]', 10.56, '2021-05-24 00:01:36'),
(681, '[10.76,10.42,10.25]', 10.76, '2021-05-24 00:01:42'),
(682, '[10.86,10.45,10.26]', 10.86, '2021-05-24 00:01:46'),
(683, '[11.15,10.5,10.29]', 11.15, '2021-05-24 00:03:03'),
(684, '[11.22,10.52,10.29]', 11.22, '2021-05-24 00:03:08'),
(685, '[11.28,10.56,10.31]', 11.28, '2021-05-24 00:03:18'),
(686, '[11.98,10.71,10.36]', 11.98, '2021-05-24 00:03:23'),
(687, '[12.14,10.77,10.38]', 12.14, '2021-05-24 00:03:28'),
(688, '[13.13,13.82,13.81]', 13.82, '2021-05-26 17:00:41'),
(689, '[10.77,11.77,12.09]', 12.09, '2021-05-27 01:10:27'),
(690, '[12.39,11.83,12.07]', 12.39, '2021-05-27 01:12:10'),
(691, '[12.58,11.89,12.08]', 12.58, '2021-05-27 01:12:20'),
(692, '[11.76,11.57,11]', 11.76, '2021-05-27 18:08:26'),
(693, '[12.04,11.3,10.81]', 12.04, '2021-05-29 16:53:59'),
(694, '[10.65,10.51,10.66]', 10.66, '2021-05-29 17:36:49'),
(695, '[10.59,11.19,11.16]', 11.19, '2021-05-30 00:13:52'),
(696, '[11.22,11.3,11.2]', 11.3, '2021-05-30 00:14:03'),
(697, '[11.52,11.36,11.22]', 11.52, '2021-05-30 00:14:08'),
(698, '[11.78,11.37,11.23]', 11.78, '2021-05-30 00:15:34'),
(699, '[14.03,13.31,12.73]', 14.03, '2021-05-31 11:25:07'),
(700, '[14.13,13.35,12.75]', 14.13, '2021-05-31 11:25:14'),
(701, '[14.36,13.41,12.77]', 14.36, '2021-05-31 11:25:19'),
(702, '[14.86,13.54,12.82]', 14.86, '2021-05-31 11:25:28'),
(703, '[11.41,12,12.34]', 12.34, '2021-05-31 12:49:31'),
(704, '[13.04,11.94,11.72]', 13.04, '2021-06-03 16:24:13'),
(705, '[13.11,11.98,11.73]', 13.11, '2021-06-03 16:24:17'),
(706, '[14.08,14.98,14.55]', 14.98, '2021-06-03 21:36:01'),
(707, '[14.56,15.07,14.58]', 15.07, '2021-06-03 21:36:03'),
(708, '[15.09,15.15,14.62]', 15.15, '2021-06-03 21:36:18'),
(709, '[13.18,13.18,13.19]', 13.19, '2021-06-03 22:41:36'),
(710, '[13.52,13.22,13.2]', 13.52, '2021-06-03 22:42:07'),
(711, '[14.23,13.39,13.25]', 14.23, '2021-06-03 22:42:31'),
(712, '[15.01,13.57,13.31]', 15.01, '2021-06-03 22:42:36'),
(713, '[15.17,13.62,13.33]', 15.17, '2021-06-03 22:42:41'),
(714, '[15.24,13.7,13.36]', 15.24, '2021-06-03 22:43:01'),
(715, '[12.47,12.51,12.74]', 12.74, '2021-06-03 23:19:24'),
(716, '[12.68,12.55,12.75]', 12.75, '2021-06-03 23:19:29'),
(717, '[13.5,12.73,12.81]', 13.5, '2021-06-03 23:19:34'),
(718, '[9.63,9.93,9.31]', 9.93, '2021-06-04 05:24:04'),
(719, '[9.79,9.94,9.33]', 9.94, '2021-06-04 05:24:26'),
(720, '[9.89,9.96,9.34]', 9.96, '2021-06-04 05:24:34'),
(721, '[10.34,10.03,9.38]', 10.34, '2021-06-04 05:25:01'),
(722, '[10.63,10.1,9.41]', 10.63, '2021-06-04 05:25:08'),
(723, '[11.06,10.19,9.44]', 11.06, '2021-06-04 05:25:14'),
(724, '[11.54,10.31,9.48]', 11.54, '2021-06-04 05:25:19'),
(725, '[12.01,10.98,10.84]', 12.01, '2021-06-04 09:27:12'),
(726, '[12.33,10.56,10.65]', 12.33, '2021-06-04 09:30:02'),
(727, '[13.07,10.73,10.41]', 13.07, '2021-06-04 09:59:04'),
(728, '[13.14,10.79,10.43]', 13.14, '2021-06-04 09:59:08'),
(729, '[13.29,10.86,10.45]', 13.29, '2021-06-04 09:59:12'),
(730, '[11.42,10.7,10.42]', 11.42, '2021-06-04 10:00:00'),
(731, '[11.71,10.77,10.45]', 11.71, '2021-06-04 10:00:04'),
(732, '[11.81,10.81,10.46]', 11.81, '2021-06-04 10:00:08'),
(733, '[12.07,10.88,10.49]', 12.07, '2021-06-04 10:00:16'),
(734, '[12.13,10.93,10.55]', 12.13, '2021-06-04 10:04:53'),
(735, '[12.2,10.96,10.56]', 12.2, '2021-06-04 10:04:56'),
(736, '[12.65,11.16,10.64]', 12.65, '2021-06-04 10:05:28'),
(737, '[12.76,11.37,10.96]', 12.76, '2021-06-04 10:35:57'),
(738, '[13.21,11.89,11.3]', 13.21, '2021-06-04 10:43:07'),
(739, '[13.27,11.87,11.49]', 13.27, '2021-06-04 10:53:15'),
(740, '[13.85,13.08,12.68]', 13.85, '2021-06-04 17:00:18'),
(741, '[14.02,13.13,12.7]', 14.02, '2021-06-04 17:00:27'),
(742, '[14.26,13.2,12.72]', 14.26, '2021-06-04 17:00:31'),
(743, '[12.88,13.69,13.44]', 13.69, '2021-06-04 18:09:22'),
(744, '[12.54,11.68,11.2]', 12.54, '2021-06-06 08:50:03'),
(745, '[12.73,11.73,11.22]', 12.73, '2021-06-06 08:50:06'),
(746, '[12.84,11.77,11.24]', 12.84, '2021-06-06 08:50:11'),
(747, '[12.85,11.79,11.25]', 12.85, '2021-06-06 08:50:15'),
(748, '[13.1,11.86,11.27]', 13.1, '2021-06-06 08:50:23'),
(749, '[13.17,11.9,11.29]', 13.17, '2021-06-06 08:50:27'),
(750, '[9.48,9.18,9.34]', 9.48, '2021-06-06 12:43:31'),
(751, '[10.08,9.31,9.39]', 10.08, '2021-06-06 12:43:33'),
(752, '[11.56,11.22,11.03]', 11.56, '2021-06-06 16:36:28'),
(753, '[12.08,11.32,11.08]', 12.08, '2021-06-06 16:38:07'),
(754, '[12.15,11.22,11.05]', 12.15, '2021-06-06 16:41:48'),
(755, '[13.49,11.54,11.16]', 13.49, '2021-06-06 16:42:04'),
(756, '[10.24,10.43,10.76]', 10.76, '2021-06-06 19:46:16'),
(757, '[11.1,10.6,10.82]', 11.1, '2021-06-06 19:46:18'),
(758, '[11.25,10.64,10.83]', 11.25, '2021-06-06 19:46:21'),
(759, '[11.3,10.69,10.84]', 11.3, '2021-06-06 19:46:57'),
(760, '[11.75,10.8,10.87]', 11.75, '2021-06-06 19:47:05'),
(761, '[11.77,10.84,10.89]', 11.77, '2021-06-06 19:47:17'),
(762, '[11.98,10.91,10.91]', 11.98, '2021-06-06 19:47:29'),
(763, '[12.29,11.04,10.95]', 12.29, '2021-06-06 19:47:49'),
(764, '[12.42,11.08,10.96]', 12.42, '2021-06-06 19:47:53'),
(765, '[12.85,11.21,11.01]', 12.85, '2021-06-06 19:48:05'),
(766, '[13.35,12.25,11.73]', 13.35, '2021-06-06 20:26:39'),
(767, '[13.63,12.38,11.78]', 13.63, '2021-06-06 20:27:05'),
(768, '[13.98,12.47,11.82]', 13.98, '2021-06-06 20:27:09'),
(769, '[14.22,12.55,11.85]', 14.22, '2021-06-06 20:27:17'),
(770, '[14.35,12.63,11.88]', 14.35, '2021-06-06 20:27:26'),
(771, '[14.39,13.11,12.18]', 14.39, '2021-06-06 20:30:18'),
(772, '[14.52,13.16,12.2]', 14.52, '2021-06-06 20:30:25'),
(773, '[14.72,13.23,12.22]', 14.72, '2021-06-06 20:30:29'),
(774, '[14.74,13.38,12.31]', 14.74, '2021-06-06 20:31:05'),
(775, '[14.82,13.47,12.36]', 14.82, '2021-06-06 20:31:25'),
(776, '[14.91,13.52,12.38]', 14.91, '2021-06-06 20:31:33'),
(777, '[14.95,13.64,12.46]', 14.95, '2021-06-06 20:32:01'),
(778, '[15.04,13.68,12.48]', 15.04, '2021-06-06 20:32:09'),
(779, '[15.2,13.74,12.51]', 15.2, '2021-06-06 20:32:13'),
(780, '[15.26,13.78,12.53]', 15.26, '2021-06-06 20:32:17'),
(781, '[10.97,11.33,11.5]', 11.5, '2021-06-06 23:54:21'),
(782, '[11.14,11.35,11.51]', 11.51, '2021-06-06 23:54:36'),
(783, '[11.6,11.43,11.53]', 11.6, '2021-06-06 23:54:46'),
(784, '[12.07,11.54,11.57]', 12.07, '2021-06-06 23:54:57'),
(785, '[12.22,11.58,11.58]', 12.22, '2021-06-06 23:55:01'),
(786, '[12.8,11.75,11.63]', 12.8, '2021-06-06 23:55:27'),
(787, '[12.9,11.78,11.65]', 12.9, '2021-06-06 23:55:33'),
(788, '[13.15,11.85,11.67]', 13.15, '2021-06-06 23:55:39'),
(789, '[13.3,12,11.72]', 13.3, '2021-06-06 23:56:09'),
(790, '[13.38,11.84,11.65]', 13.38, '2021-06-06 23:59:08'),
(791, '[13.51,11.89,11.67]', 13.51, '2021-06-06 23:59:12'),
(792, '[12.33,11.8,11.65]', 12.33, '2021-06-07 00:00:00'),
(793, '[13.27,12,11.72]', 13.27, '2021-06-07 00:00:05'),
(794, '[13.47,13.2,13.02]', 13.47, '2021-06-10 17:33:07'),
(795, '[12.46,12.26,12.36]', 12.46, '2021-06-11 07:17:11'),
(796, '[10.67,10.89,11.59]', 11.59, '2021-06-18 05:17:10'),
(797, '[11.9,11.4,11.53]', 11.9, '2021-06-20 17:45:29'),
(798, '[12.07,11.44,11.54]', 12.07, '2021-06-20 17:45:33'),
(799, '[12.18,11.67,11.67]', 12.18, '2021-06-27 17:09:26'),
(800, '[9.98,9.98,9.87]', 9.98, '2021-07-07 17:25:08'),
(801, '[10.38,10.07,9.9]', 10.38, '2021-07-07 17:25:11'),
(802, '[10.51,10.1,9.91]', 10.51, '2021-07-07 17:25:13'),
(803, '[11.81,11.11,10.64]', 11.81, '2021-07-07 17:41:35'),
(804, '[11.97,11.17,10.67]', 11.97, '2021-07-07 17:41:47'),
(805, '[12.63,11.33,10.73]', 12.63, '2021-07-07 17:42:02'),
(806, '[9.38,10.28,10.35]', 10.35, '2021-07-08 09:38:23'),
(807, '[14.21,13.45,12.5]', 14.21, '2021-07-08 14:04:20'),
(808, '[12.45,12.57,12.49]', 12.57, '2021-07-22 19:31:08'),
(809, '[12.5,12.58,12.49]', 12.58, '2021-07-22 19:31:11'),
(810, '[12.78,12.63,12.51]', 12.78, '2021-07-22 19:31:16'),
(811, '[12.96,12.67,12.52]', 12.96, '2021-07-22 19:31:24'),
(812, '[13.36,12.76,12.55]', 13.36, '2021-07-22 19:31:27'),
(813, '[14.06,15.55,15.68]', 15.68, '2021-07-22 20:47:55'),
(814, '[14.7,15.66,15.71]', 15.71, '2021-07-22 20:48:00'),
(815, '[14.88,15.68,15.72]', 15.72, '2021-07-22 20:48:05'),
(816, '[13.85,13.41,13.72]', 13.85, '2021-07-23 17:03:24');

-- --------------------------------------------------------

--
-- Table structure for table `modules`
--

DROP TABLE IF EXISTS `modules`;
CREATE TABLE IF NOT EXISTS `modules` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `module_name` varchar(255) DEFAULT NULL,
  `file_name` varchar(255) DEFAULT NULL,
  `parent_id` int(11) DEFAULT 0,
  `priority` varchar(255) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `modules`
--

INSERT INTO `modules` (`id`, `module_name`, `file_name`, `parent_id`, `priority`) VALUES
(1, 'Test Managment', NULL, 0, '1'),
(2, 'Categories', 'cats', 1, '1'),
(3, 'Quizzes', 'quizzes', 1, '2'),
(4, 'Local users', 'local_users', 1, '4'),
(5, 'Test Assignments', NULL, 0, '2'),
(6, 'Assignments', 'assignments', 5, '6'),
(7, 'New Assignment', 'add_assignment', 5, '7'),
(8, 'Assignments', NULL, 0, '3'),
(9, 'Active Assignments', 'active_assignments', 8, '2'),
(11, 'New user', 'add_edit_user', 1, '5'),
(12, 'New Quiz', 'add_edit_quiz', 1, '3');

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
CREATE TABLE IF NOT EXISTS `questions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question_text` varchar(8000) DEFAULT NULL,
  `question_type_id` int(11) NOT NULL,
  `priority` int(11) NOT NULL,
  `quiz_id` int(11) NOT NULL,
  `point` decimal(18,0) NOT NULL,
  `added_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `parent_id` int(11) NOT NULL,
  `question_total` decimal(18,0) DEFAULT NULL,
  `check_total` int(11) DEFAULT NULL,
  `header_text` varchar(1500) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `footer_text` varchar(1500) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `question_text_eng` varchar(1800) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `help_image` varchar(550) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `quiz_id` (`quiz_id`)
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`id`, `question_text`, `question_type_id`, `priority`, `quiz_id`, `point`, `added_date`, `parent_id`, `question_total`, `check_total`, `header_text`, `footer_text`, `question_text_eng`, `help_image`) VALUES
(1, '<div style=\"font-weight:bold;\">What is the main difference between a WHILE and a DO-WHILE loop in Java?</div>\n<div style=\"font-weight:bold;\">A) WHILE loop executes the statements inside of it at least once even if the condition is false.</div>\n<div style=\"font-weight:bold;\">B) DO-WHILE loop executes the statements inside of it at least once even if the condition is false.</div>\n<div style=\"font-weight:bold;\">C) WHILE loop is fast.</div>\n<div style=\"font-weight:bold;\">D) DO-WHILE loop is fast.</div>\n', 1, 1, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(2, '<div style=\"font-weight:bold;\">What is the value of \"age\" in the below Java program with a DO-WHILE loop?</div>\n<div style=\"font-weight:bold;\">int age=20;</div>\n<div style=\"font-weight:bold;\">do</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">age++;</div>\n<div style=\"font-weight:bold;\">}while(age<20);</div>\n<div style=\"font-weight:bold;\">System.out.println(age);</div>\n', 1, 2, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(3, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">A BREAK statement inside a Loop like WHILE, FOR, DO WHILE and Enhanced-FOR causes the program execution ___ Loop.</div>\n', 1, 3, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(4, '<div style=\"font-weight:bold;\">Which of the following for loop declaration is not valid?</div>\n<div style=\"font-weight:bold;\">A)for ( int i = 99; i >= 0; i / 9 )</div>\n<div style=\"font-weight:bold;\">B)for ( int i = 7; i <= 77; i += 7 )</div>\n<div style=\"font-weight:bold;\">C)for ( int i = 20; i >= 2; - -i )</div>\n<div style=\"font-weight:bold;\">D)for ( int i = 2; i <= 20; i = 2* i )</div>\n', 1, 4, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(5, '<div style=\"font-weight:bold;\">What is the output of the below java program that implements nesting of loops?</div>\n<div style=\"font-weight:bold;\">int i=1, j=1;</div>\n<div style=\"font-weight:bold;\">while(i<3)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">do</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(j + \",\");</div>\n<div style=\"font-weight:bold;\">j++;</div>\n<div style=\"font-weight:bold;\">}while(j<4);</div>\n<div style=\"font-weight:bold;\">i++;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 5, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(6, '<div style=\"font-weight:bold;\">What is the output of the below Java code?</div>\n<div style=\"font-weight:bold;\">int score=1;</div>\n<div style=\"font-weight:bold;\">for(; true; score++)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(score +\",\");</div>\n<div style=\"font-weight:bold;\">if(score > 3)</div>\n<div style=\"font-weight:bold;\">break;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 6, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(7, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">int time=50;</div>\n<div style=\"font-weight:bold;\">do</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(time + \",\");</div>\n<div style=\"font-weight:bold;\">time++;</div>\n<div style=\"font-weight:bold;\">}while(time < 53)</div>\n', 1, 7, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(8, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">char ch[] = {\'A\', \'B\', \'C\'};</div>\n<div style=\"font-weight:bold;\">int i=0;</div>\n<div style=\"font-weight:bold;\">do</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(ch[i] + \",\");</div>\n<div style=\"font-weight:bold;\">i++;</div>\n<div style=\"font-weight:bold;\">}while(i < ch.length);</div>\n', 1, 8, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(9, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">int a=1;</div>\n<div style=\"font-weight:bold;\">while(a>4)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(a + \" \");</div>\n<div style=\"font-weight:bold;\">a++;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 9, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(10, '<div style=\"font-weight:bold;\">What is the output of the below Java program with FOR loop?</div>\n<div style=\"font-weight:bold;\">for(int j=0; j<5;j++;)</div>\n<div style=\"font-weight:bold;\">System.out.print(j + \",\");</div>\n', 1, 10, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(11, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">An Enhanced FOR loop in Java misses ___ and __ compared to the old-style FOR loop.</div>\n', 1, 11, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(12, '<div style=\"font-weight:bold;\">What is the output of Java Enhanced FOR loop below?</div>\n<div style=\"font-weight:bold;\">String names[] = {\"MOGLI\", \"SHAREKHAN\", \"BALU\"};</div>\n<div style=\"font-weight:bold;\">for(String str: names)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(str + \",\");</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 12, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(13, '<div style=\"font-weight:bold;\">What is the output of the below Java program with a decrement operator and WHILE-loop?</div>\n<div style=\"font-weight:bold;\">int x=4;</div>\n<div style=\"font-weight:bold;\">while(x>0)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\"> System.out.print(x + \" \");</div>\n<div style=\"font-weight:bold;\"> x--;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 13, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(14, '<div style=\"font-weight:bold;\">What is the output of the Java code snippet?</div>\n<div style=\"font-weight:bold;\">int i=0;</div>\n<div style=\"font-weight:bold;\">for(i=1; i<=6;i++)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">if(i%3==0)</div>\n<div style=\"font-weight:bold;\">continue;</div>\n<div style=\"font-weight:bold;\">System.out.print(i+\",\");</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 14, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(15, '<div style=\"font-weight:bold;\">What is the output of the below Java program with WHILE, BREAK and CONTINUE?</div>\n<div style=\"font-weight:bold;\">int cnt=0;</div>\n<div style=\"font-weight:bold;\">while(true)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">if(cnt > 4)</div>\n<div style=\"font-weight:bold;\">break;</div>\n<div style=\"font-weight:bold;\">if(cnt==0)</div>\n<div style=\"font-weight:bold;\">{	</div>\n<div style=\"font-weight:bold;\">cnt++;</div>\n<div style=\"font-weight:bold;\">continue;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">System.out.print(cnt + \",\");</div>\n<div style=\"font-weight:bold;\">cnt++;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 15, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(16, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">String str=\"FOX\";</div>\n<div style=\"font-weight:bold;\">int i=0;</div>\n<div style=\"font-weight:bold;\">while(i<str.length())</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">System.out.print(str.charAt(i));</div>\n<div style=\"font-weight:bold;\">i++;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 16, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(17, '<div style=\"font-weight:bold;\">What is the output of the Java program with Enhanced FOR loop below?</div>\n<div style=\"font-weight:bold;\">String countries[] = {\"BRAZIL\", \"CHILE\", \"SYDNEY\"};</div>\n<div style=\"font-weight:bold;\">int i=0;</div>\n<div style=\"font-weight:bold;\">for(String str: countries)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">if(i<2)</div>\n<div style=\"font-weight:bold;\">;</div>\n<div style=\"font-weight:bold;\">else</div>\n<div style=\"font-weight:bold;\">break;</div>\n<div style=\"font-weight:bold;\">System.out.print(str + \",\");</div>\n<div style=\"font-weight:bold;\">i++;</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 17, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(18, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">In Java language, BREAK or CONTINUE statements can be implemented inside a Loop only with the help of ___ statements to avoid never-ending loops.</div>\n', 1, 18, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(19, '<div style=\"font-weight:bold;\">What is the output of the following snippet?</div>\n<div style=\"font-weight:bold;\">for(int i=1;i<=5;i++);</div>\n<div style=\"font-weight:bold;\">System.out.print(i+&rdquo; &ldquo;);</div>\n', 1, 19, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(20, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">outer:</div>\n<div style=\"font-weight:bold;\">for(int i=1; i<=2;i++)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">inner:</div>\n<div style=\"font-weight:bold;\">for(int j=1; j<=2;j++)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">if(j>i)</div>\n<div style=\"font-weight:bold;\">break inner;</div>\n<div style=\"font-weight:bold;\">System.out.print(j +\",\");	</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 20, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(21, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">What attributes do all real world objects have?</div>\n', 1, 21, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(22, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Properties are implemented using ___ in Java.</div>\n', 1, 22, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(23, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Creating an object from a class is also called ____.</div>\n', 1, 23, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(24, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">After compilation, an Interface or Abstract-Class is kept in a ___ file in Java programming.</div>\n', 1, 24, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(25, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">The keyword used to create a new object in Java is ___.</div>\n', 1, 25, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(26, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">In a .java file, how many numbers of public types namely class, interface or abstract can be managed?</div>\n', 1, 26, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(27, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">\r\n	<div>\r\n		What is the output of the below Java program with two classes?</div>\r\n	<div>\r\n		//Testing1.java</div>\r\n	<div>\r\n		public class Example</div>\r\n	<div>\r\n		{</div>\r\n	<div>\r\n		}</div>\r\n	<div>\r\n		public class Testing1</div>\r\n	<div>\r\n		{</div>\r\n	<div>\r\n		public static void main(String[] args)</div>\r\n	<div>\r\n		{</div>\r\n	<div>\r\n		System.out.println(&quot;Hello Boss.!&quot;);</div>\r\n	<div>\r\n		}&nbsp; &nbsp;}</div>\r\n	<div>\r\n		&nbsp;</div>\r\n</div>\r\n<p>\r\n	&nbsp;</p>', 1, 27, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(28, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">\r\n	Attribute of an object can include information about _________?</div>', 1, 28, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(29, '<div style=\"font-weight:bold;\">What is the output of the below Java program?</div>\n<div style=\"font-weight:bold;\">//bingo.java file</div>\n<div style=\"font-weight:bold;\">public class Hello</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">  public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">  {</div>\n<div style=\"font-weight:bold;\">    System.out.println(\"BINGO\");</div>\n<div style=\"font-weight:bold;\">  }  }</div>\n', 1, 29, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(30, '<div style=\"font-weight:bold;\">What is the output of the below Java program that passes primitive values?</div>\n<div style=\"font-weight:bold;\">class Test</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">int rats = 5;</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">Test t1 = new Test();</div>\n<div style=\"font-weight:bold;\">System.out.println(t1.rats);</div>\n<div style=\"font-weight:bold;\">modify(t1.rats);</div>\n<div style=\"font-weight:bold;\">System.out.println(t1.rats);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">static void modify(int r)</div>\n<div style=\"font-weight:bold;\">{ r = 20; }</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 30, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(31, '<div style=\"font-weight:bold;\">Choose the correct statements about choosing a name for a class in Java.</div>\n<div style=\"font-weight:bold;\">A) The class name can start with only a letter or underscore or dollar sign.</div>\n<div style=\"font-weight:bold;\">B) The class name can contain numbers</div>\n<div style=\"font-weight:bold;\">C) The class name can not start with a number</div>\n', 1, 31, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(32, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">What type of object cannot be altered after it is constructed?</div>\n', 1, 32, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(33, '<div style=\"font-weight:bold;\">How many objects of a given class may be constructed in an application?</div>\n<div style=\"font-weight:bold;\">A.    Only one per constructor.</div>\n<div style=\"font-weight:bold;\">B.    As many as the application asks for.</div>\n<div style=\"font-weight:bold;\">C.    Only one per class.</div>\n<div style=\"font-weight:bold;\">D.    One object per variable.</div>\n', 1, 33, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(34, '<div style=\"font-weight:bold;\">What are the static variables and methods of a class?</div>\n<div style=\"font-weight:bold;\"> A.    Variables and methods that form the foundation of each object of that class.</div>\n<div style=\"font-weight:bold;\"> B.    Variables and methods that belong to all objects in the computer system.</div>\n<div style=\"font-weight:bold;\"> C.    Variables and methods that belong only the objects of that class.</div>\n<div style=\"font-weight:bold;\"> D.    Variables and methods that are part of the class definition, but not of its objects.</div>\n', 1, 34, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(35, '<div style=\"font-weight:bold;\">What is the expected output?</div>\n<div style=\"font-weight:bold;\">public class Profile {</div>\n<div style=\"font-weight:bold;\">private Profile(int w) { </div>\n<div style=\"font-weight:bold;\">System.out.print(w);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static Profile() { </div>\n<div style=\"font-weight:bold;\">System.out.print (10);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]) {</div>\n<div style=\"font-weight:bold;\">Profile obj = new Profile(50);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 35, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(36, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of the modifier can\'t be used for constructors?</div>\n', 1, 36, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(37, '<div style=\"font-weight:bold;\">What is the expected output?</div>\n<div style=\"font-weight:bold;\">class Animal {</div>\n<div style=\"font-weight:bold;\">Animal() {</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Animal\");</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">class Wild extends Animal{</div>\n<div style=\"font-weight:bold;\">Wild() {</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Wild\");</div>\n<div style=\"font-weight:bold;\">super();</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Test {</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]) {</div>\n<div style=\"font-weight:bold;\">Wild wild = new Wild();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 37, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(38, '<div style=\"font-weight:bold;\">Given the following piece of code:</div>\n<div style=\"font-weight:bold;\">class Person{</div>\n<div style=\"font-weight:bold;\">public int number;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public void doIt(int i , Person p){</div>\n<div style=\"font-weight:bold;\">i = 5;</div>\n<div style=\"font-weight:bold;\">p.number = 8;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">int x = 0;</div>\n<div style=\"font-weight:bold;\">Person p = new Person();</div>\n<div style=\"font-weight:bold;\">new Test().doIt(x, p);</div>\n<div style=\"font-weight:bold;\">System.out.println(x + \" \" + p.number);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">What is the output of the following code?</div>\n', 1, 38, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(39, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">The variables declared in a class for the use of all methods of the class are called</div>\n', 1, 39, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(40, '<div style=\"font-weight:bold;\">Which of the following statements regarding static methods are correct?</div>\n<div style=\"font-weight:bold;\">1. Static methods are difficult to maintain, because you can not change their implementation.</div>\n<div style=\"font-weight:bold;\">2. Static methods can be called using an object reference to an object of the class in which this method is defined.</div>\n<div style=\"font-weight:bold;\">3. Static methods are always public, because they are defined at class-level.</div>\n<div style=\"font-weight:bold;\">4. Static methods do not have direct access to non-static methods which are defined inside the same class.</div>\n', 1, 40, 1, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(41, '<div style=\"font-weight:bold;\">Which inheritance in java programming is not supported</div>\n<div style=\"font-weight:bold;\">1) Multiple inheritance using classes</div>\n<div style=\"font-weight:bold;\">2) Multiple inheritance using interfaces</div>\n<div style=\"font-weight:bold;\">3) Multilevel inheritance</div>\n<div style=\"font-weight:bold;\">4) Single inheritance</div>\n', 1, 1, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(42, '<div style=\"font-weight:bold;\">What is the result of compiling and running this program?</div>\n<div style=\"font-weight:bold;\">class Mammal{</div>\n<div style=\"font-weight:bold;\">void eat(Mammal m){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Mammal eats food\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class Cattle extends Mammal{</div>\n<div style=\"font-weight:bold;\">void eat(Cattle c){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Cattle eats hay\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class Horse extends Cattle{</div>\n<div style=\"font-weight:bold;\">void eat(Horse h){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Horse eats hay\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">Mammal h = new Horse();</div>\n<div style=\"font-weight:bold;\">Cattle c = new Horse();</div>\n<div style=\"font-weight:bold;\">c.eat(h);</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 2, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(43, '<div style=\"font-weight:bold;\">Which of the following is true in inheritance?</div>\n<div style=\"font-weight:bold;\">A. \"X extends Y\" is correct if and only if X is a class and Y is an interface</div>\n<div style=\"font-weight:bold;\">B. \"X extends Y\" is correct if and only if X is an interface and Y is a class</div>\n<div style=\"font-weight:bold;\">C. \"X extends Y\" is correct if X and Y are either both classes or both interfaces</div>\n<div style=\"font-weight:bold;\">D. \"X extends Y\" is correct for all combinations of X and Y being classes and/or interfaces</div>\n', 1, 3, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(44, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">If class B is subclassed from class A then which is the correct syntax</div>\n', 1, 4, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(45, '<div style=\"font-weight:bold;\">Which of the following is true?</div>\n<div style=\"font-weight:bold;\">1. A class can extend more than one class.</div>\n<div style=\"font-weight:bold;\">2. A class can extend only one class but many interfaces.</div>\n<div style=\"font-weight:bold;\">3. An interface can extend many interfaces.</div>\n<div style=\"font-weight:bold;\">4. An interface can implement many interfaces.</div>\n<div style=\"font-weight:bold;\">5. A class can extend one class and implement many interfaces.</div>\n', 1, 5, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(46, '<div style=\"font-weight:bold;\">What is the result of compiling and running the following code?</div>\n<div style=\"font-weight:bold;\">class Base{</div>\n<div style=\"font-weight:bold;\">public Base(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Base\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Derived extends Base{</div>\n<div style=\"font-weight:bold;\">public Derived(){</div>\n<div style=\"font-weight:bold;\">this(\"Exam\");</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Derived\");</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public Derived(String s){</div>\n<div style=\"font-weight:bold;\">System.out.print(s);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">new Derived();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 6, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(47, '<div style=\"font-weight:bold;\">What is the output of the following program code?</div>\n<div style=\"font-weight:bold;\">abstract class C1{</div>\n<div style=\"font-weight:bold;\"> public C1(){ </div>\n<div style=\"font-weight:bold;\">System.out.print(1); </div>\n<div style=\"font-weight:bold;\">}  } </div>\n<div style=\"font-weight:bold;\">class C2 extends C1{ </div>\n<div style=\"font-weight:bold;\"> public C2(){ </div>\n<div style=\"font-weight:bold;\">System.out.print(2); </div>\n<div style=\"font-weight:bold;\">}  } </div>\n<div style=\"font-weight:bold;\">class C3 extends C2{ </div>\n<div style=\"font-weight:bold;\">public C3(){ </div>\n<div style=\"font-weight:bold;\">System.out.println(3); </div>\n<div style=\"font-weight:bold;\">} } </div>\n<div style=\"font-weight:bold;\">public class Test{ </div>\n<div style=\"font-weight:bold;\">public static void main(String[] a){ </div>\n<div style=\"font-weight:bold;\">new C3(); </div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 7, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(48, '<div style=\"font-weight:bold;\">The concept of multiple inheritance is implemented in Java by</div>\n<div style=\"font-weight:bold;\">I.   Extending two or more classes.</div>\n<div style=\"font-weight:bold;\">II.  Extending one class and implementing one or more interfaces.</div>\n<div style=\"font-weight:bold;\">III. Implementing two or more interfaces.</div>\n', 1, 8, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(49, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">interface A{</div>\n<div style=\"font-weight:bold;\">public void method1();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">class One implements A{</div>\n<div style=\"font-weight:bold;\">public void method1(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Class One method1\");</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">class Two extends One{</div>\n<div style=\"font-weight:bold;\">public void method1(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Class Two method1\");	</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Test extends Two{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">A a = new Two();</div>\n<div style=\"font-weight:bold;\">a.method1();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 9, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(50, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Order of execution of constructors in Java Inheritance is _______?</div>\n', 1, 10, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(51, '<div style=\"font-weight:bold;\">Determine output:</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">public void method1(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Class A method1\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">public void method2(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Class B method2\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class C extends B{</div>\n<div style=\"font-weight:bold;\">public void method2(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Class C method2\");</div>\n<div style=\"font-weight:bold;\">}	</div>\n<div style=\"font-weight:bold;\">public void method3(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Class C method3\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">A a = new A();</div>\n<div style=\"font-weight:bold;\">C c = new C();		</div>\n<div style=\"font-weight:bold;\">c.method2();</div>\n<div style=\"font-weight:bold;\">a = c;</div>\n<div style=\"font-weight:bold;\">a.method3();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 11, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(52, '<div style=\"font-weight:bold;\">What will be printed after executing following program code?</div>\n<div style=\"font-weight:bold;\">class Base{</div>\n<div style=\"font-weight:bold;\">int value = 0;</div>\n<div style=\"font-weight:bold;\">Base(){</div>\n<div style=\"font-weight:bold;\">addValue();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">void addValue(){</div>\n<div style=\"font-weight:bold;\">value += 10;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">int getValue(){</div>\n<div style=\"font-weight:bold;\">return value;</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class Derived extends Base{</div>\n<div style=\"font-weight:bold;\">Derived(){</div>\n<div style=\"font-weight:bold;\">addValue();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">void addValue(){</div>\n<div style=\"font-weight:bold;\">value +=  20;</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">Base b = new Derived();</div>\n<div style=\"font-weight:bold;\">System.out.println(b.getValue());</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 12, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(53, '<div style=\"font-weight:bold;\">Which of the following is/are true statements?</div>\n<div style=\"font-weight:bold;\">1) A class can extend only one class but can implement many interfaces</div>\n<div style=\"font-weight:bold;\">2) An interface can extend many interfaces</div>\n<div style=\"font-weight:bold;\">3) An interface can implement another interface</div>\n<div style=\"font-weight:bold;\">4) An interface can implement a class</div>\n', 1, 13, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(54, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">class Parent{</div>\n<div style=\"font-weight:bold;\">public void method(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Hi i am parent\");</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Child extends Parent{</div>\n<div style=\"font-weight:bold;\">protected void method(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Hi i am Child\");</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">Child child = new Child();</div>\n<div style=\"font-weight:bold;\">child.method();</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 14, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(55, '<div style=\"font-weight:bold;\">The functionality of multiple inheritance can be implemented in Java by</div>\n<div style=\"font-weight:bold;\">I. Extending one class and implementing multiple interfaces.</div>\n<div style=\"font-weight:bold;\">II.Implementing multiple interfaces.</div>\n<div style=\"font-weight:bold;\">III.Extending multiple classes and interfaces.</div>\n<div style=\"font-weight:bold;\">IV. Extending multiple classes and one interface</div>\n', 1, 15, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(56, '<div style=\"font-weight:bold;\">Which cannot be inherited from a base class in Java programming?</div>\n<div style=\"font-weight:bold;\">A) Cannot override private method of a class</div>\n<div style=\"font-weight:bold;\">B) Protected methods are visible to only immediate child class</div>\n<div style=\"font-weight:bold;\">C) Public methods of a class are visible to all.</div>\n', 1, 16, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(57, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">class One{</div>\n<div style=\"font-weight:bold;\">final int a = 15;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">class Two extends One{</div>\n<div style=\"font-weight:bold;\">final int a = 20;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public class Test extends Two{</div>\n<div style=\"font-weight:bold;\">final int a = 30;</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">Test t = new One();</div>\n<div style=\"font-weight:bold;\">System.out.print(t.a);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 17, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(58, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">To prevent a class to be inherited / extended, the class should be</div>\n', 1, 18, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(59, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which class cannot be sub classed?</div>\n', 1, 19, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(60, '<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">A(String s){}</div>\n<div style=\"font-weight:bold;\">A(){}</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">1. class B extends A{</div>\n<div style=\"font-weight:bold;\">2.       B(){}</div>\n<div style=\"font-weight:bold;\">3.       B(String s){</div>\n<div style=\"font-weight:bold;\">4.             super(s);</div>\n<div style=\"font-weight:bold;\">5.       }</div>\n<div style=\"font-weight:bold;\">6.       void test(){</div>\n<div style=\"font-weight:bold;\">7.             // insert code here</div>\n<div style=\"font-weight:bold;\">8.       }</div>\n<div style=\"font-weight:bold;\">9. }</div>\n<div style=\"font-weight:bold;\">Which of the below code can be insert at line 7 to make clean compilation ?</div>\n', 1, 20, 2, 1, '2023-09-24 12:44:59', 0, NULL, NULL, '', '', NULL, NULL),
(61, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">What concepts come under Polymorphism in java?</div>\n', 1, 21, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(62, '<div style=\"font-weight:bold;\">Determine Output:</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">public static void method(int i){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Method 1\");</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static int method(String str){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Method 2\");</div>\n<div style=\"font-weight:bold;\">return 0;</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">A.method(5);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 22, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(63, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">interface A{</div>\n<div style=\"font-weight:bold;\">public void method1();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">class One implements A{</div>\n<div style=\"font-weight:bold;\">public void method1(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Class One method1\");</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">class Two extends One{</div>\n<div style=\"font-weight:bold;\">public void method1(){</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Class Two method1\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test extends Two{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">A a = new Two();</div>\n<div style=\"font-weight:bold;\">a.method1();</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 23, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(64, '<div style=\"font-weight:bold;\">What will be the output of the following program code?</div>\n<div style=\"font-weight:bold;\">class Rectangle{</div>\n<div style=\"font-weight:bold;\">public int area(int length, int width){</div>\n<div style=\"font-weight:bold;\">return  length*width;</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">class Square extends Rectangle{</div>\n<div style=\"font-weight:bold;\">public int area(long length, long width){</div>\n<div style=\"font-weight:bold;\">return  (int) Math.pow(length, 2);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">Square r = new Square();</div>\n<div style=\"font-weight:bold;\">System.out.println(r.area(5 , 4));</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 24, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(65, '<div style=\"font-weight:bold;\">class Base{</div>\n<div style=\"font-weight:bold;\">int value = 0;</div>\n<div style=\"font-weight:bold;\">Base(){</div>\n<div style=\"font-weight:bold;\">addValue();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">void addValue(){</div>\n<div style=\"font-weight:bold;\">value += 10;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">int getValue(){</div>\n<div style=\"font-weight:bold;\">return value;</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">class Derived extends Base{</div>\n<div style=\"font-weight:bold;\">Derived(){</div>\n<div style=\"font-weight:bold;\">addValue();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">void addValue(){</div>\n<div style=\"font-weight:bold;\">value +=  20;</div>\n<div style=\"font-weight:bold;\">}  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">Base b = new Derived();</div>\n<div style=\"font-weight:bold;\">System.out.println(b.getValue());</div>\n<div style=\"font-weight:bold;\">}   }</div>\n', 1, 25, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(66, '<div style=\"font-weight:bold;\">Which polymorphism behavior do you see in below class?</div>\n<div style=\"font-weight:bold;\">class Sample {</div>\n<div style=\"font-weight:bold;\">public void Color(int x) {</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public void Color(int x, int y) {</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public void Color(int x, int y, int z) {</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 26, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(67, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\"> static void method(){</div>\n<div style=\"font-weight:bold;\">  System.out.println(\"Class A method\");</div>\n<div style=\"font-weight:bold;\">  }  }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">  static void method(){</div>\n<div style=\"font-weight:bold;\">   System.out.println(\"Class B method\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">  public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">  A a = new B();</div>\n<div style=\"font-weight:bold;\">  a.method();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 27, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(68, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">____________ method cannot be overridden.</div>\n', 1, 28, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(69, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">      int i = 10;</div>\n<div style=\"font-weight:bold;\">      public void printValue(){</div>\n<div style=\"font-weight:bold;\">            System.out.print(\"Value-A\");</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">      int i = 12;</div>\n<div style=\"font-weight:bold;\">      public void printValue(){</div>\n<div style=\"font-weight:bold;\">            System.out.print(\"Value-B\");</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">            A a = new B();</div>\n<div style=\"font-weight:bold;\">            a.printValue();</div>\n<div style=\"font-weight:bold;\">            System.out.print(a.i);</div>\n<div style=\"font-weight:bold;\">      } }</div>\n', 1, 29, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(70, '<div style=\"font-weight:bold;\">What is the output for the below code?</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void printValue(int i, int j, int k){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"int\");</div>\n<div style=\"font-weight:bold;\">      }</div>\n<div style=\"font-weight:bold;\">      public static void printValue(byte...b){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"long\");</div>\n<div style=\"font-weight:bold;\">      }</div>\n<div style=\"font-weight:bold;\">      public static void main(String... args){</div>\n<div style=\"font-weight:bold;\">            byte b = 9;</div>\n<div style=\"font-weight:bold;\">            printValue(b,b,b);</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n', 1, 30, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(71, '<div style=\"font-weight:bold;\">What is output of the program?</div>\n<div style=\"font-weight:bold;\">class Test{</div>\n<div style=\"font-weight:bold;\">        public void display(int x, double y){</div>\n<div style=\"font-weight:bold;\">                System.out.println(x+y);</div>\n<div style=\"font-weight:bold;\">        } </div>\n<div style=\"font-weight:bold;\">        public double display(int p, double q){</div>\n<div style=\"font-weight:bold;\">                return (p+q);</div>\n<div style=\"font-weight:bold;\">        }</div>\n<div style=\"font-weight:bold;\">        public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">                Test test = new Test();</div>\n<div style=\"font-weight:bold;\">                test.display(4, 5.0);</div>\n<div style=\"font-weight:bold;\">                System.out.println(test.display(4, 5.0));</div>\n<div style=\"font-weight:bold;\">        }  }</div>\n', 1, 31, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(72, '<div style=\"font-weight:bold;\">Determine output:</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">      public void printValue(){</div>\n<div style=\"font-weight:bold;\">      System.out.println(\"Value-A\");</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">      public void printNameB(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"Name-B\");</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">class C extends A{</div>\n<div style=\"font-weight:bold;\">      public void printNameC(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"Name-C\");</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">1. public class Test{</div>\n<div style=\"font-weight:bold;\">2.       public static void main (String[] args){</div>\n<div style=\"font-weight:bold;\">3.             B b = new B();</div>\n<div style=\"font-weight:bold;\">4.             C c = new C();</div>\n<div style=\"font-weight:bold;\">5.             newPrint(b);</div>\n<div style=\"font-weight:bold;\">6.             newPrint(c);</div>\n<div style=\"font-weight:bold;\">7.       }</div>\n<div style=\"font-weight:bold;\">8.       public static void newPrint(A a){</div>\n<div style=\"font-weight:bold;\">9.             a.printValue();</div>\n<div style=\"font-weight:bold;\">10.      }  }</div>\n', 1, 32, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(73, '<div style=\"font-weight:bold;\">What is the output for the below code ?</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">      private void printName(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"Value-A\");</div>\n<div style=\"font-weight:bold;\">      } }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">      public void printName(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"Name-B\");</div>\n<div style=\"font-weight:bold;\">      } }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void main (String[] args){</div>\n<div style=\"font-weight:bold;\">            B b = new B();</div>\n<div style=\"font-weight:bold;\">            b.printName();</div>\n<div style=\"font-weight:bold;\">      } }</div>\n', 1, 33, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(74, '<div style=\"font-weight:bold;\">What is the output for the below code ?</div>\n<div style=\"font-weight:bold;\">class A{</div>\n<div style=\"font-weight:bold;\">      public A(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"A\");</div>\n<div style=\"font-weight:bold;\">      }</div>\n<div style=\"font-weight:bold;\">      public A(int i){</div>\n<div style=\"font-weight:bold;\">            this();</div>\n<div style=\"font-weight:bold;\">            System.out.println(i);</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n<div style=\"font-weight:bold;\">class B extends A{</div>\n<div style=\"font-weight:bold;\">      public B(){</div>\n<div style=\"font-weight:bold;\">            System.out.println(\"B\");</div>\n<div style=\"font-weight:bold;\">      }</div>\n<div style=\"font-weight:bold;\">      public B(int i){</div>\n<div style=\"font-weight:bold;\">            this();</div>\n<div style=\"font-weight:bold;\">            System.out.println(i+3);</div>\n<div style=\"font-weight:bold;\">      } }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void main (String[] args){</div>\n<div style=\"font-weight:bold;\">            new B(5);</div>\n<div style=\"font-weight:bold;\">      } }</div>\n', 1, 34, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(75, '<div style=\"font-weight:bold;\">what is the result of the following piece of code:</div>\n<div style=\"font-weight:bold;\">public class Person{</div>\n<div style=\"font-weight:bold;\">        public void talk(){</div>\n<div style=\"font-weight:bold;\">                System.out.print(\"I am a Person\");</div>\n<div style=\"font-weight:bold;\">        }  }</div>\n<div style=\"font-weight:bold;\">public class Student extends Person{</div>\n<div style=\"font-weight:bold;\">        public void talk(){</div>\n<div style=\"font-weight:bold;\">                System.out.print(\"I am a Student\");</div>\n<div style=\"font-weight:bold;\">        }  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">        public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">                Person p = new Student();</div>\n<div style=\"font-weight:bold;\">                p.talk();</div>\n<div style=\"font-weight:bold;\">        }  }</div>\n', 1, 35, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(76, '<div style=\"font-weight:bold;\">In below java code, whose &ldquo;Car&rdquo; will be called?</div>\n<div style=\"font-weight:bold;\">class Father {</div>\n<div style=\"font-weight:bold;\">  public void car() {</div>\n<div style=\"font-weight:bold;\">  System.out.println(\"Father\'s Car\");</div>\n<div style=\"font-weight:bold;\">   }  }</div>\n<div style=\"font-weight:bold;\">class Son extends Father {</div>\n<div style=\"font-weight:bold;\">  public void car() {</div>\n<div style=\"font-weight:bold;\">    System.out.println(\"Son\'s Car\");</div>\n<div style=\"font-weight:bold;\">  } }</div>\n<div style=\"font-weight:bold;\">public class Sample {</div>\n<div style=\"font-weight:bold;\">  public static void main(String[] args) {</div>\n<div style=\"font-weight:bold;\">  Son john = new Son();</div>\n<div style=\"font-weight:bold;\">  john.car();</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 36, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL);
INSERT INTO `questions` (`id`, `question_text`, `question_type_id`, `priority`, `quiz_id`, `point`, `added_date`, `parent_id`, `question_total`, `check_total`, `header_text`, `footer_text`, `question_text_eng`, `help_image`) VALUES
(77, '<div style=\"font-weight:bold;\">Which of the following class definitions defines a legal abstract class?</div>\n<div style=\"font-weight:bold;\">A. class A { abstract void unfinished() { } }</div>\n<div style=\"font-weight:bold;\">B. class A { abstract void unfinished(); }</div>\n<div style=\"font-weight:bold;\">C. abstract class A { abstract void unfinished(); }</div>\n<div style=\"font-weight:bold;\">D. public class abstract A { abstract void unfinished(); }</div>\n', 1, 37, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(78, '<div style=\"font-weight:bold;\">Which of the following statements regarding abstract classes are true?</div>\n<div style=\"font-weight:bold;\">A. An abstract class can be extended.</div>\n<div style=\"font-weight:bold;\">B. A subclass of a non-abstract superclass can be abstract.</div>\n<div style=\"font-weight:bold;\">C. A subclass can override a concrete method in a superclass to declare it abstract.</div>\n<div style=\"font-weight:bold;\">D. An abstract class can be used as a data type.</div>\n', 1, 38, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(79, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of the following declares an abstract method in an abstract Java class?</div>\n', 1, 39, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(80, '<div style=\"font-weight:bold;\">Which of the following is a correct interface?</div>\n<div style=\"font-weight:bold;\">A. interface A { void print() { } }</div>\n<div style=\"font-weight:bold;\">B. abstract interface A { print(); }</div>\n<div style=\"font-weight:bold;\">C. abstract interface A { abstract void print(); { }}</div>\n<div style=\"font-weight:bold;\">D. interface A { void print(); }</div>\n', 1, 40, 2, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(81, '<div style=\"font-weight:bold;\">Suppose A is an abstract class, B is a concrete subclass of A, and both A and B have a default constructor. Which of the following is correct?</div>\n<div style=\"font-weight:bold;\">1. A a = new A();</div>\n<div style=\"font-weight:bold;\">2. A a = new B();</div>\n<div style=\"font-weight:bold;\">3. B b = new A();</div>\n<div style=\"font-weight:bold;\">4. B b = new B();</div>\n', 1, 1, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(82, '<div style=\"font-weight:bold;\">Determine output of the following code.</div>\n<div style=\"font-weight:bold;\">interface A { }</div>\n<div style=\"font-weight:bold;\">class C { }</div>\n<div style=\"font-weight:bold;\">class D extends C { }</div>\n<div style=\"font-weight:bold;\">class B extends D implements A { }</div>\n<div style=\"font-weight:bold;\">public class Test extends Thread{</div>\n<div style=\"font-weight:bold;\">  public static void main(String[] args){</div>\n<div style=\"font-weight:bold;\">  B b = new B();</div>\n<div style=\"font-weight:bold;\">    if (b instanceof A)</div>\n<div style=\"font-weight:bold;\">      System.out.println(\"b is an instance of A\");</div>\n<div style=\"font-weight:bold;\">    if (b instanceof C)</div>\n<div style=\"font-weight:bold;\">      System.out.println(\"b is an instance of C\");</div>\n<div style=\"font-weight:bold;\">   }</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 2, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(83, '<div style=\"font-weight:bold;\">Given the following piece of code:</div>\n<div style=\"font-weight:bold;\">public interface Guard</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">        void doYourJob();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">abstract public class Dog implements Guard</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">which of the following statements is correct?</div>\n<div style=\"font-weight:bold;\">A. This code will not compile, because method doYourJob() in interface Guard must be defined abstract.</div>\n<div style=\"font-weight:bold;\">B. This code will not compile, because class Dog must implement method doYourJob() from interface Guard.</div>\n<div style=\"font-weight:bold;\">C. This code will not compile, because in the declaration of class Dog we must use the keyword extends instead of implements.</div>\n<div style=\"font-weight:bold;\">D. This code will compile without any errors.</div>\n', 1, 3, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(84, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">interface A</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">   public void method();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">class One</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">  public void method()</div>\n<div style=\"font-weight:bold;\">   {</div>\n<div style=\"font-weight:bold;\">    System.out.println(\"Class One method\");</div>\n<div style=\"font-weight:bold;\">   }  }</div>\n<div style=\"font-weight:bold;\">class Two extends One implements A</div>\n<div style=\"font-weight:bold;\">  {</div>\n<div style=\"font-weight:bold;\">    public void method(){</div>\n<div style=\"font-weight:bold;\">    System.out.println(\"Class Two method\");</div>\n<div style=\"font-weight:bold;\">  }  }</div>\n<div style=\"font-weight:bold;\">public class Test extends Two</div>\n<div style=\"font-weight:bold;\">  {</div>\n<div style=\"font-weight:bold;\">     public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">      {</div>\n<div style=\"font-weight:bold;\">        A a = new Two();</div>\n<div style=\"font-weight:bold;\">        a.method();		</div>\n<div style=\"font-weight:bold;\">    }  }</div>\n', 1, 4, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(85, '<div style=\"font-weight:bold;\">interface Test{</div>\n<div style=\"font-weight:bold;\">      int p = 10; //line 1</div>\n<div style=\"font-weight:bold;\">      public int q = 20; //line 2</div>\n<div style=\"font-weight:bold;\">      public static int r = 30; //line 3</div>\n<div style=\"font-weight:bold;\">      public static final int s = 40; //line 4</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 5, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(86, '<div style=\"font-weight:bold;\">What will happen after compiling this program code?</div>\n<div style=\"font-weight:bold;\">abstract class MyClass{ //line 1</div>\n<div style=\"font-weight:bold;\">      private int a, b;</div>\n<div style=\"font-weight:bold;\">      public void call(int a, int b){</div>\n<div style=\"font-weight:bold;\">            this.a = a;</div>\n<div style=\"font-weight:bold;\">            this.b = b;</div>\n<div style=\"font-weight:bold;\">            System.out.print(a+b);</div>\n<div style=\"font-weight:bold;\">    }  }</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">            MyClass m = new MyClass(); //line 2</div>\n<div style=\"font-weight:bold;\">            m.call(12,25);</div>\n<div style=\"font-weight:bold;\">      }  }</div>\n', 1, 6, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(87, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Runnable is a _____ .?</div>\n', 1, 7, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(88, '<div style=\"font-weight:bold;\">What will be the output for the below code ?</div>\n<div style=\"font-weight:bold;\">public interface TestInf{</div>\n<div style=\"font-weight:bold;\">      int i =10;</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public class Test{</div>\n<div style=\"font-weight:bold;\">      public static void main(String... args){</div>\n<div style=\"font-weight:bold;\">            TestInf.i=12;</div>\n<div style=\"font-weight:bold;\">	    System.out.println(TestInf.i);</div>\n<div style=\"font-weight:bold;\">      } }</div>\n', 1, 8, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(89, '<div style=\"font-weight:bold;\">In Java, declaring a class abstract is useful</div>\n<div style=\"font-weight:bold;\">A.To prevent developers from further extending the class.</div>\n<div style=\"font-weight:bold;\">B.When it doesn\'t make sense to have objects of that class.</div>\n<div style=\"font-weight:bold;\">C.When default implementations of some methods are not desirable.</div>\n<div style=\"font-weight:bold;\">D.To force developers to extend the class not to use its capabilities.</div>\n', 1, 9, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(90, '<div style=\"font-weight:bold;\">What happens if the following program is compiled and executed?</div>\n<div style=\"font-weight:bold;\">interface MyInterface{</div>\n<div style=\"font-weight:bold;\">void display();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">interface MySubInterface extends MyInterface{</div>\n<div style=\"font-weight:bold;\">void display();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public class Test implements MySubInterface{</div>\n<div style=\"font-weight:bold;\">public void display(){</div>\n<div style=\"font-weight:bold;\">System.out.print(\"Welcome to C.\");</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">Test t = new Test();</div>\n<div style=\"font-weight:bold;\">t.display();</div>\n<div style=\"font-weight:bold;\">}   }</div>\n<div style=\"font-weight:bold;\">A. The code will lead to a compilation error as declaration of the display method has been provided in two interface.</div>\n<div style=\"font-weight:bold;\">B. The code will lead to a compilation error due to public modifier while declaring the display method.</div>\n<div style=\"font-weight:bold;\">C. The code will compile and execute successfully showing the output Welcome to C.</div>\n<div style=\"font-weight:bold;\">D. The code will lead to a compilation error as the display method is not declared as abstract.</div>\n', 1, 10, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(91, '<div style=\"font-weight:bold;\">Which two of the following are legal declarations for abstract classes and interfaces?</div>\n<div style=\"font-weight:bold;\">1. final abstract class Test {}</div>\n<div style=\"font-weight:bold;\">2. public static interface Test {}</div>\n<div style=\"font-weight:bold;\">3. final public class Test {}</div>\n<div style=\"font-weight:bold;\">4. protected abstract class Test {}</div>\n<div style=\"font-weight:bold;\">5. protected interface Test {}</div>\n<div style=\"font-weight:bold;\">6. abstract public class Test {}</div>\n', 1, 11, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(92, '<div style=\"font-weight:bold;\">Given the following piece of code:</div>\n<div style=\"font-weight:bold;\">public class School</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">        public abstract double numberOfStudent();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">which of the following statements is true?  </div>\n', 1, 12, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(93, '<div style=\"font-weight:bold;\">Given the following piece of code:</div>\n<div style=\"font-weight:bold;\">public class School</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">        public abstract double numberOfStudent();</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">which of the following statements is true?</div>\n', 1, 13, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(94, '<div style=\"font-weight:bold;\">interface Base</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">      boolean m1 ();</div>\n<div style=\"font-weight:bold;\">      byte m2(short s);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">which two code fragments will compile?</div>\n<div style=\"font-weight:bold;\">1. interface Base2 implements Base {}</div>\n<div style=\"font-weight:bold;\">2. abstract class Class2 extends Base</div>\n<div style=\"font-weight:bold;\">    { public boolean m1(){ return true; }}</div>\n<div style=\"font-weight:bold;\">3. abstract class Class2 implements Base {}</div>\n<div style=\"font-weight:bold;\">4. abstract class Class2 implements Base</div>\n<div style=\"font-weight:bold;\">   { public boolean m1(){ return (7 > 4); }}</div>\n<div style=\"font-weight:bold;\">5. abstract class Class2 implements Base</div>\n<div style=\"font-weight:bold;\">    { protected boolean m1(){ return (5 > 7) }}</div>\n', 1, 14, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(95, '<div style=\"font-weight:bold;\">What will be the output?</div>\n<div style=\"font-weight:bold;\">1. public interface InfA{</div>\n<div style=\"font-weight:bold;\">2.       protected String getName();</div>\n<div style=\"font-weight:bold;\">3. }</div>\n<div style=\"font-weight:bold;\">public class Test implements InfA{</div>\n<div style=\"font-weight:bold;\">      public String getName(){</div>\n<div style=\"font-weight:bold;\">            return \"test-name\";</div>\n<div style=\"font-weight:bold;\">      }</div>\n<div style=\"font-weight:bold;\">      public static void main (String[] args){</div>\n<div style=\"font-weight:bold;\">            Test t = new Test();</div>\n<div style=\"font-weight:bold;\">            System.out.println(t.getName());</div>\n<div style=\"font-weight:bold;\">      } }</div>\n', 1, 15, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(96, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of these keywords cannot be used for a class which has been declared final?</div>\n', 1, 16, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(97, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">When method overloading is determined?</div>\n', 1, 17, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(98, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">When Overloading does not occur?</div>\n', 1, 18, 3, 1, '2023-09-24 12:45:00', 0, NULL, NULL, '', '', NULL, NULL),
(99, '<div style=\"font-weight:bold;\">What is the output of the following program?</div>\n<div style=\"font-weight:bold;\">class Sample   { </div>\n<div style=\"font-weight:bold;\">protected void getData() 	{ </div>\n<div style=\"font-weight:bold;\">System.out.println(\"Sample\");    } </div>\n<div style=\"font-weight:bold;\">} </div>\n<div style=\"font-weight:bold;\">class HelloSample extends Sample   { </div>\n<div style=\"font-weight:bold;\">protected void getData()  { </div>\n<div style=\"font-weight:bold;\">System.out.println(\"Hello Sample\");   } </div>\n<div style=\"font-weight:bold;\">} </div>\n<div style=\"font-weight:bold;\">public class Test  { </div>\n<div style=\"font-weight:bold;\">public static void main(String[] args)   { </div>\n<div style=\"font-weight:bold;\">Sample obj = new Sample( ); </div>\n<div style=\"font-weight:bold;\">obj.getData();    }   }</div>\n', 1, 19, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(100, '<div style=\"font-weight:bold;\">What will be the output of the following Java program?</div>\n<div style=\"font-weight:bold;\">class A      {</div>\n<div style=\"font-weight:bold;\">int i;</div>\n<div style=\"font-weight:bold;\">public void display()          {</div>\n<div style=\"font-weight:bold;\">System.out.println(i);         }    </div>\n<div style=\"font-weight:bold;\">}    </div>\n<div style=\"font-weight:bold;\">class B extends A    {</div>\n<div style=\"font-weight:bold;\">int j;</div>\n<div style=\"font-weight:bold;\">public void display()         {</div>\n<div style=\"font-weight:bold;\">System.out.println(j);        } </div>\n<div style=\"font-weight:bold;\">}    </div>\n<div style=\"font-weight:bold;\">class Dynamic_dispatch    {</div>\n<div style=\"font-weight:bold;\">public static void main(String args[])        {</div>\n<div style=\"font-weight:bold;\">B obj2 = new B();</div>\n<div style=\"font-weight:bold;\">obj2.i = 1;      obj2.j = 2;</div>\n<div style=\"font-weight:bold;\">A r;</div>\n<div style=\"font-weight:bold;\">r = obj2;</div>\n<div style=\"font-weight:bold;\">r.display();             }   }</div>\n', 1, 20, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(101, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of these is an incorrect Statement?</div>\n', 1, 21, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(102, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Java does not support _______________?</div>\n', 1, 22, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(103, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of the following is a type of polymorphism in Java?</div>\n', 1, 23, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(104, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">When Overloading does not occur?</div>\n', 1, 24, 3, 1, '2023-09-24 12:45:01', 0, NULL, NULL, '', '', NULL, NULL),
(105, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of these keywords cannot be used for a class which has been declared final?</div>\n', 1, 25, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(106, '<div style=\"font-weight:bold;\">What will be the output of the following code?</div>\n<div style=\"font-weight:bold;\">class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">final int i;</div>\n<div style=\"font-weight:bold;\">i = 20;</div>\n<div style=\"font-weight:bold;\">i=30;</div>\n<div style=\"font-weight:bold;\">System.out.println(i);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 26, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(107, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Keyword ________ is always a reference to the object.</div>\n', 1, 27, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(108, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">If a variable is declared final, it must include _________ value.</div>\n', 1, 28, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(109, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">\r\n	A _______ class may not have any abstract method.</div>', 1, 29, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(110, '<div style=\"font-weight:bold;\">What is the use of final keyword in Java?</div>\n<div style=\"font-weight:bold;\">(A) When a class is made final, a sublcass of it can not be created.</div>\n<div style=\"font-weight:bold;\">(B) When a method is final, it can not be overridden.</div>\n<div style=\"font-weight:bold;\">(C) When a variable is final, it can be assigned value only once.</div>\n', 1, 30, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(111, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">\r\n	Using which keyword we can access value of the instance variables and class variables of that class inside the method of that class itself.</div>', 1, 31, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(112, '<div style=\"font-weight:bold;\">What will be the output of the following code?</div>\n<div style=\"font-weight:bold;\">class Test{</div>\n<div style=\"font-weight:bold;\">public static void main(String args[]){</div>\n<div style=\"font-weight:bold;\">final int i;</div>\n<div style=\"font-weight:bold;\">i = 20;</div>\n<div style=\"font-weight:bold;\">System.out.println(i);</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 32, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(113, '<div style=\"font-weight:bold;\">What will be the output of the program?</div>\n<div style=\"font-weight:bold;\">class Test</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">final static short i = 2;</div>\n<div style=\"font-weight:bold;\">public static int j = 0;   </div>\n<div style=\"font-weight:bold;\">public static void main(String [] args)</div>\n<div style=\"font-weight:bold;\">{   for (int k = 0; k < 3; k++)</div>\n<div style=\"font-weight:bold;\">{  switch (k)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">case i: System.out.print(\" 0 \");</div>\n<div style=\"font-weight:bold;\">case i-1: System.out.print(\" 1 \");</div>\n<div style=\"font-weight:bold;\">case i-2: System.out.print(\" 2 \");</div>\n<div style=\"font-weight:bold;\">} } } }</div>\n', 1, 33, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(114, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Every method of a ________ is implicitly final.</div>\n', 1, 34, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(115, '<div style=\"font-weight:bold;\">//What will be the output of the following program?</div>\n<div style=\"font-weight:bold;\">public class Final</div>\n<div style=\"font-weight:bold;\">{      int a = 30;</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">{    final int assign;</div>\n<div style=\"font-weight:bold;\">Final b = new Final();</div>\n<div style=\"font-weight:bold;\">process(b);</div>\n<div style=\"font-weight:bold;\">System.out.println(b.a);  </div>\n<div style=\"font-weight:bold;\">process(b);</div>\n<div style=\"font-weight:bold;\">assign = b.a;</div>\n<div style=\"font-weight:bold;\">System.out.println(assign);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">public static void process(Final a)</div>\n<div style=\"font-weight:bold;\">{   a.a = a.a + 5    }</div>\n<div style=\"font-weight:bold;\">}</div>\n', 1, 35, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(116, '<div style=\"font-weight:bold;\">What will be the output of the program?</div>\n<div style=\"font-weight:bold;\">class Output</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">final static short i = 2;</div>\n<div style=\"font-weight:bold;\">public static int j = 0;   </div>\n<div style=\"font-weight:bold;\">public static void main(String [] args)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">for (int k = 0; k < 3; k++)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">switch (k)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">case i : System.out.print(\" 1 \");</div>\n<div style=\"font-weight:bold;\">case i - 1 : System.out.print(\" 2 \");</div>\n<div style=\"font-weight:bold;\">default : System.out.print(\" 0 \");</div>\n<div style=\"font-weight:bold;\">} } } }</div>\n', 1, 36, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(117, '<div style=\"font-weight:bold;\">public class Final</div>\n<div style=\"font-weight:bold;\">{    final int assign = 30;    </div>\n<div style=\"font-weight:bold;\">public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">{  final int result = 20;</div>\n<div style=\"font-weight:bold;\">final int assign;    </div>\n<div style=\"font-weight:bold;\">Final f = new Final();</div>\n<div style=\"font-weight:bold;\">assign = 20;</div>\n<div style=\"font-weight:bold;\">System.out.print(assign);</div>\n<div style=\"font-weight:bold;\">System.out.print(f.assign);</div>\n<div style=\"font-weight:bold;\">System.out.print(f.process(result));</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">int process(int a)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">return a + 5;</div>\n<div style=\"font-weight:bold;\">}   }</div>\n', 1, 37, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(118, '<div style=\"margin-bottom:7px;font-weight:bold;text-align:justify;\">Which of the following is not a keyword?</div>\n', 1, 38, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(119, '<div style=\"font-weight:bold;\">What will be the output of the following program?</div>\n<div style=\"font-weight:bold;\">public class Final</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">final int result;</div>\n<div style=\"font-weight:bold;\">result = 20;   </div>\n<div style=\"font-weight:bold;\">int assign = process(result);</div>\n<div style=\"font-weight:bold;\">result = assign;</div>\n<div style=\"font-weight:bold;\">System.out.println(result);</div>\n<div style=\"font-weight:bold;\">}</div>\n<div style=\"font-weight:bold;\">static int process(int a)</div>\n<div style=\"font-weight:bold;\">{</div>\n<div style=\"font-weight:bold;\">return a + 5;</div>\n<div style=\"font-weight:bold;\">} }</div>\n', 1, 39, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL),
(120, '<div style=\"font-weight:bold;\">What is the output of the following code?</div>\n<div style=\"font-weight:bold;\">class Base {</div>\n<div style=\"font-weight:bold;\">public final void show() {</div>\n<div style=\"font-weight:bold;\">System.out.println(\"Base::show() called\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">class Derived extends Base {</div>\n<div style=\"font-weight:bold;\">public void show() {  </div>\n<div style=\"font-weight:bold;\">System.out.println(\"Derived::show() called\");</div>\n<div style=\"font-weight:bold;\">} }</div>\n<div style=\"font-weight:bold;\">public class Test {</div>\n<div style=\"font-weight:bold;\">public static void main(String[] args) {</div>\n<div style=\"font-weight:bold;\">Base b = new Derived();;</div>\n<div style=\"font-weight:bold;\">b.show();</div>\n<div style=\"font-weight:bold;\">}  }</div>\n', 1, 40, 3, 1, '2023-09-24 12:45:02', 0, NULL, NULL, '', '', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `question_groups`
--

DROP TABLE IF EXISTS `question_groups`;
CREATE TABLE IF NOT EXISTS `question_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(450) NOT NULL,
  `show_header` int(11) NOT NULL,
  `group_total` decimal(18,0) NOT NULL DEFAULT 0,
  `show_footer` int(11) DEFAULT NULL,
  `check_total` decimal(18,0) DEFAULT NULL,
  `question_id` int(11) DEFAULT NULL,
  `parent_id` int(11) NOT NULL,
  `group_name_eng` varchar(450) DEFAULT NULL,
  `added_date` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `question_id` (`question_id`)
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `question_groups`
--

INSERT INTO `question_groups` (`id`, `group_name`, `show_header`, `group_total`, `show_footer`, `check_total`, `question_id`, `parent_id`, `group_name_eng`, `added_date`) VALUES
(1, '', 0, 0, NULL, NULL, 1, 0, NULL, '2023-09-24 12:44:59'),
(2, '', 0, 0, NULL, NULL, 2, 0, NULL, '2023-09-24 12:44:59'),
(3, '', 0, 0, NULL, NULL, 3, 0, NULL, '2023-09-24 12:44:59'),
(4, '', 0, 0, NULL, NULL, 4, 0, NULL, '2023-09-24 12:44:59'),
(5, '', 0, 0, NULL, NULL, 5, 0, NULL, '2023-09-24 12:44:59'),
(6, '', 0, 0, NULL, NULL, 6, 0, NULL, '2023-09-24 12:44:59'),
(7, '', 0, 0, NULL, NULL, 7, 0, NULL, '2023-09-24 12:44:59'),
(8, '', 0, 0, NULL, NULL, 8, 0, NULL, '2023-09-24 12:44:59'),
(9, '', 0, 0, NULL, NULL, 9, 0, NULL, '2023-09-24 12:44:59'),
(10, '', 0, 0, NULL, NULL, 10, 0, NULL, '2023-09-24 12:44:59'),
(11, '', 0, 0, NULL, NULL, 11, 0, NULL, '2023-09-24 12:44:59'),
(12, '', 0, 0, NULL, NULL, 12, 0, NULL, '2023-09-24 12:44:59'),
(13, '', 0, 0, NULL, NULL, 13, 0, NULL, '2023-09-24 12:44:59'),
(14, '', 0, 0, NULL, NULL, 14, 0, NULL, '2023-09-24 12:44:59'),
(15, '', 0, 0, NULL, NULL, 15, 0, NULL, '2023-09-24 12:44:59'),
(16, '', 0, 0, NULL, NULL, 16, 0, NULL, '2023-09-24 12:44:59'),
(17, '', 0, 0, NULL, NULL, 17, 0, NULL, '2023-09-24 12:44:59'),
(18, '', 0, 0, NULL, NULL, 18, 0, NULL, '2023-09-24 12:44:59'),
(19, '', 0, 0, NULL, NULL, 19, 0, NULL, '2023-09-24 12:44:59'),
(20, '', 0, 0, NULL, NULL, 20, 0, NULL, '2023-09-24 12:44:59'),
(21, '', 0, 0, NULL, NULL, 21, 0, NULL, '2023-09-24 12:44:59'),
(22, '', 0, 0, NULL, NULL, 22, 0, NULL, '2023-09-24 12:44:59'),
(23, '', 0, 0, NULL, NULL, 23, 0, NULL, '2023-09-24 12:44:59'),
(24, '', 0, 0, NULL, NULL, 24, 0, NULL, '2023-09-24 12:44:59'),
(25, '', 0, 0, NULL, NULL, 25, 0, NULL, '2023-09-24 12:44:59'),
(26, '', 0, 0, NULL, NULL, 26, 0, NULL, '2023-09-24 12:44:59'),
(27, '', 0, 0, NULL, NULL, 27, 0, NULL, '2023-09-24 12:44:59'),
(28, '', 0, 0, NULL, NULL, 28, 0, NULL, '2023-09-24 12:44:59'),
(29, '', 0, 0, NULL, NULL, 29, 0, NULL, '2023-09-24 12:44:59'),
(30, '', 0, 0, NULL, NULL, 30, 0, NULL, '2023-09-24 12:44:59'),
(31, '', 0, 0, NULL, NULL, 31, 0, NULL, '2023-09-24 12:44:59'),
(32, '', 0, 0, NULL, NULL, 32, 0, NULL, '2023-09-24 12:44:59'),
(33, '', 0, 0, NULL, NULL, 33, 0, NULL, '2023-09-24 12:44:59'),
(34, '', 0, 0, NULL, NULL, 34, 0, NULL, '2023-09-24 12:44:59'),
(35, '', 0, 0, NULL, NULL, 35, 0, NULL, '2023-09-24 12:44:59'),
(36, '', 0, 0, NULL, NULL, 36, 0, NULL, '2023-09-24 12:44:59'),
(37, '', 0, 0, NULL, NULL, 37, 0, NULL, '2023-09-24 12:44:59'),
(38, '', 0, 0, NULL, NULL, 38, 0, NULL, '2023-09-24 12:44:59'),
(39, '', 0, 0, NULL, NULL, 39, 0, NULL, '2023-09-24 12:44:59'),
(40, '', 0, 0, NULL, NULL, 40, 0, NULL, '2023-09-24 12:44:59'),
(41, '', 0, 0, NULL, NULL, 41, 0, NULL, '2023-09-24 12:44:59'),
(42, '', 0, 0, NULL, NULL, 42, 0, NULL, '2023-09-24 12:44:59'),
(43, '', 0, 0, NULL, NULL, 43, 0, NULL, '2023-09-24 12:44:59'),
(44, '', 0, 0, NULL, NULL, 44, 0, NULL, '2023-09-24 12:44:59'),
(45, '', 0, 0, NULL, NULL, 45, 0, NULL, '2023-09-24 12:44:59'),
(46, '', 0, 0, NULL, NULL, 46, 0, NULL, '2023-09-24 12:44:59'),
(47, '', 0, 0, NULL, NULL, 47, 0, NULL, '2023-09-24 12:44:59'),
(48, '', 0, 0, NULL, NULL, 48, 0, NULL, '2023-09-24 12:44:59'),
(49, '', 0, 0, NULL, NULL, 49, 0, NULL, '2023-09-24 12:44:59'),
(50, '', 0, 0, NULL, NULL, 50, 0, NULL, '2023-09-24 12:44:59'),
(51, '', 0, 0, NULL, NULL, 51, 0, NULL, '2023-09-24 12:44:59'),
(52, '', 0, 0, NULL, NULL, 52, 0, NULL, '2023-09-24 12:44:59'),
(53, '', 0, 0, NULL, NULL, 53, 0, NULL, '2023-09-24 12:44:59'),
(54, '', 0, 0, NULL, NULL, 54, 0, NULL, '2023-09-24 12:44:59'),
(55, '', 0, 0, NULL, NULL, 55, 0, NULL, '2023-09-24 12:44:59'),
(56, '', 0, 0, NULL, NULL, 56, 0, NULL, '2023-09-24 12:44:59'),
(57, '', 0, 0, NULL, NULL, 57, 0, NULL, '2023-09-24 12:44:59'),
(58, '', 0, 0, NULL, NULL, 58, 0, NULL, '2023-09-24 12:44:59'),
(59, '', 0, 0, NULL, NULL, 59, 0, NULL, '2023-09-24 12:44:59'),
(60, '', 0, 0, NULL, NULL, 60, 0, NULL, '2023-09-24 12:44:59'),
(61, '', 0, 0, NULL, NULL, 61, 0, NULL, '2023-09-24 12:45:00'),
(62, '', 0, 0, NULL, NULL, 62, 0, NULL, '2023-09-24 12:45:00'),
(63, '', 0, 0, NULL, NULL, 63, 0, NULL, '2023-09-24 12:45:00'),
(64, '', 0, 0, NULL, NULL, 64, 0, NULL, '2023-09-24 12:45:00'),
(65, '', 0, 0, NULL, NULL, 65, 0, NULL, '2023-09-24 12:45:00'),
(66, '', 0, 0, NULL, NULL, 66, 0, NULL, '2023-09-24 12:45:00'),
(67, '', 0, 0, NULL, NULL, 67, 0, NULL, '2023-09-24 12:45:00'),
(68, '', 0, 0, NULL, NULL, 68, 0, NULL, '2023-09-24 12:45:00'),
(69, '', 0, 0, NULL, NULL, 69, 0, NULL, '2023-09-24 12:45:00'),
(70, '', 0, 0, NULL, NULL, 70, 0, NULL, '2023-09-24 12:45:00'),
(71, '', 0, 0, NULL, NULL, 71, 0, NULL, '2023-09-24 12:45:00'),
(72, '', 0, 0, NULL, NULL, 72, 0, NULL, '2023-09-24 12:45:00'),
(73, '', 0, 0, NULL, NULL, 73, 0, NULL, '2023-09-24 12:45:00'),
(74, '', 0, 0, NULL, NULL, 74, 0, NULL, '2023-09-24 12:45:00'),
(75, '', 0, 0, NULL, NULL, 75, 0, NULL, '2023-09-24 12:45:00'),
(76, '', 0, 0, NULL, NULL, 76, 0, NULL, '2023-09-24 12:45:00'),
(77, '', 0, 0, NULL, NULL, 77, 0, NULL, '2023-09-24 12:45:00'),
(78, '', 0, 0, NULL, NULL, 78, 0, NULL, '2023-09-24 12:45:00'),
(79, '', 0, 0, NULL, NULL, 79, 0, NULL, '2023-09-24 12:45:00'),
(80, '', 0, 0, NULL, NULL, 80, 0, NULL, '2023-09-24 12:45:00'),
(81, '', 0, 0, NULL, NULL, 81, 0, NULL, '2023-09-24 12:45:00'),
(82, '', 0, 0, NULL, NULL, 82, 0, NULL, '2023-09-24 12:45:00'),
(83, '', 0, 0, NULL, NULL, 83, 0, NULL, '2023-09-24 12:45:00'),
(84, '', 0, 0, NULL, NULL, 84, 0, NULL, '2023-09-24 12:45:00'),
(85, '', 0, 0, NULL, NULL, 85, 0, NULL, '2023-09-24 12:45:00'),
(86, '', 0, 0, NULL, NULL, 86, 0, NULL, '2023-09-24 12:45:00'),
(87, '', 0, 0, NULL, NULL, 87, 0, NULL, '2023-09-24 12:45:00'),
(88, '', 0, 0, NULL, NULL, 88, 0, NULL, '2023-09-24 12:45:00'),
(89, '', 0, 0, NULL, NULL, 89, 0, NULL, '2023-09-24 12:45:00'),
(90, '', 0, 0, NULL, NULL, 90, 0, NULL, '2023-09-24 12:45:00'),
(91, '', 0, 0, NULL, NULL, 91, 0, NULL, '2023-09-24 12:45:00'),
(92, '', 0, 0, NULL, NULL, 92, 0, NULL, '2023-09-24 12:45:00'),
(93, '', 0, 0, NULL, NULL, 93, 0, NULL, '2023-09-24 12:45:00'),
(94, '', 0, 0, NULL, NULL, 94, 0, NULL, '2023-09-24 12:45:00'),
(95, '', 0, 0, NULL, NULL, 95, 0, NULL, '2023-09-24 12:45:00'),
(96, '', 0, 0, NULL, NULL, 96, 0, NULL, '2023-09-24 12:45:00'),
(97, '', 0, 0, NULL, NULL, 97, 0, NULL, '2023-09-24 12:45:00'),
(98, '', 0, 0, NULL, NULL, 98, 0, NULL, '2023-09-24 12:45:00'),
(99, '', 0, 0, NULL, NULL, 99, 0, NULL, '2023-09-24 12:45:01'),
(100, '', 0, 0, NULL, NULL, 100, 0, NULL, '2023-09-24 12:45:01'),
(101, '', 0, 0, NULL, NULL, 101, 0, NULL, '2023-09-24 12:45:01'),
(102, '', 0, 0, NULL, NULL, 102, 0, NULL, '2023-09-24 12:45:01'),
(103, '', 0, 0, NULL, NULL, 103, 0, NULL, '2023-09-24 12:45:01'),
(104, '', 0, 0, NULL, NULL, 104, 0, NULL, '2023-09-24 12:45:01'),
(105, '', 0, 0, NULL, NULL, 105, 0, NULL, '2023-09-24 12:45:02'),
(106, '', 0, 0, NULL, NULL, 106, 0, NULL, '2023-09-24 12:45:02'),
(107, '', 0, 0, NULL, NULL, 107, 0, NULL, '2023-09-24 12:45:02'),
(108, '', 0, 0, NULL, NULL, 108, 0, NULL, '2023-09-24 12:45:02'),
(109, '', 0, 0, NULL, NULL, 109, 0, NULL, '2023-09-24 12:45:02'),
(110, '', 0, 0, NULL, NULL, 110, 0, NULL, '2023-09-24 12:45:02'),
(111, '', 0, 0, NULL, NULL, 111, 0, NULL, '2023-09-24 12:45:02'),
(112, '', 0, 0, NULL, NULL, 112, 0, NULL, '2023-09-24 12:45:02'),
(113, '', 0, 0, NULL, NULL, 113, 0, NULL, '2023-09-24 12:45:02'),
(114, '', 0, 0, NULL, NULL, 114, 0, NULL, '2023-09-24 12:45:02'),
(115, '', 0, 0, NULL, NULL, 115, 0, NULL, '2023-09-24 12:45:02'),
(116, '', 0, 0, NULL, NULL, 116, 0, NULL, '2023-09-24 12:45:02'),
(117, '', 0, 0, NULL, NULL, 117, 0, NULL, '2023-09-24 12:45:02'),
(118, '', 0, 0, NULL, NULL, 118, 0, NULL, '2023-09-24 12:45:02'),
(119, '', 0, 0, NULL, NULL, 119, 0, NULL, '2023-09-24 12:45:02'),
(120, '', 0, 0, NULL, NULL, 120, 0, NULL, '2023-09-24 12:45:02');

-- --------------------------------------------------------

--
-- Table structure for table `question_types`
--

DROP TABLE IF EXISTS `question_types`;
CREATE TABLE IF NOT EXISTS `question_types` (
  `id` int(11) NOT NULL,
  `question_type` varchar(150) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `question_types`
--

INSERT INTO `question_types` (`id`, `question_type`) VALUES
(0, 'Multi answer (checkbox)'),
(3, 'Free text (textarea)'),
(4, 'Multi text (numbers only)'),
(1, 'One answer (radio button)');

-- --------------------------------------------------------

--
-- Table structure for table `quizzes`
--

DROP TABLE IF EXISTS `quizzes`;
CREATE TABLE IF NOT EXISTS `quizzes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cat_id` int(11) NOT NULL,
  `quiz_name` varchar(500) NOT NULL,
  `quiz_desc` varchar(500) NOT NULL,
  `added_date` datetime NOT NULL,
  `parent_id` int(11) NOT NULL,
  `show_intro` int(11) NOT NULL,
  `intro_text` varchar(3850) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `quizzes`
--

INSERT INTO `quizzes` (`id`, `cat_id`, `quiz_name`, `quiz_desc`, `added_date`, `parent_id`, `show_intro`, `intro_text`) VALUES
(1, 1, 'Assessment Test #001', 'Assessment Test #001', '2023-09-24 18:14:59', 0, 1, '<h2><b>Test Organized by</b></h2>\n<h2 style=\"border-bottom: 1px solid #F4F5F7;margin-bottom:5px;padding-bottom:5px;\"><span style=\"color:red\">Apt Training Resources</span></h2><h2><b>Total number of questions: 40 Questions</b></h2>\n<h2><b>Maximum Time Limit: 60 minutes</b></h2>\n<p style=\"border-top: 1px solid #F4F5F7;margin-top:5px;padding-top:5px;\">\nPlease click on the <b>Continue</b> button only after reading the instructions thoroughly.</p>\n<p><b><u>Instructions:</u></b></p>\n<p>1.For every question, click the answer option &amp; then click the <b>Save</b> button to save the answer for that particular question. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>2.Do not keep on pressing the <b>Save </b>button for the same question again &amp; again. Clicking once is enough.</p>\n<p>3.Clicking on the particular question number (available on the right side or bottom side) will take you directly to the particular question, but click it only after you have pressed the <b>Save </b>button for that question, that you are currently attending in the test.</p>\n<p>4.If after choosing the correct option, you click on the <b>Previous</b> button, instead of the <b>Save </b>button, even then answers will be saved. Don\'t worry.</p>\n<p>5.If you click the correct option and then click the <b>Question number link</b> in the right or in the bottom or if u click the <b>Instruction page link</b>, without pressing the <b>Save </b>button, answer won\'t be saved. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>6.If you exceed the time limit for the test, the answers for which u have clicked the <b>Save </b>button alone, will automatically be saved &amp; it will take you to the home page.</p>\n<p>7.If incase u want to check the remaining time available for u any time during the test, u can scroll up, to see the timer on the right top corner.</p>\n<p>8.Once you have finished the test, click the <b>Finish</b> button available in the top right corner.</p>'),
(2, 2, 'Assessment Test #002', 'Assessment Test #002', '2023-09-24 18:14:59', 0, 1, '<h2><b>Test Organized by</b></h2>\n<h2 style=\"border-bottom: 1px solid #F4F5F7;margin-bottom:5px;padding-bottom:5px;\"><span style=\"color:red\">Apt Training Resources</span></h2><h2><b>Total number of questions: 40 Questions</b></h2>\n<h2><b>Maximum Time Limit: 60 minutes</b></h2>\n<p style=\"border-top: 1px solid #F4F5F7;margin-top:5px;padding-top:5px;\">\nPlease click on the <b>Continue</b> button only after reading the instructions thoroughly.</p>\n<p><b><u>Instructions:</u></b></p>\n<p>1.For every question, click the answer option &amp; then click the <b>Save</b> button to save the answer for that particular question. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>2.Do not keep on pressing the <b>Save </b>button for the same question again &amp; again. Clicking once is enough.</p>\n<p>3.Clicking on the particular question number (available on the right side or bottom side) will take you directly to the particular question, but click it only after you have pressed the <b>Save </b>button for that question, that you are currently attending in the test.</p>\n<p>4.If after choosing the correct option, you click on the <b>Previous</b> button, instead of the <b>Save </b>button, even then answers will be saved. Don\'t worry.</p>\n<p>5.If you click the correct option and then click the <b>Question number link</b> in the right or in the bottom or if u click the <b>Instruction page link</b>, without pressing the <b>Save </b>button, answer won\'t be saved. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>6.If you exceed the time limit for the test, the answers for which u have clicked the <b>Save </b>button alone, will automatically be saved &amp; it will take you to the home page.</p>\n<p>7.If incase u want to check the remaining time available for u any time during the test, u can scroll up, to see the timer on the right top corner.</p>\n<p>8.Once you have finished the test, click the <b>Finish</b> button available in the top right corner.</p>'),
(3, 3, 'Assessment Test #003', 'Assessment Test #003', '2023-09-24 18:15:00', 0, 1, '<h2><b>Test Organized by</b></h2>\n<h2 style=\"border-bottom: 1px solid #F4F5F7;margin-bottom:5px;padding-bottom:5px;\"><span style=\"color:red\">Apt Training Resources</span></h2><h2><b>Total number of questions: 40 Questions</b></h2>\n<h2><b>Maximum Time Limit: 60 minutes</b></h2>\n<p style=\"border-top: 1px solid #F4F5F7;margin-top:5px;padding-top:5px;\">\nPlease click on the <b>Continue</b> button only after reading the instructions thoroughly.</p>\n<p><b><u>Instructions:</u></b></p>\n<p>1.For every question, click the answer option &amp; then click the <b>Save</b> button to save the answer for that particular question. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>2.Do not keep on pressing the <b>Save </b>button for the same question again &amp; again. Clicking once is enough.</p>\n<p>3.Clicking on the particular question number (available on the right side or bottom side) will take you directly to the particular question, but click it only after you have pressed the <b>Save </b>button for that question, that you are currently attending in the test.</p>\n<p>4.If after choosing the correct option, you click on the <b>Previous</b> button, instead of the <b>Save </b>button, even then answers will be saved. Don\'t worry.</p>\n<p>5.If you click the correct option and then click the <b>Question number link</b> in the right or in the bottom or if u click the <b>Instruction page link</b>, without pressing the <b>Save </b>button, answer won\'t be saved. Clicking on the <b>Save </b>button is essential for the answer to be saved.</p>\n<p>6.If you exceed the time limit for the test, the answers for which u have clicked the <b>Save </b>button alone, will automatically be saved &amp; it will take you to the home page.</p>\n<p>7.If incase u want to check the remaining time available for u any time during the test, u can scroll up, to see the timer on the right top corner.</p>\n<p>8.Once you have finished the test, click the <b>Finish</b> button available in the top right corner.</p>');

-- --------------------------------------------------------

--
-- Table structure for table `roles_rights`
--

DROP TABLE IF EXISTS `roles_rights`;
CREATE TABLE IF NOT EXISTS `roles_rights` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `role_id` int(11) DEFAULT NULL,
  `module_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `roles_rights`
--

INSERT INTO `roles_rights` (`Id`, `role_id`, `module_id`) VALUES
(1, 1, 2),
(2, 1, 3),
(3, 1, 4),
(4, 1, 6),
(5, 1, 7),
(12, 1, 12),
(11, 1, 11),
(9, 2, 9);

-- --------------------------------------------------------

--
-- Table structure for table `tcode_assess_base`
--

DROP TABLE IF EXISTS `tcode_assess_base`;
CREATE TABLE IF NOT EXISTS `tcode_assess_base` (
  `assess_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `assignment_name` varchar(250) NOT NULL,
  `group_id` bigint(20) UNSIGNED NOT NULL,
  `total_q` int(10) UNSIGNED NOT NULL DEFAULT 1,
  `total_score` int(10) UNSIGNED NOT NULL DEFAULT 3,
  `total_duration` int(10) UNSIGNED NOT NULL DEFAULT 30,
  `duration_per` int(10) UNSIGNED NOT NULL DEFAULT 1,
  `max_submissions` int(10) UNSIGNED NOT NULL DEFAULT 1,
  `is_to_suffle_q` tinyint(1) NOT NULL DEFAULT 1,
  `assignment_status` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `instructions` varchar(8000) NOT NULL DEFAULT ' ',
  `max_runs` int(10) UNSIGNED NOT NULL DEFAULT 3,
  PRIMARY KEY (`assess_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_assess_submit_q`
--

DROP TABLE IF EXISTS `tcode_assess_submit_q`;
CREATE TABLE IF NOT EXISTS `tcode_assess_submit_q` (
  `submit_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `assess_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `group_id` bigint(20) UNSIGNED NOT NULL,
  `question_id` bigint(20) UNSIGNED NOT NULL,
  `user_program` longtext NOT NULL,
  `q_secure_score` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `q_status` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `submit_no` int(10) UNSIGNED NOT NULL DEFAULT 1,
  `test_cases_haverun` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `number_of_runs` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `number_of_submits` int(10) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`submit_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_assess_submit_testcase`
--

DROP TABLE IF EXISTS `tcode_assess_submit_testcase`;
CREATE TABLE IF NOT EXISTS `tcode_assess_submit_testcase` (
  `submit_id` bigint(20) UNSIGNED NOT NULL,
  `assess_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `group_id` bigint(20) UNSIGNED NOT NULL,
  `question_id` bigint(20) UNSIGNED NOT NULL,
  `testcase_id` bigint(20) UNSIGNED NOT NULL,
  `user_output` varchar(2000) NOT NULL DEFAULT ' ',
  `case_status` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `testcase_secure_score` int(10) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`submit_id`,`testcase_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_assess_user`
--

DROP TABLE IF EXISTS `tcode_assess_user`;
CREATE TABLE IF NOT EXISTS `tcode_assess_user` (
  `assess_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `user_ass_status` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `user_secure_score` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `ass_start_date` datetime DEFAULT NULL,
  `ass_finish_date` datetime DEFAULT NULL,
  PRIMARY KEY (`assess_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_language`
--

DROP TABLE IF EXISTS `tcode_language`;
CREATE TABLE IF NOT EXISTS `tcode_language` (
  `lang_code` varchar(10) NOT NULL,
  `full_name` varchar(100) NOT NULL,
  `api_lang_name` varchar(100) NOT NULL,
  `api_version_no` varchar(100) NOT NULL,
  `default_program` varchar(1000) NOT NULL DEFAULT '#include<stdio.h>\r\nint main(){\r\n\r\n  return 0;\r\n}',
  PRIMARY KEY (`lang_code`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_level`
--

DROP TABLE IF EXISTS `tcode_level`;
CREATE TABLE IF NOT EXISTS `tcode_level` (
  `level_no` int(10) UNSIGNED NOT NULL,
  `level_name` varchar(100) NOT NULL,
  PRIMARY KEY (`level_no`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_q_base`
--

DROP TABLE IF EXISTS `tcode_q_base`;
CREATE TABLE IF NOT EXISTS `tcode_q_base` (
  `question_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `code_title` varchar(200) NOT NULL DEFAULT ' ',
  `code_question` varchar(8000) NOT NULL DEFAULT ' ',
  `lang_code` varchar(10) NOT NULL DEFAULT 'c',
  `level_no` int(10) UNSIGNED NOT NULL DEFAULT 2,
  `tested_program` longtext DEFAULT NULL,
  PRIMARY KEY (`question_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_q_group_base`
--

DROP TABLE IF EXISTS `tcode_q_group_base`;
CREATE TABLE IF NOT EXISTS `tcode_q_group_base` (
  `group_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `group_name` varchar(250) NOT NULL,
  PRIMARY KEY (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_q_group_q`
--

DROP TABLE IF EXISTS `tcode_q_group_q`;
CREATE TABLE IF NOT EXISTS `tcode_q_group_q` (
  `group_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `question_id` bigint(20) UNSIGNED NOT NULL,
  PRIMARY KEY (`group_id`,`question_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tcode_q_testcase`
--

DROP TABLE IF EXISTS `tcode_q_testcase`;
CREATE TABLE IF NOT EXISTS `tcode_q_testcase` (
  `testcase_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `question_id` bigint(20) UNSIGNED NOT NULL,
  `input` varchar(2000) NOT NULL DEFAULT ' ',
  `output` varchar(2000) NOT NULL DEFAULT ' ',
  `point` int(10) UNSIGNED NOT NULL DEFAULT 1,
  `sno` int(10) UNSIGNED NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`testcase_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `UserID` int(11) NOT NULL AUTO_INCREMENT,
  `UserName` varchar(50) NOT NULL,
  `Password` varchar(50) NOT NULL,
  `Name` varchar(150) NOT NULL,
  `Surname` varchar(150) NOT NULL,
  `added_date` datetime NOT NULL,
  `user_type` int(11) DEFAULT NULL,
  `email` varchar(200) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=216 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`UserID`, `UserName`, `Password`, `Name`, `Surname`, `added_date`, `user_type`, `email`) VALUES
(1, 'admin', 'baf71c021073a99609d073b6c7d2162a', 'admin', 'admin', '2011-10-27 12:02:06', 1, 'admin'),
(2, 'APT01', '486ec94022de2ba84a97e76c60e6dd89', 'APT01', '', '0000-00-00 00:00:00', NULL, NULL),
(3, 'APT02', '486ec94022de2ba84a97e76c60e6dd89', 'APT02', '', '0000-00-00 00:00:00', NULL, NULL),
(4, 'APT03', '486ec94022de2ba84a97e76c60e6dd89', 'APT03', '', '0000-00-00 00:00:00', NULL, NULL),
(5, 'APT04', '486ec94022de2ba84a97e76c60e6dd89', 'APT04', '', '0000-00-00 00:00:00', NULL, NULL),
(6, 'APT05', '486ec94022de2ba84a97e76c60e6dd89', 'APT05', '', '0000-00-00 00:00:00', NULL, NULL),
(7, 'APT06', '486ec94022de2ba84a97e76c60e6dd89', 'APT06', '', '0000-00-00 00:00:00', NULL, NULL),
(8, 'APT07', '486ec94022de2ba84a97e76c60e6dd89', 'APT07', '', '0000-00-00 00:00:00', NULL, NULL),
(9, 'APT08', '486ec94022de2ba84a97e76c60e6dd89', 'APT08', '', '0000-00-00 00:00:00', NULL, NULL),
(10, 'APT09', '486ec94022de2ba84a97e76c60e6dd89', 'APT09', '', '0000-00-00 00:00:00', NULL, NULL),
(11, 'APT10', '486ec94022de2ba84a97e76c60e6dd89', 'APT10', '', '0000-00-00 00:00:00', NULL, NULL),
(12, 'APT11', '486ec94022de2ba84a97e76c60e6dd89', 'APT11', '', '0000-00-00 00:00:00', NULL, NULL),
(13, 'APT12', '486ec94022de2ba84a97e76c60e6dd89', 'APT12', '', '0000-00-00 00:00:00', NULL, NULL),
(14, 'APT13', '486ec94022de2ba84a97e76c60e6dd89', 'APT13', '', '0000-00-00 00:00:00', NULL, NULL),
(15, 'APT14', '486ec94022de2ba84a97e76c60e6dd89', 'APT14', '', '0000-00-00 00:00:00', NULL, NULL),
(16, 'APT15', '486ec94022de2ba84a97e76c60e6dd89', 'APT15', '', '0000-00-00 00:00:00', NULL, NULL),
(17, 'APT16', '486ec94022de2ba84a97e76c60e6dd89', 'APT16', '', '0000-00-00 00:00:00', NULL, NULL),
(18, 'APT17', '486ec94022de2ba84a97e76c60e6dd89', 'APT17', '', '0000-00-00 00:00:00', NULL, NULL),
(19, 'APT18', '486ec94022de2ba84a97e76c60e6dd89', 'APT18', '', '0000-00-00 00:00:00', NULL, NULL),
(20, 'APT19', '486ec94022de2ba84a97e76c60e6dd89', 'APT19', '', '0000-00-00 00:00:00', NULL, NULL),
(21, 'APT20', '486ec94022de2ba84a97e76c60e6dd89', 'APT20', '', '0000-00-00 00:00:00', NULL, NULL),
(22, 'APT21', '486ec94022de2ba84a97e76c60e6dd89', 'APT21', '', '0000-00-00 00:00:00', NULL, NULL),
(23, 'APT22', '486ec94022de2ba84a97e76c60e6dd89', 'APT22', '', '0000-00-00 00:00:00', NULL, NULL),
(24, 'APT23', '486ec94022de2ba84a97e76c60e6dd89', 'APT23', '', '0000-00-00 00:00:00', NULL, NULL),
(25, 'APT24', '486ec94022de2ba84a97e76c60e6dd89', 'APT24', '', '0000-00-00 00:00:00', NULL, NULL),
(26, 'APT25', '486ec94022de2ba84a97e76c60e6dd89', 'APT25', '', '0000-00-00 00:00:00', NULL, NULL),
(27, 'DEVELOPER01', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER01', '', '0000-00-00 00:00:00', NULL, NULL),
(28, 'DEVELOPER02', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER02', '', '0000-00-00 00:00:00', NULL, NULL),
(29, 'DEVELOPER03', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER03', '', '0000-00-00 00:00:00', NULL, NULL),
(30, 'DEVELOPER04', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER04', '', '0000-00-00 00:00:00', NULL, NULL),
(31, 'DEVELOPER05', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER05', '', '0000-00-00 00:00:00', NULL, NULL),
(32, 'DEVELOPER06', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER06', '', '0000-00-00 00:00:00', NULL, NULL),
(33, 'DEVELOPER07', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER07', '', '0000-00-00 00:00:00', NULL, NULL),
(34, 'DEVELOPER08', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER08', '', '0000-00-00 00:00:00', NULL, NULL),
(35, 'DEVELOPER09', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER09', '', '0000-00-00 00:00:00', NULL, NULL),
(36, 'DEVELOPER10', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER10', '', '0000-00-00 00:00:00', NULL, NULL),
(37, 'DEVELOPER11', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER11', '', '0000-00-00 00:00:00', NULL, NULL),
(38, 'DEVELOPER12', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER12', '', '0000-00-00 00:00:00', NULL, NULL),
(39, 'DEVELOPER13', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER13', '', '0000-00-00 00:00:00', NULL, NULL),
(40, 'DEVELOPER14', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER14', '', '0000-00-00 00:00:00', NULL, NULL),
(41, 'DEVELOPER15', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER15', '', '0000-00-00 00:00:00', NULL, NULL),
(42, 'DEVELOPER16', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER16', '', '0000-00-00 00:00:00', NULL, NULL),
(43, 'DEVELOPER17', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER17', '', '0000-00-00 00:00:00', NULL, NULL),
(44, 'DEVELOPER18', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER18', '', '0000-00-00 00:00:00', NULL, NULL),
(45, 'DEVELOPER19', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER19', '', '0000-00-00 00:00:00', NULL, NULL),
(46, 'DEVELOPER20', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER20', '', '0000-00-00 00:00:00', NULL, NULL),
(47, 'DEVELOPER21', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER21', '', '0000-00-00 00:00:00', NULL, NULL),
(48, 'DEVELOPER22', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER22', '', '0000-00-00 00:00:00', NULL, NULL),
(49, 'DEVELOPER23', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER23', '', '0000-00-00 00:00:00', NULL, NULL),
(50, 'DEVELOPER24', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER24', '', '0000-00-00 00:00:00', NULL, NULL),
(51, 'DEVELOPER25', '7b7a53e239400a13bd6be6c91c4f6c4e', 'DEVELOPER25', '', '0000-00-00 00:00:00', NULL, NULL),
(52, 'SERVER01', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER01', '', '0000-00-00 00:00:00', NULL, NULL),
(53, 'SERVER02', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER02', '', '0000-00-00 00:00:00', NULL, NULL),
(54, 'SERVER03', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER03', '', '0000-00-00 00:00:00', NULL, NULL),
(55, 'SERVER04', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER04', '', '0000-00-00 00:00:00', NULL, NULL),
(56, 'SERVER05', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER05', '', '0000-00-00 00:00:00', NULL, NULL),
(57, 'SERVER06', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER06', '', '0000-00-00 00:00:00', NULL, NULL),
(58, 'SERVER07', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER07', '', '0000-00-00 00:00:00', NULL, NULL),
(59, 'SERVER08', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER08', '', '0000-00-00 00:00:00', NULL, NULL),
(60, 'SERVER09', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER09', '', '0000-00-00 00:00:00', NULL, NULL),
(61, 'SERVER10', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER10', '', '0000-00-00 00:00:00', NULL, NULL),
(62, 'SERVER11', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER11', '', '0000-00-00 00:00:00', NULL, NULL),
(63, 'SERVER12', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER12', '', '0000-00-00 00:00:00', NULL, NULL),
(64, 'SERVER13', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER13', '', '0000-00-00 00:00:00', NULL, NULL),
(65, 'SERVER14', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER14', '', '0000-00-00 00:00:00', NULL, NULL),
(66, 'SERVER15', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER15', '', '0000-00-00 00:00:00', NULL, NULL),
(67, 'SERVER16', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER16', '', '0000-00-00 00:00:00', NULL, NULL),
(68, 'SERVER17', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER17', '', '0000-00-00 00:00:00', NULL, NULL),
(69, 'SERVER18', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER18', '', '0000-00-00 00:00:00', NULL, NULL),
(70, 'SERVER19', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER19', '', '0000-00-00 00:00:00', NULL, NULL),
(71, 'SERVER20', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER20', '', '0000-00-00 00:00:00', NULL, NULL),
(72, 'SERVER21', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER21', '', '0000-00-00 00:00:00', NULL, NULL),
(73, 'SERVER22', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER22', '', '0000-00-00 00:00:00', NULL, NULL),
(74, 'SERVER23', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER23', '', '0000-00-00 00:00:00', NULL, NULL),
(75, 'SERVER24', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER24', '', '0000-00-00 00:00:00', NULL, NULL),
(76, 'SERVER25', 'da941ba5e4989ca468e0af6e0645a715', 'SERVER25', '', '0000-00-00 00:00:00', NULL, NULL),
(77, 'TN401', 'bd89ebdc8b92d79334dfaff595ad9d5b', 'TN401', '', '0000-00-00 00:00:00', NULL, NULL),
(78, 'TN402', '8c6dd287ecdce5553b7fe1fffa277e64', 'TN402', '', '0000-00-00 00:00:00', NULL, NULL),
(79, 'TN403', '7b4e0c2368580a04b794eaaa48ebdd3a', 'TN403', '', '0000-00-00 00:00:00', NULL, NULL),
(80, 'TN404', '47fbffe2ee565ccc2d7905b399a35b02', 'TN404', '', '0000-00-00 00:00:00', NULL, NULL),
(81, 'TN405', '33e48983d106b1de02d574a3d1bcfa77', 'TN405', '', '0000-00-00 00:00:00', NULL, NULL),
(82, 'TN406', '1e2eb6a686ce8d9d092a9b761b9e711c', 'TN406', '', '0000-00-00 00:00:00', NULL, NULL),
(83, 'TN407', 'd34825fee1be6b4ebde3251b16ea4927', 'TN407', '', '0000-00-00 00:00:00', NULL, NULL),
(84, 'TN408', '7777ffd6995f0543027ead85c2078c14', 'TN408', '', '0000-00-00 00:00:00', NULL, NULL),
(85, 'TN409', 'a766fabf6ca147e58f4ef8c21e1a84a9', 'TN409', '', '0000-00-00 00:00:00', NULL, NULL),
(86, 'TN410', '3b2ae03b92377a7f468a63ab871e0f8d', 'TN410', '', '0000-00-00 00:00:00', NULL, NULL),
(87, 'TN411', '68a797340a3872c242900b6f7875f4e3', 'TN411', '', '0000-00-00 00:00:00', NULL, NULL),
(88, 'TN412', '70fb2a389f4d1086745045f57fd33975', 'TN412', '', '0000-00-00 00:00:00', NULL, NULL),
(89, 'TN413', '09109fbd4418b6a9002515bfb8b71503', 'TN413', '', '0000-00-00 00:00:00', NULL, NULL),
(90, 'TN414', '74a24bbc86cddf3c512c24962cc861f7', 'TN414', '', '0000-00-00 00:00:00', NULL, NULL),
(91, 'TN415', '8b96643e5993df3d66fd57639bde7419', 'TN415', '', '0000-00-00 00:00:00', NULL, NULL),
(92, 'TN416', 'e53a44df986f5776b8d136811e9b9c99', 'TN416', '', '0000-00-00 00:00:00', NULL, NULL),
(93, 'TN417', '1b3b8305dbad21df3bafb32fca2e281f', 'TN417', '', '0000-00-00 00:00:00', NULL, NULL),
(94, 'TN418', 'cf4769e46d6936b3529932fccf23f7c4', 'TN418', '', '0000-00-00 00:00:00', NULL, NULL),
(95, 'TN419', '534ea73d069fb05ee107d22aca9ab8a1', 'TN419', '', '0000-00-00 00:00:00', NULL, NULL),
(96, 'TN420', 'b35ef211f2052bcecc0a8bfe62e8671b', 'TN420', '', '0000-00-00 00:00:00', NULL, NULL),
(97, 'TN421', '9c332edbb4c93c391516e1677892d869', 'TN421', '', '0000-00-00 00:00:00', NULL, NULL),
(98, 'TN422', 'e038e273961d46963c22147b736c13f9', 'TN422', '', '0000-00-00 00:00:00', NULL, NULL),
(99, 'TN423', '29f04ed9d85e99525592595f1729ccd0', 'TN423', '', '0000-00-00 00:00:00', NULL, NULL),
(100, 'TN424', '57fa5ce8e84ad93bee477ef5386ace65', 'TN424', '', '0000-00-00 00:00:00', NULL, NULL),
(101, 'TN425', 'be7e5057193bb9e3f33216206d003a36', 'TN425', '', '0000-00-00 00:00:00', NULL, NULL),
(102, 'TN426', '8538363b4f209cee6379403299753ac6', 'TN426', '', '0000-00-00 00:00:00', NULL, NULL),
(103, 'TN427', '4a1667bbb9d346b8453442a838c9bf84', 'TN427', '', '0000-00-00 00:00:00', NULL, NULL),
(104, 'TN428', '1acbcd6660ae4ff705ae2a58a062f035', 'TN428', '', '0000-00-00 00:00:00', NULL, NULL),
(105, 'TN429', '88817eabf4ecc80f0aed7f7e22fdc8c0', 'TN429', '', '0000-00-00 00:00:00', NULL, NULL),
(106, 'TN430', 'de70ed8af88fbbf30401143b3aa66ac8', 'TN430', '', '0000-00-00 00:00:00', NULL, NULL),
(107, 'TN431', 'adb85295cb55f314e0311892bc8993e6', 'TN431', '', '0000-00-00 00:00:00', NULL, NULL),
(108, 'TN432', 'f4e5de9d3d73a2923fd5a783049f3a5a', 'TN432', '', '0000-00-00 00:00:00', NULL, NULL),
(109, 'TN433', '01b4cff78e54d654943a1009a0e12915', 'TN433', '', '0000-00-00 00:00:00', NULL, NULL),
(110, 'TN434', 'f52a4898ec2a047ffad2ad5528815c71', 'TN434', '', '0000-00-00 00:00:00', NULL, NULL),
(111, 'TN435', '84cb21d522f7fa74c5838618b15199c0', 'TN435', '', '0000-00-00 00:00:00', NULL, NULL),
(112, 'TN436', 'c00ec7957886d8233131a142ad8f48de', 'TN436', '', '0000-00-00 00:00:00', NULL, NULL),
(113, 'TN437', 'e396c39ee5b5676908ae8c639500af90', 'TN437', '', '0000-00-00 00:00:00', NULL, NULL),
(114, 'TN438', '349ea43b9586b06c058d6feb8bc78219', 'TN438', '', '0000-00-00 00:00:00', NULL, NULL),
(115, 'TN439', '575c5d81b8c077c337945e69144363ea', 'TN439', '', '0000-00-00 00:00:00', NULL, NULL),
(116, 'TN440', '0a2069b904d4e3ed0805751d43c15e94', 'TN440', '', '0000-00-00 00:00:00', NULL, NULL),
(117, 'TN441', '8c541bb891561b663c121fe97920d0d0', 'TN441', '', '0000-00-00 00:00:00', NULL, NULL),
(118, 'TN442', '8d3735d64a7ab0e6246107db5704f7fd', 'TN442', '', '0000-00-00 00:00:00', NULL, NULL),
(119, 'TN443', '1999d2c4294eab2e3698b0588ec1dd2f', 'TN443', '', '0000-00-00 00:00:00', NULL, NULL),
(120, 'TN444', 'f5322920efe00f9df9914937e415da65', 'TN444', '', '0000-00-00 00:00:00', NULL, NULL),
(121, 'TN445', '08eb46e4ac7cfeb9913ebaf76c5842ee', 'TN445', '', '0000-00-00 00:00:00', NULL, NULL),
(122, 'TN446', '20ccf7df6fb83b37d4255200fa3f0d72', 'TN446', '', '0000-00-00 00:00:00', NULL, NULL),
(123, 'TN447', '70544babaa6af5d371a6e39f20ddf439', 'TN447', '', '0000-00-00 00:00:00', NULL, NULL),
(124, 'TN448', 'fac2f32d3dfc23805d23ce0b1f9ee0d9', 'TN448', '', '0000-00-00 00:00:00', NULL, NULL),
(125, 'TN449', '0b9829512d6a92525069563770542877', 'TN449', '', '0000-00-00 00:00:00', NULL, NULL),
(126, 'TN450', '9f0c4db840aead698ad2b85cf6664991', 'TN450', '', '0000-00-00 00:00:00', NULL, NULL),
(127, 'TN451', 'eb1504e75d9e8385f8355223e901805e', 'TN451', '', '0000-00-00 00:00:00', NULL, NULL),
(128, 'TN452', 'a117762026077b9aec2bdf60872534a0', 'TN452', '', '0000-00-00 00:00:00', NULL, NULL),
(129, 'TN453', '02ecb051e131b2a4ba7f162a960ffbc4', 'TN453', '', '0000-00-00 00:00:00', NULL, NULL),
(130, 'TN454', '914562d58adad1a8897cf6166b7e22c8', 'TN454', '', '0000-00-00 00:00:00', NULL, NULL),
(131, 'TN455', '00aad9c369e86bf994f73e9c6c8a2c39', 'TN455', '', '0000-00-00 00:00:00', NULL, NULL),
(132, 'TN456', '2752c7fe7e67eea74674fb43985807e3', 'TN456', '', '0000-00-00 00:00:00', NULL, NULL),
(133, 'TN457', 'a04ff4ffc71023dbceadb41a4473aaec', 'TN457', '', '0000-00-00 00:00:00', NULL, NULL),
(134, 'TN458', '42d110fd8ea81c963638b21630228efb', 'TN458', '', '0000-00-00 00:00:00', NULL, NULL),
(135, 'TN459', '6083ef48ca903b5d9c1d3311580d9e58', 'TN459', '', '0000-00-00 00:00:00', NULL, NULL),
(136, 'TN460', '666c8ac53edbc3452dcb01ef5a40542e', 'TN460', '', '0000-00-00 00:00:00', NULL, NULL),
(137, 'TN461', '0f743cc11f46737dba616cfd54c044e8', 'TN461', '', '0000-00-00 00:00:00', NULL, NULL),
(138, 'TN462', '78ded9a347b427ed40c45e6684c3d348', 'TN462', '', '0000-00-00 00:00:00', NULL, NULL),
(139, 'TN463', 'f313190d177b65eebe412091892c7534', 'TN463', '', '0000-00-00 00:00:00', NULL, NULL),
(140, 'TN464', '3a5c0e7b4a442e599c974d023536ddb1', 'TN464', '', '0000-00-00 00:00:00', NULL, NULL),
(141, 'TN465', '3d796257901e10eb5516debd201078b2', 'TN465', '', '0000-00-00 00:00:00', NULL, NULL),
(142, 'TN466', 'ca5fb30f70dbe4cf0cd7c3d2e879ecda', 'TN466', '', '0000-00-00 00:00:00', NULL, NULL),
(143, 'TN467', '21e505891a9c5da536e43277568619f1', 'TN467', '', '0000-00-00 00:00:00', NULL, NULL),
(144, 'TN468', 'd9aca3752a907e63cdc85925a72117aa', 'TN468', '', '0000-00-00 00:00:00', NULL, NULL),
(145, 'TN469', '537fc6033b0e58660c6ddc1c2095e57c', 'TN469', '', '0000-00-00 00:00:00', NULL, NULL),
(146, 'TN470', 'b480b4f4cf829019b73510d9cade35af', 'TN470', '', '0000-00-00 00:00:00', NULL, NULL),
(147, 'TN471', '724555a044d016904f0748c2b4a004c3', 'TN471', '', '0000-00-00 00:00:00', NULL, NULL),
(148, 'TN472', '029d12fb2e945f2278b49701fa65e8ad', 'TN472', '', '0000-00-00 00:00:00', NULL, NULL),
(149, 'TN473', '500bc8a0367d1dc09d0fc13bbc590177', 'TN473', '', '0000-00-00 00:00:00', NULL, NULL),
(150, 'TN474', 'cf98ca59c083f14c3117d8db340e4933', 'TN474', '', '0000-00-00 00:00:00', NULL, NULL),
(151, 'TN475', '2a8078d9f71166f9820b61c45846313b', 'TN475', '', '0000-00-00 00:00:00', NULL, NULL),
(152, 'TN476', '05d25a3b88634d4b3f82b72398c79921', 'TN476', '', '0000-00-00 00:00:00', NULL, NULL),
(153, 'TN477', 'c7fcb262663f80925bfda0b0fca13db3', 'TN477', '', '0000-00-00 00:00:00', NULL, NULL),
(154, 'TN478', '23af34d7db3cbcda1ffdf9e44a39efbe', 'TN478', '', '0000-00-00 00:00:00', NULL, NULL),
(155, 'TN479', '13c214824dd3131e4f5c423e15a77482', 'TN479', '', '0000-00-00 00:00:00', NULL, NULL),
(156, 'TN480', '3bd5dad706b0cbd5cfe21fc36631e400', 'TN480', '', '0000-00-00 00:00:00', NULL, NULL),
(157, 'TN481', '987b568eb0a0a8f6258ced2bb977daa0', 'TN481', '', '0000-00-00 00:00:00', NULL, NULL),
(158, 'TN482', '0cb83de5893025d5aba9b49aa6c77c89', 'TN482', '', '0000-00-00 00:00:00', NULL, NULL),
(159, 'TN483', 'f574a49d7b92de1f2ec5c438de345a86', 'TN483', '', '0000-00-00 00:00:00', NULL, NULL),
(160, 'TN484', '040f39a4474ae25376f0b4eaee008086', 'TN484', '', '0000-00-00 00:00:00', NULL, NULL),
(161, 'TN485', 'bb2544ef8087f1ae4198d4d184aaee9a', 'TN485', '', '0000-00-00 00:00:00', NULL, NULL),
(162, 'TN486', 'b8aec226e99196f462b73b5e8533004d', 'TN486', '', '0000-00-00 00:00:00', NULL, NULL),
(163, 'TN487', 'c4d24cca4c95f54c3f6326474612f648', 'TN487', '', '0000-00-00 00:00:00', NULL, NULL),
(164, 'TN488', '2669cfcfb6da57ea53e860ee0df3eef8', 'TN488', '', '0000-00-00 00:00:00', NULL, NULL),
(165, 'TN489', '8f67087cbe8ea8a4e8335f39010af85f', 'TN489', '', '0000-00-00 00:00:00', NULL, NULL),
(166, 'TN490', 'c18b08880c81fc2bd515d76b1bb7f279', 'TN490', '', '0000-00-00 00:00:00', NULL, NULL),
(167, 'TN491', '9fbb0060ffedd7e390c31eacfc74ffc7', 'TN491', '', '0000-00-00 00:00:00', NULL, NULL),
(168, 'TN492', '76f8d92b21780710185558db64b9fbb6', 'TN492', '', '0000-00-00 00:00:00', NULL, NULL),
(169, 'TN493', '2806289ae527d4425f902b7f86058d05', 'TN493', '', '0000-00-00 00:00:00', NULL, NULL),
(170, 'TN494', '496f565b4f4e08d9fe7b5882bb20e563', 'TN494', '', '0000-00-00 00:00:00', NULL, NULL),
(171, 'TN495', 'dce58c3fc62a5a41bce89170021f02be', 'TN495', '', '0000-00-00 00:00:00', NULL, NULL),
(172, 'TN496', '77c4335a4a25a76b3d42874d30117c9b', 'TN496', '', '0000-00-00 00:00:00', NULL, NULL),
(173, 'TN497', '7490ca0817222c2879145f4fd96f4bba', 'TN497', '', '0000-00-00 00:00:00', NULL, NULL),
(174, 'TN498', '67b4b1936a3154d87a69cd5584c2e7c2', 'TN498', '', '0000-00-00 00:00:00', NULL, NULL),
(175, 'TN499', '76e6c9013304f11697ac6cc1a05ad364', 'TN499', '', '0000-00-00 00:00:00', NULL, NULL),
(176, 'TN500', '6c02734ffdfe37bb3befa142e16297fe', 'TN500', '', '0000-00-00 00:00:00', NULL, NULL),
(177, 'B1', '08480d963cac5e0017e0d215c9604ee1', 'Ashik C', '', '0000-00-00 00:00:00', NULL, NULL),
(178, 'B2', 'd4caeaf84735b99ab20682e05a667847', 'Balakrishnan C', '', '0000-00-00 00:00:00', NULL, NULL),
(179, 'B3', '9b07a26454e53e8e0a49a5cd02cf4a65', 'Bhadriprasath B J', '', '0000-00-00 00:00:00', NULL, NULL),
(180, 'B4', '6ee719ac045a643d079673ea77c69c60', 'Dharun K', '', '0000-00-00 00:00:00', NULL, NULL),
(181, 'B5', '46b6565e266daa3b9894d0daa0cabac1', 'Gokulraja R', '', '0000-00-00 00:00:00', NULL, NULL),
(182, 'B6', 'c874ed4aa74a3f705f38ecc7d3a6a708', 'Gnanavel P', '', '0000-00-00 00:00:00', NULL, NULL),
(183, 'B7', 'f3edec4d8c0f106c3a10ebeb809f4ddd', 'Kaviyarasan P', '', '0000-00-00 00:00:00', NULL, NULL),
(184, 'B8', '1814f3909c10d583c0cb930606ce872b', 'Kishoreanand M', '', '0000-00-00 00:00:00', NULL, NULL),
(185, 'B9', '56367062a4816c8e507959e6aae267a4', 'Muralikkrishnan S', '', '0000-00-00 00:00:00', NULL, NULL),
(186, 'B10', 'ba071e384dbde17be6c21787b276c5d4', 'Nigesh G', '', '0000-00-00 00:00:00', NULL, NULL),
(187, 'B11', 'c1328d96754f0c2684437eb0deb76bb0', 'Poopathiraja Periyasamy', '', '0000-00-00 00:00:00', NULL, NULL),
(188, 'B12', '4db206655055be5c2df09105cca225b2', 'Praveen A', '', '0000-00-00 00:00:00', NULL, NULL),
(189, 'B13', 'db64ce9244f12fbef8c4c33f8d677ea2', 'Rithish Kumar K', '', '0000-00-00 00:00:00', NULL, NULL),
(190, 'B14', '241bb16c78eae30a71ba7e680b7e499e', 'Sanjai R', '', '0000-00-00 00:00:00', NULL, NULL),
(191, 'B15', '6e65f82123c7497199db3bb13498997d', 'Sanjay M J', '', '0000-00-00 00:00:00', NULL, NULL),
(192, 'B16', '6c247fd3455f1564fad95fcac771abf6', 'Sanjay P', '', '0000-00-00 00:00:00', NULL, NULL),
(193, 'B17', 'ad7115f9327079a00554472138b05d8a', 'Sanjay S', '', '0000-00-00 00:00:00', NULL, NULL),
(194, 'B18', '8e0ed90863660cdbaf86f74630c0dbd1', 'Sanjev K M', '', '0000-00-00 00:00:00', NULL, NULL),
(195, 'B19', 'b89c8b225bab8b7cf1502e3c516229ae', 'Santhosh Kumar B', '', '0000-00-00 00:00:00', NULL, NULL),
(196, 'B20', '028127deec43b917964e50497f007334', 'Sathish Kumar K', '', '0000-00-00 00:00:00', NULL, NULL),
(197, 'B21', 'a16664c1f097b8d7380a6869ab1637f7', 'Shabarivasan G K', '', '0000-00-00 00:00:00', NULL, NULL),
(198, 'B22', '23d97814462594debed77702453aff02', 'Soundarrajan A', '', '0000-00-00 00:00:00', NULL, NULL),
(199, 'B23', '1c949970d569360a15106f20751f8eee', 'Sriganth R', '', '0000-00-00 00:00:00', NULL, NULL),
(200, 'B24', '407d69dfd3a175add3373675088d64be', 'Sujeet P', '', '0000-00-00 00:00:00', NULL, NULL),
(201, 'B25', 'c5b2a066e38cebab29df07db82cd281a', 'Vimalraj S', '', '0000-00-00 00:00:00', NULL, NULL),
(202, 'B26', '9520071ea96ee96e9778180c79fe2769', 'Prabu  S', '', '0000-00-00 00:00:00', NULL, NULL),
(203, 'B27', 'a3260ee2b2530047657bf3034b0beb58', 'Nandhini Vekatesan', '', '0000-00-00 00:00:00', NULL, NULL),
(204, 'B28', 'deb8580c702aed4695b0df2c44c210dc', 'Rishinath A', '', '0000-00-00 00:00:00', NULL, NULL),
(205, 'B29', '4b69bb0ad4d323b68531645134807a1f', 'Aravinth N', '', '0000-00-00 00:00:00', NULL, NULL),
(206, 'B30', 'e21cf6c7e23a1a749bf7562c5ee164f6', 'Dharun M P', '', '0000-00-00 00:00:00', NULL, NULL),
(207, 'B31', 'd6c0d66e16a8f81419a98a4630623c02', 'Giriharan S', '', '0000-00-00 00:00:00', NULL, NULL),
(208, 'B32', 'f7966d36c36686122d47f87043912401', 'Harina V B', '', '0000-00-00 00:00:00', NULL, NULL),
(209, 'B33', 'e3a60eb147c9fd595f4d58423f204fb7', 'Jayashree A', '', '0000-00-00 00:00:00', NULL, NULL),
(210, 'B34', '56d94b8e69b6d19321e267058959d180', 'Jeyakrishna G', '', '0000-00-00 00:00:00', NULL, NULL),
(211, 'B35', '58ba84493c3067dbfbadd3af699a53f6', 'Kaniska P', '', '0000-00-00 00:00:00', NULL, NULL),
(212, 'B36', '6c365e450218daffb9e52b1dd324ef5e', 'Kiruthika S', '', '0000-00-00 00:00:00', NULL, NULL),
(213, 'B37', '13fc17be8512a56d342d460668e135f8', 'Madhavan Sv', '', '0000-00-00 00:00:00', NULL, NULL),
(214, 'B38', 'ae9d3d9eb54cf2c4f3ab90b9bf8d8ddb', 'Prasanth R', '', '0000-00-00 00:00:00', NULL, NULL),
(215, 'B39', 'b7afe6f38ade623f643c2ac049c182b6', 'Sivaranjani P', '', '0000-00-00 00:00:00', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `user_answers`
--

DROP TABLE IF EXISTS `user_answers`;
CREATE TABLE IF NOT EXISTS `user_answers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_quiz_id` int(11) DEFAULT NULL,
  `question_id` int(11) DEFAULT NULL,
  `answer_id` int(11) DEFAULT NULL,
  `user_answer_id` int(11) DEFAULT NULL,
  `user_answer_text` varchar(3800) DEFAULT NULL,
  `added_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1159 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `user_answers`
--

INSERT INTO `user_answers` (`id`, `user_quiz_id`, `question_id`, `answer_id`, `user_answer_id`, `user_answer_text`, `added_date`) VALUES
(1, 1, 21, 102, 102, NULL, '2023-09-24 18:34:52'),
(2, 1, 39, 194, 194, NULL, '2023-09-24 18:35:20'),
(3, 1, 22, 106, 106, NULL, '2023-09-24 18:35:47'),
(4, 1, 8, 36, 36, NULL, '2023-09-24 18:36:18'),
(5, 1, 17, 82, 82, NULL, '2023-09-24 18:39:20'),
(6, 1, 37, 181, 181, NULL, '2023-09-24 18:45:46'),
(7, 1, 35, 172, 172, NULL, '2023-09-24 18:46:55'),
(8, 1, 3, 14, 14, NULL, '2023-09-24 18:48:14'),
(9, 1, 30, 146, 146, NULL, '2023-09-24 18:48:26'),
(10, 1, 16, 78, 78, NULL, '2023-09-24 18:48:36'),
(11, 1, 26, 126, 126, NULL, '2023-09-24 18:48:50'),
(12, 1, 20, 100, 100, NULL, '2023-09-24 18:49:06'),
(13, 1, 38, 186, 186, NULL, '2023-09-24 18:49:53'),
(14, 1, 1, 2, 2, NULL, '2023-09-24 18:50:04'),
(15, 1, 14, 69, 69, NULL, '2023-09-24 18:51:20'),
(16, 1, 4, 16, 16, NULL, '2023-09-24 18:51:56'),
(17, 1, 18, 86, 86, NULL, '2023-09-24 18:52:43'),
(18, 1, 31, 151, 151, NULL, '2023-09-24 18:53:10'),
(19, 1, 33, 162, 162, NULL, '2023-09-24 18:53:57'),
(20, 1, 24, 118, 118, NULL, '2023-09-24 18:55:03'),
(21, 1, 7, 33, 33, NULL, '2023-09-24 18:55:46'),
(22, 1, 12, 58, 58, NULL, '2023-09-24 18:56:40'),
(23, 1, 28, 138, 138, NULL, '2023-09-24 18:56:46'),
(24, 1, 40, 197, 197, NULL, '2023-09-24 18:56:51'),
(25, 1, 25, 122, 122, NULL, '2023-09-24 18:56:55'),
(26, 1, 2, 7, 7, NULL, '2023-09-24 18:57:10'),
(27, 1, 9, 45, 45, NULL, '2023-09-24 18:57:37'),
(28, 1, 13, 61, 61, NULL, '2023-09-24 18:57:52'),
(29, 1, 11, 54, 54, NULL, '2023-09-24 18:58:03'),
(30, 1, 5, 21, 21, NULL, '2023-09-24 18:58:31'),
(31, 1, 32, 156, 156, NULL, '2023-09-24 18:58:40'),
(32, 1, 29, 141, 141, NULL, '2023-09-24 18:58:46'),
(33, 1, 27, 133, 133, NULL, '2023-09-24 18:58:56'),
(34, 1, 34, 168, 168, NULL, '2023-09-24 18:58:58'),
(35, 1, 10, 46, 46, NULL, '2023-09-24 18:59:03'),
(36, 1, 19, 92, 92, NULL, '2023-09-24 18:59:06'),
(37, 1, 15, 71, 71, NULL, '2023-09-24 18:59:15'),
(38, 1, 36, 178, 178, NULL, '2023-09-24 18:59:22'),
(39, 1, 23, 113, 113, NULL, '2023-09-24 18:59:28'),
(40, 1, 6, 28, 28, NULL, '2023-09-24 18:59:32'),
(41, 2, 15, 72, 72, NULL, '2023-09-24 19:06:30'),
(42, 2, 5, 21, 21, NULL, '2023-09-24 19:08:13'),
(43, 2, 20, 96, 96, NULL, '2023-09-24 19:08:53'),
(44, 2, 26, 126, 126, NULL, '2023-09-24 19:09:21'),
(45, 2, 40, 197, 197, NULL, '2023-09-24 19:09:49'),
(46, 2, 17, 82, 82, NULL, '2023-09-24 19:10:51'),
(47, 2, 33, 162, 162, NULL, '2023-09-24 19:11:44'),
(48, 2, 18, 90, 90, NULL, '2023-09-24 19:13:21'),
(49, 2, 31, 151, 151, NULL, '2023-09-24 19:13:51'),
(50, 2, 7, 33, 33, NULL, '2023-09-24 19:14:27'),
(51, 2, 12, 58, 58, NULL, '2023-09-24 19:14:59'),
(52, 2, 24, 118, 118, NULL, '2023-09-24 19:15:30'),
(53, 2, 39, 193, 193, NULL, '2023-09-24 19:16:12'),
(54, 2, 38, 186, 186, NULL, '2023-09-24 19:16:47'),
(55, 2, 10, 47, 47, NULL, '2023-09-24 19:17:40'),
(56, 2, 3, 12, 12, NULL, '2023-09-24 19:18:26'),
(57, 2, 16, 78, 78, NULL, '2023-09-24 19:19:05'),
(58, 2, 22, 107, 107, NULL, '2023-09-24 19:19:43'),
(59, 2, 35, 175, 175, NULL, '2023-09-24 19:20:14'),
(60, 2, 25, 123, 123, NULL, '2023-09-24 19:20:39'),
(61, 2, 37, 185, 185, NULL, '2023-09-24 19:21:24'),
(62, 2, 29, 144, 144, NULL, '2023-09-24 19:21:51'),
(63, 2, 6, 28, 28, NULL, '2023-09-24 19:22:29'),
(64, 2, 30, 146, 146, NULL, '2023-09-24 19:23:09'),
(65, 2, 4, 16, 16, NULL, '2023-09-24 19:23:44'),
(66, 2, 32, 158, 158, NULL, '2023-09-24 19:24:11'),
(67, 2, 1, 2, 2, NULL, '2023-09-24 19:24:41'),
(68, 2, 27, 132, 132, NULL, '2023-09-24 19:25:17'),
(69, 2, 13, 61, 61, NULL, '2023-09-24 19:25:45'),
(70, 2, 21, 102, 102, NULL, '2023-09-24 19:26:16'),
(71, 2, 34, 169, 169, NULL, '2023-09-24 19:26:49'),
(72, 2, 8, 36, 36, NULL, '2023-09-24 19:27:25'),
(73, 2, 11, 52, 52, NULL, '2023-09-24 19:27:55'),
(74, 2, 2, 7, 7, NULL, '2023-09-24 19:28:25'),
(75, 2, 28, 138, 138, NULL, '2023-09-24 19:29:05'),
(76, 2, 9, 45, 45, NULL, '2023-09-24 19:29:46'),
(77, 3, 28, 136, 136, NULL, '2023-09-24 19:30:04'),
(78, 2, 36, 180, 180, NULL, '2023-09-24 19:30:11'),
(79, 3, 15, 75, 75, NULL, '2023-09-24 19:30:17'),
(80, 2, 23, 112, 112, NULL, '2023-09-24 19:30:44'),
(81, 3, 5, 24, 24, NULL, '2023-09-24 19:30:45'),
(82, 3, 7, 34, 34, NULL, '2023-09-24 19:30:56'),
(83, 2, 14, 68, 68, NULL, '2023-09-24 19:31:24'),
(84, 2, 19, 91, 91, NULL, '2023-09-24 19:31:55'),
(85, 3, 3, 14, 14, NULL, '2023-09-24 19:32:21'),
(86, 3, 31, 155, 155, NULL, '2023-09-24 19:33:00'),
(87, 3, 35, 171, 171, NULL, '2023-09-24 19:35:07'),
(88, 3, 12, 58, 58, NULL, '2023-09-24 19:36:34'),
(89, 3, 36, 180, 180, NULL, '2023-09-24 19:37:01'),
(90, 3, 39, 194, 194, NULL, '2023-09-24 19:37:21'),
(91, 3, 19, 91, 91, NULL, '2023-09-24 19:39:31'),
(92, 3, 21, 102, 102, NULL, '2023-09-24 19:39:51'),
(93, 3, 8, 38, 38, NULL, '2023-09-24 19:41:21'),
(94, 3, 1, 4, 4, NULL, '2023-09-24 19:42:21'),
(95, 3, 26, 126, 126, NULL, '2023-09-24 19:42:49'),
(96, 3, 23, 112, 112, NULL, '2023-09-24 19:43:17'),
(97, 3, 6, 27, 27, NULL, '2023-09-24 19:43:44'),
(98, 4, 29, 141, 141, NULL, '2023-09-24 19:44:05'),
(99, 5, 29, 141, 141, NULL, '2023-09-24 19:44:11'),
(100, 4, 1, 2, 2, NULL, '2023-09-24 19:44:38'),
(101, 4, 40, 197, 197, NULL, '2023-09-24 19:45:09'),
(102, 3, 4, 16, 16, NULL, '2023-09-24 19:45:33'),
(103, 3, 27, 131, 131, NULL, '2023-09-24 19:45:52'),
(104, 4, 38, 186, 186, NULL, '2023-09-24 19:46:02'),
(105, 4, 20, 98, 98, NULL, '2023-09-24 19:46:38'),
(106, 3, 29, 141, 141, NULL, '2023-09-24 19:46:42'),
(107, 4, 32, 158, 158, NULL, '2023-09-24 19:46:55'),
(108, 5, 37, 185, 185, NULL, '2023-09-24 19:47:06'),
(109, 3, 9, 45, 45, NULL, '2023-09-24 19:47:14'),
(110, 4, 36, 180, 180, NULL, '2023-09-24 19:47:31'),
(111, 3, 33, 162, 162, NULL, '2023-09-24 19:47:38'),
(112, 4, 33, 162, 162, NULL, '2023-09-24 19:47:58'),
(113, 3, 13, 61, 61, NULL, '2023-09-24 19:48:08'),
(114, 5, 26, 128, 128, NULL, '2023-09-24 19:48:26'),
(115, 4, 28, 138, 138, NULL, '2023-09-24 19:48:46'),
(116, 5, 16, 80, 80, NULL, '2023-09-24 19:48:50'),
(117, 4, 14, 69, 69, NULL, '2023-09-24 19:49:25'),
(118, 5, 2, 7, 7, NULL, '2023-09-24 19:49:44'),
(119, 3, 22, 106, 106, NULL, '2023-09-24 19:49:47'),
(120, 4, 31, 151, 151, NULL, '2023-09-24 19:49:48'),
(121, 3, 37, 185, 185, NULL, '2023-09-24 19:50:03'),
(122, 4, 27, 131, 131, NULL, '2023-09-24 19:50:14'),
(123, 6, 14, 69, 69, NULL, '2023-09-24 19:50:36'),
(124, 5, 35, 171, 171, NULL, '2023-09-24 19:50:39'),
(125, 3, 11, 54, 54, NULL, '2023-09-24 19:50:41'),
(126, 3, 25, 123, 123, NULL, '2023-09-24 19:51:01'),
(127, 4, 26, 126, 126, NULL, '2023-09-24 19:51:05'),
(128, 6, 26, 126, 126, NULL, '2023-09-24 19:51:41'),
(129, 4, 9, 45, 45, NULL, '2023-09-24 19:51:43'),
(130, 4, 13, 61, 61, NULL, '2023-09-24 19:52:14'),
(131, 5, 11, 52, 52, NULL, '2023-09-24 19:52:38'),
(132, 5, 34, 167, 167, NULL, '2023-09-24 19:52:48'),
(133, 4, 15, 74, 74, NULL, '2023-09-24 19:52:50'),
(134, 5, 10, 50, 50, NULL, '2023-09-24 19:53:31'),
(135, 4, 16, 78, 78, NULL, '2023-09-24 19:53:34'),
(136, 6, 40, 197, 197, NULL, '2023-09-24 19:53:41'),
(137, 3, 40, 198, 198, NULL, '2023-09-24 19:53:47'),
(138, 3, 16, 79, 79, NULL, '2023-09-24 19:54:05'),
(139, 4, 35, 174, 174, NULL, '2023-09-24 19:54:16'),
(140, 6, 10, 47, 47, NULL, '2023-09-24 19:54:29'),
(141, 3, 18, 89, 89, NULL, '2023-09-24 19:54:36'),
(142, 3, 38, 190, 190, NULL, '2023-09-24 19:54:50'),
(143, 3, 14, 69, 69, NULL, '2023-09-24 19:55:15'),
(144, 4, 18, 90, 90, NULL, '2023-09-24 19:55:25'),
(145, 6, 17, 82, 82, NULL, '2023-09-24 19:55:28'),
(146, 3, 10, 49, 49, NULL, '2023-09-24 19:55:37'),
(147, 4, 23, 112, 112, NULL, '2023-09-24 19:55:43'),
(148, 3, 32, 158, 158, NULL, '2023-09-24 19:56:05'),
(149, 4, 8, 36, 36, NULL, '2023-09-24 19:56:13'),
(150, 5, 13, 61, 61, NULL, '2023-09-24 19:56:34'),
(151, 3, 34, 168, 168, NULL, '2023-09-24 19:56:54'),
(152, 4, 3, 15, 15, NULL, '2023-09-24 19:57:11'),
(153, 4, 24, 118, 118, NULL, '2023-09-24 19:57:32'),
(154, 3, 24, 118, 118, NULL, '2023-09-24 19:57:33'),
(155, 6, 31, 154, 154, NULL, '2023-09-24 19:57:39'),
(156, 5, 14, 69, 69, NULL, '2023-09-24 19:57:40'),
(157, 5, 22, 106, 106, NULL, '2023-09-24 19:57:48'),
(158, 4, 6, 29, 29, NULL, '2023-09-24 19:58:02'),
(159, 4, 7, 32, 32, NULL, '2023-09-24 19:58:32'),
(160, 5, 4, 16, 16, NULL, '2023-09-24 19:58:37'),
(161, 5, 38, 189, 189, NULL, '2023-09-24 19:58:47'),
(162, 3, 20, 99, 99, NULL, '2023-09-24 19:58:54'),
(163, 3, 17, 83, 83, NULL, '2023-09-24 19:59:01'),
(164, 3, 2, 8, 8, NULL, '2023-09-24 19:59:37'),
(165, 6, 34, 169, 169, NULL, '2023-09-24 19:59:38'),
(166, 3, 30, 147, 147, NULL, '2023-09-24 19:59:47'),
(167, 5, 6, 26, 26, NULL, '2023-09-24 19:59:50'),
(168, 4, 5, 22, 22, NULL, '2023-09-24 19:59:55'),
(169, 5, 31, 154, 154, NULL, '2023-09-24 20:00:24'),
(170, 6, 22, 107, 107, NULL, '2023-09-24 20:00:29'),
(171, 4, 11, 53, 53, NULL, '2023-09-24 20:00:38'),
(172, 4, 12, 58, 58, NULL, '2023-09-24 20:01:07'),
(173, 6, 8, 36, 36, NULL, '2023-09-24 20:01:31'),
(174, 6, 23, 112, 112, NULL, '2023-09-24 20:01:38'),
(175, 4, 19, 91, 91, NULL, '2023-09-24 20:01:49'),
(176, 5, 17, 85, 85, NULL, '2023-09-24 20:02:13'),
(177, 4, 34, 168, 168, NULL, '2023-09-24 20:02:35'),
(178, 4, 21, 102, 102, NULL, '2023-09-24 20:02:58'),
(179, 5, 36, 180, 180, NULL, '2023-09-24 20:03:01'),
(180, 6, 33, 162, 162, NULL, '2023-09-24 20:03:10'),
(181, 4, 25, 123, 123, NULL, '2023-09-24 20:03:13'),
(182, 4, 2, 7, 7, NULL, '2023-09-24 20:03:43'),
(183, 4, 4, 16, 16, NULL, '2023-09-24 20:04:13'),
(184, 5, 7, 35, 35, NULL, '2023-09-24 20:04:16'),
(185, 4, 39, 194, 194, NULL, '2023-09-24 20:04:33'),
(186, 4, 17, 82, 82, NULL, '2023-09-24 20:05:17'),
(187, 6, 5, 23, 23, NULL, '2023-09-24 20:05:20'),
(188, 4, 10, 47, 47, NULL, '2023-09-24 20:05:48'),
(189, 5, 18, 90, 90, NULL, '2023-09-24 20:05:55'),
(190, 6, 29, 141, 141, NULL, '2023-09-24 20:06:00'),
(191, 4, 37, 181, 181, NULL, '2023-09-24 20:06:37'),
(192, 5, 33, 162, 162, NULL, '2023-09-24 20:06:50'),
(193, 4, 30, 146, 146, NULL, '2023-09-24 20:07:20'),
(194, 6, 3, 11, 11, NULL, '2023-09-24 20:07:51'),
(195, 6, 25, 123, 123, NULL, '2023-09-24 20:07:55'),
(196, 4, 22, 106, 106, NULL, '2023-09-24 20:08:22'),
(197, 6, 12, 58, 58, NULL, '2023-09-24 20:08:32'),
(198, 5, 5, 24, 24, NULL, '2023-09-24 20:08:57'),
(199, 7, 5, 25, 25, NULL, '2023-09-24 20:09:01'),
(200, 5, 32, 158, 158, NULL, '2023-09-24 20:09:15'),
(201, 5, 24, 117, 117, NULL, '2023-09-24 20:09:32'),
(202, 7, 23, 112, 112, NULL, '2023-09-24 20:09:50'),
(203, 7, 19, 91, 91, NULL, '2023-09-24 20:10:06'),
(204, 7, 9, 45, 45, NULL, '2023-09-24 20:10:23'),
(205, 7, 29, 141, 141, NULL, '2023-09-24 20:10:40'),
(206, 7, 38, 189, 189, NULL, '2023-09-24 20:10:47'),
(207, 7, 39, 194, 194, NULL, '2023-09-24 20:11:03'),
(208, 5, 9, 45, 45, NULL, '2023-09-24 20:11:13'),
(209, 7, 10, 47, 47, NULL, '2023-09-24 20:11:22'),
(210, 7, 31, 154, 154, NULL, '2023-09-24 20:11:50'),
(211, 7, 37, 182, 182, NULL, '2023-09-24 20:12:18'),
(212, 7, 21, 102, 102, NULL, '2023-09-24 20:12:55'),
(213, 6, 18, 86, 86, NULL, '2023-09-24 20:13:43'),
(214, 7, 2, 10, 10, NULL, '2023-09-24 20:13:54'),
(215, 5, 20, 97, 97, NULL, '2023-09-24 20:14:12'),
(216, 6, 36, 176, 176, NULL, '2023-09-24 20:14:14'),
(217, 5, 23, 112, 112, NULL, '2023-09-24 20:14:28'),
(218, 5, 25, 123, 123, NULL, '2023-09-24 20:14:41'),
(219, 7, 35, 175, 175, NULL, '2023-09-24 20:15:04'),
(220, 6, 4, 16, 16, NULL, '2023-09-24 20:15:22'),
(221, 7, 13, 61, 61, NULL, '2023-09-24 20:15:31'),
(222, 5, 30, 146, 146, NULL, '2023-09-24 20:16:00'),
(223, 7, 18, 88, 88, NULL, '2023-09-24 20:16:17'),
(224, 7, 32, 158, 158, NULL, '2023-09-24 20:16:41'),
(225, 5, 27, 132, 132, NULL, '2023-09-24 20:16:55'),
(226, 7, 1, 2, 2, NULL, '2023-09-24 20:17:12'),
(227, 7, 17, 83, 83, NULL, '2023-09-24 20:17:30'),
(228, 7, 12, 58, 58, NULL, '2023-09-24 20:17:40'),
(229, 7, 28, 136, 136, NULL, '2023-09-24 20:18:30'),
(230, 6, 6, 26, 26, NULL, '2023-09-24 20:18:35'),
(231, 7, 24, 118, 118, NULL, '2023-09-24 20:18:59'),
(232, 7, 16, 78, 78, NULL, '2023-09-24 20:19:27'),
(233, 7, 30, 150, 150, NULL, '2023-09-24 20:19:39'),
(234, 6, 39, 194, 194, NULL, '2023-09-24 20:19:42'),
(235, 7, 20, 99, 99, NULL, '2023-09-24 20:19:48'),
(236, 5, 3, 11, 11, NULL, '2023-09-24 20:20:16'),
(237, 7, 11, 52, 52, NULL, '2023-09-24 20:20:38'),
(238, 6, 11, 52, 52, NULL, '2023-09-24 20:20:38'),
(239, 5, 21, 101, 101, NULL, '2023-09-24 20:20:47'),
(240, 5, 40, 198, 198, NULL, '2023-09-24 20:20:51'),
(241, 7, 25, 123, 123, NULL, '2023-09-24 20:20:52'),
(242, 7, 33, 165, 165, NULL, '2023-09-24 20:21:10'),
(243, 6, 27, 132, 132, NULL, '2023-09-24 20:21:11'),
(244, 7, 8, 36, 36, NULL, '2023-09-24 20:21:21'),
(245, 7, 40, 199, 199, NULL, '2023-09-24 20:21:25'),
(246, 7, 36, 180, 180, NULL, '2023-09-24 20:21:32'),
(247, 6, 2, 7, 7, NULL, '2023-09-24 20:21:35'),
(248, 7, 26, 126, 126, NULL, '2023-09-24 20:21:51'),
(249, 7, 3, 15, 15, NULL, '2023-09-24 20:22:13'),
(250, 6, 20, 99, 99, NULL, '2023-09-24 20:22:30'),
(251, 6, 19, 91, 91, NULL, '2023-09-24 20:22:57'),
(252, 7, 22, 107, 107, NULL, '2023-09-24 20:23:08'),
(253, 6, 9, 45, 45, NULL, '2023-09-24 20:23:09'),
(254, 7, 34, 167, 167, NULL, '2023-09-24 20:23:14'),
(255, 6, 21, 101, 101, NULL, '2023-09-24 20:23:15'),
(256, 6, 24, 118, 118, NULL, '2023-09-24 20:23:36'),
(257, 7, 4, 19, 19, NULL, '2023-09-24 20:23:41'),
(258, 7, 27, 133, 133, NULL, '2023-09-24 20:23:55'),
(259, 7, 15, 71, 71, NULL, '2023-09-24 20:24:05'),
(260, 7, 14, 67, 67, NULL, '2023-09-24 20:24:35'),
(261, 5, 8, 39, 39, NULL, '2023-09-24 20:24:46'),
(262, 5, 1, 4, 4, NULL, '2023-09-24 20:24:51'),
(263, 7, 6, 26, 26, NULL, '2023-09-24 20:24:58'),
(264, 7, 7, 33, 33, NULL, '2023-09-24 20:25:15'),
(265, 6, 1, 2, 2, NULL, '2023-09-24 20:25:20'),
(266, 5, 15, 72, 72, NULL, '2023-09-24 20:25:25'),
(267, 5, 12, 58, 58, NULL, '2023-09-24 20:25:41'),
(268, 6, 35, 175, 175, NULL, '2023-09-24 20:25:49'),
(269, 5, 19, 95, 95, NULL, '2023-09-24 20:25:58'),
(270, 5, 28, 136, 136, NULL, '2023-09-24 20:26:27'),
(271, 5, 39, 193, 193, NULL, '2023-09-24 20:26:41'),
(272, 6, 30, 146, 146, NULL, '2023-09-24 20:27:19'),
(273, 6, 37, 182, 182, NULL, '2023-09-24 20:27:58'),
(274, 6, 28, 136, 136, NULL, '2023-09-24 20:28:22'),
(275, 6, 7, 32, 32, NULL, '2023-09-24 20:28:37'),
(276, 6, 15, 74, 74, NULL, '2023-09-24 20:29:28'),
(277, 6, 32, 158, 158, NULL, '2023-09-24 20:29:42'),
(278, 6, 13, 61, 61, NULL, '2023-09-24 20:30:16'),
(279, 6, 16, 80, 80, NULL, '2023-09-24 20:30:31'),
(280, 6, 38, 187, 187, NULL, '2023-09-24 20:30:39'),
(281, 8, 28, 136, 136, NULL, '2023-09-24 20:32:25'),
(282, 9, 4, 18, 18, NULL, '2023-09-24 20:32:30'),
(283, 8, 25, 123, 123, NULL, '2023-09-24 20:32:32'),
(284, 9, 19, 91, 91, NULL, '2023-09-24 20:32:47'),
(285, 9, 16, 80, 80, NULL, '2023-09-24 20:32:59'),
(286, 8, 29, 141, 141, NULL, '2023-09-24 20:33:16'),
(287, 8, 26, 129, 129, NULL, '2023-09-24 20:33:54'),
(288, 9, 38, 186, 186, NULL, '2023-09-24 20:34:01'),
(289, 8, 32, 158, 158, NULL, '2023-09-24 20:34:13'),
(290, 9, 24, 118, 118, NULL, '2023-09-24 20:34:25'),
(291, 9, 40, 197, 197, NULL, '2023-09-24 20:34:57'),
(292, 9, 2, 7, 7, NULL, '2023-09-24 20:35:44'),
(293, 8, 31, 153, 153, NULL, '2023-09-24 20:35:52'),
(294, 9, 33, 163, 163, NULL, '2023-09-24 20:36:54'),
(295, 8, 15, 71, 71, NULL, '2023-09-24 20:36:55'),
(296, 10, 26, 127, 127, NULL, '2023-09-24 20:37:17'),
(297, 10, 3, 13, 13, NULL, '2023-09-24 20:37:19'),
(298, 10, 36, 180, 180, NULL, '2023-09-24 20:37:29'),
(299, 9, 15, 72, 72, NULL, '2023-09-24 20:37:35'),
(300, 10, 27, 134, 134, NULL, '2023-09-24 20:37:37'),
(301, 10, 30, 147, 147, NULL, '2023-09-24 20:37:39'),
(302, 10, 10, 49, 49, NULL, '2023-09-24 20:37:43'),
(303, 8, 12, 58, 58, NULL, '2023-09-24 20:37:44'),
(304, 10, 17, 83, 83, NULL, '2023-09-24 20:37:47'),
(305, 10, 38, 187, 187, NULL, '2023-09-24 20:37:52'),
(306, 10, 13, 64, 64, NULL, '2023-09-24 20:37:54'),
(307, 10, 11, 52, 52, NULL, '2023-09-24 20:37:57'),
(308, 10, 19, 94, 94, NULL, '2023-09-24 20:38:00'),
(309, 8, 21, 101, 101, NULL, '2023-09-24 20:38:03'),
(310, 10, 21, 102, 102, NULL, '2023-09-24 20:38:03'),
(311, 10, 15, 72, 72, NULL, '2023-09-24 20:38:06'),
(312, 10, 16, 78, 78, NULL, '2023-09-24 20:38:08'),
(313, 10, 7, 32, 32, NULL, '2023-09-24 20:38:11'),
(314, 10, 33, 164, 164, NULL, '2023-09-24 20:38:13'),
(315, 9, 11, 52, 52, NULL, '2023-09-24 20:38:15'),
(316, 10, 14, 66, 66, NULL, '2023-09-24 20:38:15'),
(317, 10, 20, 98, 98, NULL, '2023-09-24 20:38:19'),
(318, 10, 28, 140, 140, NULL, '2023-09-24 20:38:21'),
(319, 10, 4, 17, 17, NULL, '2023-09-24 20:38:23'),
(320, 10, 29, 141, 141, NULL, '2023-09-24 20:38:26'),
(321, 10, 40, 199, 199, NULL, '2023-09-24 20:38:28'),
(322, 10, 32, 159, 159, NULL, '2023-09-24 20:38:31'),
(323, 10, 23, 113, 113, NULL, '2023-09-24 20:38:34'),
(324, 10, 37, 181, 181, NULL, '2023-09-24 20:38:39'),
(325, 10, 8, 37, 37, NULL, '2023-09-24 20:38:41'),
(326, 10, 31, 154, 154, NULL, '2023-09-24 20:38:44'),
(327, 10, 24, 116, 116, NULL, '2023-09-24 20:38:51'),
(328, 10, 9, 42, 42, NULL, '2023-09-24 20:38:56'),
(329, 10, 6, 28, 28, NULL, '2023-09-24 20:38:58'),
(330, 10, 2, 8, 8, NULL, '2023-09-24 20:39:02'),
(331, 10, 34, 168, 168, NULL, '2023-09-24 20:39:05'),
(332, 10, 12, 57, 57, NULL, '2023-09-24 20:39:08'),
(333, 10, 18, 90, 90, NULL, '2023-09-24 20:39:10'),
(334, 10, 22, 108, 108, NULL, '2023-09-24 20:39:14'),
(335, 10, 35, 173, 173, NULL, '2023-09-24 20:39:17'),
(336, 10, 25, 123, 123, NULL, '2023-09-24 20:39:25'),
(337, 10, 5, 22, 22, NULL, '2023-09-24 20:39:28'),
(338, 8, 22, 110, 110, NULL, '2023-09-24 20:39:31'),
(339, 10, 39, 194, 194, NULL, '2023-09-24 20:39:34'),
(340, 11, 6, 29, 29, NULL, '2023-09-24 20:39:35'),
(341, 10, 1, 3, 3, NULL, '2023-09-24 20:39:41'),
(342, 11, 18, 87, 87, NULL, '2023-09-24 20:39:48'),
(343, 8, 40, 198, 198, NULL, '2023-09-24 20:40:07'),
(344, 11, 8, 38, 38, NULL, '2023-09-24 20:40:16'),
(345, 8, 24, 118, 118, NULL, '2023-09-24 20:40:27'),
(346, 9, 17, 82, 82, NULL, '2023-09-24 20:40:39'),
(347, 11, 5, 21, 21, NULL, '2023-09-24 20:41:00'),
(348, 8, 6, 26, 26, NULL, '2023-09-24 20:41:03'),
(349, 11, 1, 2, 2, NULL, '2023-09-24 20:41:20'),
(350, 9, 37, 185, 185, NULL, '2023-09-24 20:41:24'),
(351, 8, 10, 50, 50, NULL, '2023-09-24 20:41:30'),
(352, 11, 34, 168, 168, NULL, '2023-09-24 20:41:40'),
(353, 8, 1, 2, 2, NULL, '2023-09-24 20:41:58'),
(354, 11, 29, 141, 141, NULL, '2023-09-24 20:42:08'),
(355, 9, 3, 14, 14, NULL, '2023-09-24 20:42:14'),
(356, 11, 21, 102, 102, NULL, '2023-09-24 20:42:18'),
(357, 11, 26, 129, 129, NULL, '2023-09-24 20:42:29'),
(358, 9, 22, 107, 107, NULL, '2023-09-24 20:42:40'),
(359, 11, 19, 91, 91, NULL, '2023-09-24 20:42:44'),
(360, 11, 25, 123, 123, NULL, '2023-09-24 20:42:53'),
(361, 9, 31, 151, 151, NULL, '2023-09-24 20:42:59'),
(362, 8, 33, 162, 162, NULL, '2023-09-24 20:43:04'),
(363, 11, 3, 11, 11, NULL, '2023-09-24 20:43:06'),
(364, 11, 22, 108, 108, NULL, '2023-09-24 20:43:17'),
(365, 11, 39, 193, 193, NULL, '2023-09-24 20:43:26'),
(366, 11, 33, 162, 162, NULL, '2023-09-24 20:43:58'),
(367, 9, 18, 86, 86, NULL, '2023-09-24 20:44:03'),
(368, 11, 9, 45, 45, NULL, '2023-09-24 20:44:11'),
(369, 11, 32, 160, 160, NULL, '2023-09-24 20:44:19'),
(370, 9, 21, 102, 102, NULL, '2023-09-24 20:44:21'),
(371, 8, 19, 95, 95, NULL, '2023-09-24 20:44:26'),
(372, 11, 4, 18, 18, NULL, '2023-09-24 20:44:48'),
(373, 9, 35, 175, 175, NULL, '2023-09-24 20:44:53'),
(374, 8, 14, 69, 69, NULL, '2023-09-24 20:45:10'),
(375, 9, 28, 138, 138, NULL, '2023-09-24 20:45:13'),
(376, 11, 30, 148, 148, NULL, '2023-09-24 20:45:16'),
(377, 11, 27, 135, 135, NULL, '2023-09-24 20:46:28'),
(378, 9, 39, 193, 193, NULL, '2023-09-24 20:45:38'),
(379, 8, 11, 52, 52, NULL, '2023-09-24 20:45:52'),
(380, 9, 27, 132, 132, NULL, '2023-09-24 20:46:19'),
(381, 11, 7, 32, 32, NULL, '2023-09-24 20:46:40'),
(382, 11, 13, 61, 61, NULL, '2023-09-24 20:46:51'),
(383, 11, 16, 79, 79, NULL, '2023-09-24 20:47:06'),
(384, 11, 24, 116, 116, NULL, '2023-09-24 20:47:14'),
(385, 8, 37, 181, 181, NULL, '2023-09-24 20:47:27'),
(386, 9, 30, 146, 146, NULL, '2023-09-24 20:47:39'),
(387, 11, 35, 172, 172, NULL, '2023-09-24 20:47:58'),
(388, 11, 23, 112, 112, NULL, '2023-09-24 20:48:31'),
(389, 8, 36, 180, 180, NULL, '2023-09-24 20:48:36'),
(390, 9, 7, 35, 35, NULL, '2023-09-24 20:48:48'),
(391, 8, 16, 80, 80, NULL, '2023-09-24 20:49:03'),
(392, 11, 28, 136, 136, NULL, '2023-09-24 20:49:12'),
(393, 8, 2, 7, 7, NULL, '2023-09-24 20:49:23'),
(394, 11, 38, 186, 186, NULL, '2023-09-24 20:49:50'),
(395, 11, 11, 52, 52, NULL, '2023-09-24 20:50:02'),
(396, 8, 34, 169, 169, NULL, '2023-09-24 20:50:07'),
(397, 11, 15, 74, 74, NULL, '2023-09-24 20:50:34'),
(398, 9, 29, 144, 144, NULL, '2023-09-24 20:50:41'),
(399, 11, 37, 181, 181, NULL, '2023-09-24 20:50:55'),
(400, 9, 32, 158, 158, NULL, '2023-09-24 20:51:04'),
(401, 8, 35, 175, 175, NULL, '2023-09-24 20:51:08'),
(402, 11, 2, 8, 8, NULL, '2023-09-24 20:51:10'),
(403, 11, 12, 58, 58, NULL, '2023-09-24 20:51:20'),
(404, 8, 13, 61, 61, NULL, '2023-09-24 20:51:34'),
(405, 11, 17, 82, 82, NULL, '2023-09-24 20:51:39'),
(406, 11, 10, 49, 49, NULL, '2023-09-24 20:51:51'),
(407, 8, 4, 16, 16, NULL, '2023-09-24 20:51:54'),
(408, 11, 36, 180, 180, NULL, '2023-09-24 20:52:27'),
(409, 11, 14, 69, 69, NULL, '2023-09-24 20:52:49'),
(410, 9, 6, 28, 28, NULL, '2023-09-24 20:52:57'),
(411, 8, 20, 100, 100, NULL, '2023-09-24 20:53:22'),
(412, 9, 25, 123, 123, NULL, '2023-09-24 20:53:31'),
(413, 11, 20, 96, 96, NULL, '2023-09-24 20:53:44'),
(414, 9, 12, 58, 58, NULL, '2023-09-24 20:54:40'),
(415, 11, 40, 198, 198, NULL, '2023-09-24 20:54:56'),
(416, 9, 36, 180, 180, NULL, '2023-09-24 20:55:01'),
(417, 8, 5, 22, 22, NULL, '2023-09-24 20:55:04'),
(418, 8, 18, 89, 89, NULL, '2023-09-24 20:55:42'),
(419, 11, 31, 154, 154, NULL, '2023-09-24 20:56:28'),
(420, 9, 14, 67, 67, NULL, '2023-09-24 20:56:31'),
(421, 13, 31, 151, 151, NULL, '2023-09-24 20:56:36'),
(422, 8, 17, 82, 82, NULL, '2023-09-24 20:56:38'),
(423, 9, 23, 112, 112, NULL, '2023-09-24 20:56:47'),
(424, 13, 23, 112, 112, NULL, '2023-09-24 20:56:58'),
(425, 8, 7, 35, 35, NULL, '2023-09-24 20:57:10'),
(426, 8, 27, 131, 131, NULL, '2023-09-24 20:58:09'),
(427, 9, 5, 23, 23, NULL, '2023-09-24 20:58:13'),
(428, 8, 23, 112, 112, NULL, '2023-09-24 20:58:16'),
(429, 14, 9, 41, 41, NULL, '2023-09-24 20:58:18'),
(430, 13, 35, 172, 172, NULL, '2023-09-24 20:58:34'),
(431, 8, 3, 14, 14, NULL, '2023-09-24 20:58:43'),
(432, 13, 16, 78, 78, NULL, '2023-09-24 20:59:21'),
(433, 9, 8, 36, 36, NULL, '2023-09-24 20:59:25'),
(434, 13, 11, 54, 54, NULL, '2023-09-24 20:59:43'),
(435, 8, 30, 150, 150, NULL, '2023-09-24 21:00:01'),
(436, 14, 38, 186, 186, NULL, '2023-09-24 21:00:04'),
(437, 8, 38, 190, 190, NULL, '2023-09-24 21:00:08'),
(438, 13, 1, 2, 2, NULL, '2023-09-24 21:00:10'),
(439, 15, 15, 72, 72, NULL, '2023-09-24 21:00:26'),
(440, 8, 39, 193, 193, NULL, '2023-09-24 21:00:34'),
(441, 13, 5, 22, 22, NULL, '2023-09-24 21:00:39'),
(442, 15, 40, 197, 197, NULL, '2023-09-24 21:00:54'),
(443, 13, 18, 90, 90, NULL, '2023-09-24 21:01:03'),
(444, 9, 9, 45, 45, NULL, '2023-09-24 21:01:04'),
(445, 9, 26, 129, 129, NULL, '2023-09-24 21:01:13'),
(446, 9, 10, 47, 47, NULL, '2023-09-24 21:01:23'),
(447, 13, 4, 18, 18, NULL, '2023-09-24 21:01:23'),
(448, 15, 13, 61, 61, NULL, '2023-09-24 21:01:27'),
(449, 14, 32, 158, 158, NULL, '2023-09-24 21:23:12'),
(450, 14, 4, 18, 18, NULL, '2023-09-24 21:23:16'),
(451, 13, 32, 158, 158, NULL, '2023-09-24 21:01:43'),
(452, 13, 17, 83, 83, NULL, '2023-09-24 21:02:08'),
(453, 8, 8, 38, 38, NULL, '2023-09-24 21:02:13'),
(454, 8, 9, 45, 45, NULL, '2023-09-24 21:02:34'),
(455, 14, 34, 169, 169, NULL, '2023-09-24 21:02:38'),
(456, 9, 1, 2, 2, NULL, '2023-09-24 21:02:42'),
(457, 14, 17, 83, 83, NULL, '2023-09-24 21:02:47'),
(458, 9, 13, 61, 61, NULL, '2023-09-24 21:02:53'),
(459, 13, 25, 123, 123, NULL, '2023-09-24 21:03:03'),
(460, 9, 34, 170, 170, NULL, '2023-09-24 21:03:03'),
(461, 9, 20, 97, 97, NULL, '2023-09-24 21:03:08'),
(462, 13, 26, 126, 126, NULL, '2023-09-24 21:03:29'),
(463, 13, 14, 69, 69, NULL, '2023-09-24 21:03:50'),
(464, 13, 7, 33, 33, NULL, '2023-09-24 21:04:15'),
(465, 13, 2, 6, 6, NULL, '2023-09-24 21:04:37'),
(466, 15, 35, 175, 175, NULL, '2023-09-24 21:04:57'),
(467, 13, 9, 41, 41, NULL, '2023-09-24 21:05:08'),
(468, 13, 22, 107, 107, NULL, '2023-09-24 21:05:30'),
(469, 16, 2, 7, 7, NULL, '2023-09-24 21:05:35'),
(470, 14, 20, 98, 98, NULL, '2023-09-24 21:05:39'),
(471, 13, 12, 58, 58, NULL, '2023-09-24 21:05:54'),
(472, 16, 19, 95, 95, NULL, '2023-09-24 21:06:06'),
(473, 13, 19, 91, 91, NULL, '2023-09-24 21:06:19'),
(474, 14, 14, 66, 66, NULL, '2023-09-24 21:06:32'),
(475, 12, 18, 87, 87, NULL, '2023-09-24 21:06:37'),
(476, 16, 29, 144, 144, NULL, '2023-09-24 21:06:43'),
(477, 16, 35, 175, 175, NULL, '2023-09-24 21:07:32'),
(478, 16, 12, 58, 58, NULL, '2023-09-24 21:07:47'),
(479, 15, 19, 95, 95, NULL, '2023-09-24 21:07:49'),
(480, 14, 5, 24, 24, NULL, '2023-09-24 21:08:24'),
(481, 15, 21, 102, 102, NULL, '2023-09-24 21:08:25'),
(482, 16, 14, 69, 69, NULL, '2023-09-24 21:08:28'),
(483, 12, 19, 91, 91, NULL, '2023-09-24 21:08:37'),
(484, 16, 11, 52, 52, NULL, '2023-09-24 21:08:47'),
(485, 12, 22, 106, 106, NULL, '2023-09-24 21:09:09'),
(486, 13, 15, 74, 74, NULL, '2023-09-24 21:09:33'),
(487, 15, 16, 78, 78, NULL, '2023-09-24 21:09:45'),
(488, 12, 33, 162, 162, NULL, '2023-09-24 21:09:58'),
(489, 16, 31, 151, 151, NULL, '2023-09-24 21:09:58'),
(490, 12, 30, 148, 148, NULL, '2023-09-24 21:10:01'),
(491, 12, 34, 169, 169, NULL, '2023-09-24 21:10:04'),
(492, 15, 23, 112, 112, NULL, '2023-09-24 21:10:07'),
(493, 12, 16, 80, 80, NULL, '2023-09-24 21:10:17'),
(494, 12, 21, 102, 102, NULL, '2023-09-24 21:10:35'),
(495, 13, 13, 61, 61, NULL, '2023-09-24 21:11:25'),
(496, 16, 22, 108, 108, NULL, '2023-09-24 21:11:30'),
(497, 12, 5, 24, 24, NULL, '2023-09-24 21:12:08'),
(498, 13, 37, 181, 181, NULL, '2023-09-24 21:12:13'),
(499, 12, 38, 189, 189, NULL, '2023-09-24 21:12:13'),
(500, 13, 30, 148, 148, NULL, '2023-09-24 21:12:48'),
(501, 13, 36, 180, 180, NULL, '2023-09-24 21:13:08'),
(502, 12, 17, 85, 85, NULL, '2023-09-24 21:13:10'),
(503, 12, 12, 58, 58, NULL, '2023-09-24 21:13:18'),
(504, 13, 34, 169, 169, NULL, '2023-09-24 21:13:48'),
(505, 12, 8, 36, 36, NULL, '2023-09-24 21:14:18'),
(506, 14, 21, 101, 101, NULL, '2023-09-24 21:16:30'),
(507, 13, 38, 186, 186, NULL, '2023-09-24 21:14:20'),
(508, 16, 23, 112, 112, NULL, '2023-09-24 21:14:34'),
(509, 13, 24, 118, 118, NULL, '2023-09-24 21:14:44'),
(510, 16, 25, 123, 123, NULL, '2023-09-24 21:14:51'),
(511, 12, 28, 136, 136, NULL, '2023-09-24 21:15:18'),
(512, 13, 40, 197, 197, NULL, '2023-09-24 21:15:27'),
(513, 14, 40, 197, 197, NULL, '2023-09-24 21:15:31'),
(514, 16, 21, 102, 102, NULL, '2023-09-24 21:15:31'),
(515, 16, 1, 2, 2, NULL, '2023-09-24 21:16:00'),
(516, 12, 3, 14, 14, NULL, '2023-09-24 21:16:06'),
(517, 16, 32, 158, 158, NULL, '2023-09-24 21:16:09'),
(518, 13, 21, 101, 101, NULL, '2023-09-24 21:16:09'),
(519, 13, 28, 136, 136, NULL, '2023-09-24 21:16:33'),
(520, 12, 29, 141, 141, NULL, '2023-09-24 21:16:51'),
(521, 13, 6, 26, 26, NULL, '2023-09-24 21:17:04'),
(522, 12, 11, 52, 52, NULL, '2023-09-24 21:17:06'),
(523, 15, 30, 146, 146, NULL, '2023-09-24 21:17:08'),
(524, 16, 34, 169, 169, NULL, '2023-09-24 21:17:10'),
(525, 12, 25, 123, 123, NULL, '2023-09-24 21:17:14'),
(526, 16, 24, 118, 118, NULL, '2023-09-24 21:17:22'),
(527, 14, 29, 141, 141, NULL, '2023-09-24 21:17:22'),
(528, 13, 39, 193, 193, NULL, '2023-09-24 21:17:26'),
(529, 13, 10, 47, 47, NULL, '2023-09-24 21:17:55'),
(530, 14, 12, 58, 58, NULL, '2023-09-24 21:18:02'),
(531, 13, 3, 12, 12, NULL, '2023-09-24 21:18:22'),
(532, 14, 16, 77, 77, NULL, '2023-09-24 21:18:42'),
(533, 13, 27, 131, 131, NULL, '2023-09-24 21:18:47'),
(534, 13, 33, 162, 162, NULL, '2023-09-24 21:19:10'),
(535, 17, 26, 129, 129, NULL, '2023-09-24 21:19:27'),
(536, 15, 1, 2, 2, NULL, '2023-09-24 21:19:33'),
(537, 13, 20, 99, 99, NULL, '2023-09-24 21:19:40'),
(538, 14, 3, 12, 12, NULL, '2023-09-24 21:19:43'),
(539, 14, 10, 47, 47, NULL, '2023-09-24 21:19:48'),
(540, 15, 32, 158, 158, NULL, '2023-09-24 21:19:54'),
(541, 12, 20, 100, 100, NULL, '2023-09-24 21:20:06'),
(542, 13, 29, 142, 142, NULL, '2023-09-24 21:20:12'),
(543, 17, 12, 59, 59, NULL, '2023-09-24 21:20:19'),
(544, 15, 6, 29, 29, NULL, '2023-09-24 21:20:43'),
(545, 13, 8, 40, 40, NULL, '2023-09-24 21:20:49'),
(546, 14, 8, 40, 40, NULL, '2023-09-24 21:21:01'),
(547, 14, 31, 154, 154, NULL, '2023-09-24 21:21:07'),
(548, 14, 36, 180, 180, NULL, '2023-09-24 21:21:11'),
(549, 14, 37, 181, 181, NULL, '2023-09-24 21:21:17'),
(550, 14, 23, 112, 112, NULL, '2023-09-24 21:21:23'),
(551, 14, 15, 74, 74, NULL, '2023-09-24 21:21:27'),
(552, 12, 39, 193, 193, NULL, '2023-09-24 21:21:28'),
(553, 14, 18, 87, 87, NULL, '2023-09-24 21:21:34'),
(554, 14, 27, 131, 131, NULL, '2023-09-24 21:21:39'),
(555, 15, 18, 87, 87, NULL, '2023-09-24 21:21:41'),
(556, 14, 22, 107, 107, NULL, '2023-09-24 21:21:45'),
(557, 14, 26, 126, 126, NULL, '2023-09-24 21:21:49'),
(558, 14, 25, 123, 123, NULL, '2023-09-24 21:21:56'),
(559, 14, 28, 138, 138, NULL, '2023-09-24 21:21:59'),
(560, 14, 7, 32, 32, NULL, '2023-09-24 21:22:03'),
(561, 12, 7, 33, 33, NULL, '2023-09-24 21:22:08'),
(562, 14, 6, 29, 29, NULL, '2023-09-24 21:22:10'),
(563, 14, 13, 61, 61, NULL, '2023-09-24 21:22:16'),
(564, 14, 24, 116, 116, NULL, '2023-09-24 21:22:22'),
(565, 17, 5, 23, 23, NULL, '2023-09-24 21:22:24'),
(566, 14, 19, 94, 94, NULL, '2023-09-24 21:22:26'),
(567, 14, 33, 162, 162, NULL, '2023-09-24 21:22:29'),
(568, 14, 35, 174, 174, NULL, '2023-09-24 21:22:37'),
(569, 14, 2, 6, 6, NULL, '2023-09-24 21:22:40'),
(570, 17, 36, 176, 176, NULL, '2023-09-24 21:22:41'),
(571, 14, 11, 54, 54, NULL, '2023-09-24 21:22:48'),
(572, 14, 1, 2, 2, NULL, '2023-09-24 21:22:52'),
(573, 16, 27, 132, 132, NULL, '2023-09-24 21:22:56'),
(574, 14, 30, 148, 148, NULL, '2023-09-24 21:22:57'),
(575, 15, 3, 13, 13, NULL, '2023-09-24 21:23:01'),
(576, 14, 39, 193, 193, NULL, '2023-09-24 21:23:01'),
(577, 16, 15, 75, 75, NULL, '2023-09-24 21:23:06'),
(578, 17, 2, 7, 7, NULL, '2023-09-24 21:23:10'),
(579, 12, 14, 68, 68, NULL, '2023-09-24 21:23:20'),
(580, 15, 22, 107, 107, NULL, '2023-09-24 21:23:49'),
(581, 15, 20, 97, 97, NULL, '2023-09-24 21:23:56'),
(582, 16, 39, 194, 194, NULL, '2023-09-24 21:23:57'),
(583, 12, 15, 75, 75, NULL, '2023-09-24 21:24:17'),
(584, 17, 7, 34, 34, NULL, '2023-09-24 21:23:59'),
(585, 16, 7, 34, 34, NULL, '2023-09-24 21:24:17'),
(586, 17, 22, 110, 110, NULL, '2023-09-24 21:24:19'),
(587, 17, 15, 75, 75, NULL, '2023-09-24 21:24:35'),
(588, 16, 17, 85, 85, NULL, '2023-09-24 21:24:47'),
(589, 17, 16, 80, 80, NULL, '2023-09-24 21:25:06'),
(590, 16, 37, 182, 182, NULL, '2023-09-24 21:25:22'),
(591, 17, 8, 36, 36, NULL, '2023-09-24 21:25:57'),
(592, 16, 33, 162, 162, NULL, '2023-09-24 21:26:14'),
(593, 17, 1, 2, 2, NULL, '2023-09-24 21:26:26'),
(594, 12, 37, 183, 183, NULL, '2023-09-24 21:26:45'),
(595, 12, 31, 152, 152, NULL, '2023-09-24 21:26:50'),
(596, 17, 4, 16, 16, NULL, '2023-09-24 21:26:52'),
(597, 12, 4, 17, 17, NULL, '2023-09-24 21:27:09'),
(598, 17, 33, 162, 162, NULL, '2023-09-24 21:27:21'),
(599, 12, 32, 158, 158, NULL, '2023-09-24 21:27:26'),
(600, 15, 27, 131, 131, NULL, '2023-09-24 21:27:29'),
(601, 12, 2, 6, 6, NULL, '2023-09-24 21:27:50'),
(602, 12, 40, 196, 196, NULL, '2023-09-24 21:27:53'),
(603, 12, 26, 129, 129, NULL, '2023-09-24 21:28:06'),
(604, 17, 17, 85, 85, NULL, '2023-09-24 21:28:20'),
(605, 12, 6, 30, 30, NULL, '2023-09-24 21:28:22'),
(606, 17, 27, 132, 132, NULL, '2023-09-24 21:31:55'),
(607, 17, 25, 123, 123, NULL, '2023-09-24 21:29:39'),
(608, 17, 23, 112, 112, NULL, '2023-09-24 21:29:49'),
(609, 17, 39, 193, 193, NULL, '2023-09-24 21:30:22'),
(610, 15, 37, 182, 182, NULL, '2023-09-24 21:30:40'),
(611, 17, 9, 45, 45, NULL, '2023-09-24 21:33:00'),
(612, 16, 28, 138, 138, NULL, '2023-09-24 21:33:23'),
(613, 16, 16, 80, 80, NULL, '2023-09-24 21:33:23'),
(614, 16, 8, 36, 36, NULL, '2023-09-24 21:33:26'),
(615, 16, 20, 98, 98, NULL, '2023-09-24 21:33:28'),
(616, 16, 5, 25, 25, NULL, '2023-09-24 21:33:29'),
(617, 15, 10, 47, 47, NULL, '2023-09-24 21:33:31'),
(618, 15, 31, 155, 155, NULL, '2023-09-24 21:33:32'),
(619, 12, 27, 135, 135, NULL, '2023-09-24 21:33:45'),
(620, 16, 6, 26, 26, NULL, '2023-09-24 21:34:05'),
(621, 12, 1, 4, 4, NULL, '2023-09-24 21:34:09'),
(622, 12, 36, 176, 176, NULL, '2023-09-24 21:34:16'),
(623, 16, 9, 45, 45, NULL, '2023-09-24 21:34:42'),
(624, 17, 13, 61, 61, NULL, '2023-09-24 21:34:53'),
(625, 15, 7, 32, 32, NULL, '2023-09-24 21:34:55'),
(626, 12, 24, 116, 116, NULL, '2023-09-24 21:35:24'),
(627, 12, 35, 175, 175, NULL, '2023-09-24 21:35:59'),
(628, 16, 36, 180, 180, NULL, '2023-09-24 21:35:59'),
(629, 15, 26, 126, 126, NULL, '2023-09-24 21:36:05'),
(630, 15, 34, 168, 168, NULL, '2023-09-24 21:36:09'),
(631, 12, 23, 112, 112, NULL, '2023-09-24 21:36:09'),
(632, 12, 10, 47, 47, NULL, '2023-09-24 21:36:27'),
(633, 15, 8, 39, 39, NULL, '2023-09-24 21:36:35'),
(634, 12, 9, 45, 45, NULL, '2023-09-24 21:36:50'),
(635, 12, 13, 61, 61, NULL, '2023-09-24 21:37:14'),
(636, 15, 9, 45, 45, NULL, '2023-09-24 21:37:26'),
(637, 15, 2, 6, 6, NULL, '2023-09-24 21:37:26'),
(638, 17, 31, 155, 155, NULL, '2023-09-24 21:37:35'),
(639, 15, 28, 136, 136, NULL, '2023-09-24 21:38:13'),
(640, 15, 17, 83, 83, NULL, '2023-09-24 21:38:20'),
(641, 16, 3, 11, 11, NULL, '2023-09-24 21:38:41'),
(642, 17, 32, 158, 158, NULL, '2023-09-24 21:38:43'),
(643, 17, 21, 101, 101, NULL, '2023-09-24 21:38:56'),
(644, 15, 25, 123, 123, NULL, '2023-09-24 21:39:04'),
(645, 15, 4, 19, 19, NULL, '2023-09-24 21:39:08'),
(646, 16, 4, 19, 19, NULL, '2023-09-24 21:39:13'),
(647, 18, 11, 52, 52, NULL, '2023-09-24 21:39:36'),
(648, 15, 12, 56, 56, NULL, '2023-09-24 21:39:36'),
(649, 18, 13, 62, 62, NULL, '2023-09-24 21:39:38'),
(650, 15, 38, 188, 188, NULL, '2023-09-24 21:39:41'),
(651, 18, 28, 137, 137, NULL, '2023-09-24 21:39:41'),
(652, 18, 30, 148, 148, NULL, '2023-09-24 21:39:44'),
(653, 18, 8, 39, 39, NULL, '2023-09-24 21:39:45'),
(654, 18, 37, 182, 182, NULL, '2023-09-24 21:39:48'),
(655, 18, 29, 141, 141, NULL, '2023-09-24 21:39:50'),
(656, 15, 5, 22, 22, NULL, '2023-09-24 21:39:51'),
(657, 18, 39, 194, 194, NULL, '2023-09-24 21:39:53'),
(658, 18, 24, 118, 118, NULL, '2023-09-24 21:39:55'),
(659, 18, 26, 128, 128, NULL, '2023-09-24 21:39:58'),
(660, 15, 14, 67, 67, NULL, '2023-09-24 21:39:59'),
(661, 18, 4, 18, 18, NULL, '2023-09-24 21:40:01'),
(662, 18, 38, 188, 188, NULL, '2023-09-24 21:40:06'),
(663, 18, 20, 96, 96, NULL, '2023-09-24 21:40:10'),
(664, 18, 17, 84, 84, NULL, '2023-09-24 21:40:12'),
(665, 15, 29, 141, 141, NULL, '2023-09-24 21:40:14'),
(666, 18, 9, 43, 43, NULL, '2023-09-24 21:40:16'),
(667, 18, 40, 198, 198, NULL, '2023-09-24 21:40:20'),
(668, 18, 18, 88, 88, NULL, '2023-09-24 21:40:29'),
(669, 18, 21, 104, 104, NULL, '2023-09-24 21:40:31'),
(670, 18, 10, 48, 48, NULL, '2023-09-24 21:40:33'),
(671, 18, 6, 27, 27, NULL, '2023-09-24 21:40:35'),
(672, 18, 19, 93, 93, NULL, '2023-09-24 21:40:40'),
(673, 18, 36, 179, 179, NULL, '2023-09-24 21:40:42'),
(674, 16, 38, 189, 189, NULL, '2023-09-24 21:40:43'),
(675, 18, 34, 167, 167, NULL, '2023-09-24 21:40:44'),
(676, 18, 23, 113, 113, NULL, '2023-09-24 21:40:46'),
(677, 17, 35, 171, 171, NULL, '2023-09-24 21:40:50'),
(678, 18, 16, 76, 76, NULL, '2023-09-24 21:40:50'),
(679, 18, 35, 173, 173, NULL, '2023-09-24 21:40:55'),
(680, 17, 3, 11, 11, NULL, '2023-09-24 21:41:17'),
(681, 18, 33, 163, 163, NULL, '2023-09-24 21:41:28'),
(682, 17, 20, 100, 100, NULL, '2023-09-24 21:41:28'),
(683, 18, 22, 108, 108, NULL, '2023-09-24 21:41:29'),
(684, 18, 5, 22, 22, NULL, '2023-09-24 21:41:31'),
(685, 18, 27, 132, 132, NULL, '2023-09-24 21:41:55'),
(686, 17, 6, 30, 30, NULL, '2023-09-24 21:41:57'),
(687, 18, 15, 73, 73, NULL, '2023-09-24 21:42:23'),
(688, 18, 25, 124, 124, NULL, '2023-09-24 21:42:56'),
(689, 18, 12, 57, 57, NULL, '2023-09-24 21:42:58'),
(690, 16, 40, 197, 197, NULL, '2023-09-24 21:43:01'),
(691, 18, 31, 153, 153, NULL, '2023-09-24 21:43:01'),
(692, 15, 39, 193, 193, NULL, '2023-09-24 21:43:01'),
(693, 18, 14, 67, 67, NULL, '2023-09-24 21:43:02'),
(694, 18, 32, 156, 156, NULL, '2023-09-24 21:43:06'),
(695, 18, 2, 9, 9, NULL, '2023-09-24 21:43:07'),
(696, 15, 33, 163, 163, NULL, '2023-09-24 21:43:08'),
(697, 18, 3, 13, 13, NULL, '2023-09-24 21:43:09'),
(698, 18, 1, 2, 2, NULL, '2023-09-24 21:43:11'),
(699, 18, 7, 33, 33, NULL, '2023-09-24 21:43:13'),
(700, 15, 24, 118, 118, NULL, '2023-09-24 21:43:28'),
(701, 16, 13, 61, 61, NULL, '2023-09-24 21:43:33'),
(702, 16, 10, 50, 50, NULL, '2023-09-24 21:43:51'),
(703, 17, 40, 200, 200, NULL, '2023-09-24 21:43:55'),
(704, 15, 36, 180, 180, NULL, '2023-09-24 21:45:03'),
(705, 17, 37, 182, 182, NULL, '2023-09-24 21:44:29'),
(706, 16, 26, 129, 129, NULL, '2023-09-24 21:44:43'),
(707, 17, 11, 51, 51, NULL, '2023-09-24 21:45:47'),
(708, 17, 10, 47, 47, NULL, '2023-09-24 21:46:04'),
(709, 16, 18, 86, 86, NULL, '2023-09-24 21:46:11'),
(710, 17, 34, 168, 168, NULL, '2023-09-24 21:46:29'),
(711, 17, 29, 141, 141, NULL, '2023-09-24 21:46:43'),
(712, 17, 14, 69, 69, NULL, '2023-09-24 21:47:49'),
(713, 16, 30, 148, 148, NULL, '2023-09-24 21:48:22'),
(714, 17, 18, 90, 90, NULL, '2023-09-24 21:49:31'),
(715, 15, 11, 52, 52, NULL, '2023-09-24 21:49:46'),
(716, 17, 28, 136, 136, NULL, '2023-09-24 21:49:53'),
(717, 17, 38, 190, 190, NULL, '2023-09-24 21:50:42'),
(718, 17, 19, 95, 95, NULL, '2023-09-24 21:51:54'),
(719, 17, 30, 146, 146, NULL, '2023-09-24 21:53:56'),
(720, 17, 24, 118, 118, NULL, '2023-09-24 21:54:19'),
(721, 19, 6, 29, 29, NULL, '2023-09-24 22:00:22'),
(722, 19, 20, 98, 98, NULL, '2023-09-24 22:00:23'),
(723, 19, 40, 200, 200, NULL, '2023-09-24 22:00:24'),
(724, 19, 12, 59, 59, NULL, '2023-09-24 22:00:25'),
(725, 19, 35, 172, 172, NULL, '2023-09-24 22:00:27'),
(726, 19, 8, 39, 39, NULL, '2023-09-24 22:00:28'),
(727, 19, 11, 55, 55, NULL, '2023-09-24 22:00:29'),
(728, 19, 7, 33, 33, NULL, '2023-09-24 22:00:30'),
(729, 19, 28, 139, 139, NULL, '2023-09-24 22:00:32'),
(730, 19, 23, 113, 113, NULL, '2023-09-24 22:00:33'),
(731, 19, 5, 21, 21, NULL, '2023-09-24 22:00:35'),
(732, 19, 27, 132, 132, NULL, '2023-09-24 22:00:36'),
(733, 19, 31, 155, 155, NULL, '2023-09-24 22:00:38'),
(734, 19, 16, 79, 79, NULL, '2023-09-24 22:00:39'),
(735, 19, 33, 163, 163, NULL, '2023-09-24 22:00:41'),
(736, 19, 38, 187, 187, NULL, '2023-09-24 22:00:42'),
(737, 19, 22, 109, 109, NULL, '2023-09-24 22:00:44'),
(738, 19, 32, 158, 158, NULL, '2023-09-24 22:00:46'),
(739, 19, 21, 103, 103, NULL, '2023-09-24 22:00:47'),
(740, 19, 34, 167, 167, NULL, '2023-09-24 22:00:48'),
(741, 19, 13, 61, 61, NULL, '2023-09-24 22:00:50'),
(742, 19, 39, 195, 195, NULL, '2023-09-24 22:00:52'),
(743, 19, 15, 72, 72, NULL, '2023-09-24 22:00:53'),
(744, 19, 1, 4, 4, NULL, '2023-09-24 22:00:55'),
(745, 19, 19, 94, 94, NULL, '2023-09-24 22:00:56'),
(746, 19, 30, 147, 147, NULL, '2023-09-24 22:00:58'),
(747, 19, 37, 183, 183, NULL, '2023-09-24 22:01:00'),
(748, 19, 4, 19, 19, NULL, '2023-09-24 22:01:02'),
(749, 19, 24, 120, 120, NULL, '2023-09-24 22:01:03'),
(750, 19, 18, 89, 89, NULL, '2023-09-24 22:01:04'),
(751, 19, 14, 67, 67, NULL, '2023-09-24 22:01:06'),
(752, 19, 3, 15, 15, NULL, '2023-09-24 22:01:07'),
(753, 19, 25, 125, 125, NULL, '2023-09-24 22:01:08'),
(754, 19, 17, 81, 81, NULL, '2023-09-24 22:01:09'),
(755, 19, 36, 180, 180, NULL, '2023-09-24 22:01:11'),
(756, 19, 29, 142, 142, NULL, '2023-09-24 22:01:12'),
(757, 19, 9, 43, 43, NULL, '2023-09-24 22:01:13'),
(758, 19, 26, 128, 128, NULL, '2023-09-24 22:01:15'),
(759, 19, 2, 8, 8, NULL, '2023-09-24 22:01:16'),
(760, 19, 10, 49, 49, NULL, '2023-09-24 22:01:17'),
(761, 20, 14, 69, 69, NULL, '2023-09-24 22:03:23'),
(762, 20, 38, 186, 186, NULL, '2023-09-24 22:04:09'),
(763, 20, 29, 144, 144, NULL, '2023-09-24 22:04:56'),
(764, 20, 35, 175, 175, NULL, '2023-09-24 22:05:38'),
(765, 20, 12, 58, 58, NULL, '2023-09-24 22:06:55'),
(766, 20, 39, 193, 193, NULL, '2023-09-24 22:07:38'),
(767, 21, 7, 32, 32, NULL, '2023-09-24 22:08:23'),
(768, 20, 26, 126, 126, NULL, '2023-09-24 22:08:23'),
(769, 21, 16, 77, 77, NULL, '2023-09-24 22:08:24'),
(770, 21, 18, 87, 87, NULL, '2023-09-24 22:08:36'),
(771, 21, 33, 162, 162, NULL, '2023-09-24 22:08:39'),
(772, 21, 34, 167, 167, NULL, '2023-09-24 22:08:40'),
(773, 21, 2, 7, 7, NULL, '2023-09-24 22:08:42'),
(774, 21, 37, 182, 182, NULL, '2023-09-24 22:08:44'),
(775, 21, 20, 97, 97, NULL, '2023-09-24 22:08:45'),
(776, 21, 22, 107, 107, NULL, '2023-09-24 22:08:47'),
(777, 21, 19, 92, 92, NULL, '2023-09-24 22:08:49'),
(778, 21, 11, 52, 52, NULL, '2023-09-24 22:08:51'),
(779, 21, 15, 72, 72, NULL, '2023-09-24 22:08:52'),
(780, 21, 29, 142, 142, NULL, '2023-09-24 22:08:54'),
(781, 21, 23, 112, 112, NULL, '2023-09-24 22:08:57'),
(782, 21, 8, 37, 37, NULL, '2023-09-24 22:08:59'),
(783, 21, 21, 102, 102, NULL, '2023-09-24 22:09:00'),
(784, 21, 40, 197, 197, NULL, '2023-09-24 22:09:02'),
(785, 21, 12, 57, 57, NULL, '2023-09-24 22:09:04'),
(786, 21, 36, 177, 177, NULL, '2023-09-24 22:09:06'),
(787, 21, 1, 2, 2, NULL, '2023-09-24 22:09:07'),
(788, 21, 5, 22, 22, NULL, '2023-09-24 22:09:09'),
(789, 21, 31, 152, 152, NULL, '2023-09-24 22:09:11'),
(790, 21, 17, 82, 82, NULL, '2023-09-24 22:09:13'),
(791, 21, 39, 192, 192, NULL, '2023-09-24 22:09:15'),
(792, 21, 30, 147, 147, NULL, '2023-09-24 22:09:17'),
(793, 21, 35, 172, 172, NULL, '2023-09-24 22:09:18'),
(794, 21, 32, 157, 157, NULL, '2023-09-24 22:09:20'),
(795, 21, 3, 12, 12, NULL, '2023-09-24 22:09:21'),
(796, 21, 26, 127, 127, NULL, '2023-09-24 22:09:23'),
(797, 21, 9, 42, 42, NULL, '2023-09-24 22:09:25'),
(798, 21, 25, 122, 122, NULL, '2023-09-24 22:09:27'),
(799, 21, 28, 137, 137, NULL, '2023-09-24 22:09:29'),
(800, 21, 13, 62, 62, NULL, '2023-09-24 22:09:31'),
(801, 21, 38, 187, 187, NULL, '2023-09-24 22:09:36'),
(802, 21, 24, 116, 116, NULL, '2023-09-24 22:09:43'),
(803, 21, 14, 67, 67, NULL, '2023-09-24 22:09:45'),
(804, 21, 4, 17, 17, NULL, '2023-09-24 22:09:47'),
(805, 21, 27, 132, 132, NULL, '2023-09-24 22:09:49'),
(806, 21, 10, 47, 47, NULL, '2023-09-24 22:09:51'),
(807, 21, 6, 27, 27, NULL, '2023-09-24 22:09:53'),
(808, 20, 8, 38, 38, NULL, '2023-09-24 22:10:39'),
(809, 20, 32, 158, 158, NULL, '2023-09-24 22:11:07'),
(810, 20, 15, 72, 72, NULL, '2023-09-24 22:12:04'),
(811, 20, 5, 23, 23, NULL, '2023-09-24 22:12:26'),
(812, 20, 30, 147, 147, NULL, '2023-09-24 22:12:33'),
(813, 20, 13, 64, 64, NULL, '2023-09-24 22:12:34'),
(814, 20, 18, 89, 89, NULL, '2023-09-24 22:12:36'),
(815, 20, 34, 168, 168, NULL, '2023-09-24 22:12:39'),
(816, 20, 25, 123, 123, NULL, '2023-09-24 22:12:40'),
(817, 20, 21, 102, 102, NULL, '2023-09-24 22:12:42'),
(818, 20, 4, 17, 17, NULL, '2023-09-24 22:12:47'),
(819, 20, 7, 33, 33, NULL, '2023-09-24 22:12:48'),
(820, 20, 28, 136, 136, NULL, '2023-09-24 22:13:28'),
(821, 20, 27, 132, 132, NULL, '2023-09-24 22:15:16'),
(822, 20, 33, 162, 162, NULL, '2023-09-24 22:16:00'),
(823, 20, 31, 151, 151, NULL, '2023-09-24 22:16:33'),
(824, 20, 23, 112, 112, NULL, '2023-09-24 22:17:39'),
(825, 20, 40, 197, 197, NULL, '2023-09-24 22:18:11'),
(826, 20, 16, 78, 78, NULL, '2023-09-24 22:21:04'),
(827, 20, 9, 42, 42, NULL, '2023-09-24 22:21:45'),
(828, 20, 2, 7, 7, NULL, '2023-09-24 22:22:37'),
(829, 20, 11, 52, 52, NULL, '2023-09-24 22:23:15'),
(830, 20, 36, 180, 180, NULL, '2023-09-24 22:24:06'),
(831, 20, 1, 2, 2, NULL, '2023-09-24 22:25:53'),
(832, 20, 37, 185, 185, NULL, '2023-09-24 22:26:40'),
(833, 20, 22, 107, 107, NULL, '2023-09-24 22:27:08'),
(834, 20, 24, 118, 118, NULL, '2023-09-24 22:28:06'),
(835, 20, 10, 50, 50, NULL, '2023-09-24 22:28:41'),
(836, 20, 17, 82, 82, NULL, '2023-09-24 22:28:43'),
(837, 20, 20, 98, 98, NULL, '2023-09-24 22:28:45'),
(838, 20, 19, 95, 95, NULL, '2023-09-24 22:29:47'),
(839, 20, 3, 11, 11, NULL, '2023-09-24 22:30:24'),
(840, 20, 6, 29, 29, NULL, '2023-09-24 22:31:02'),
(841, 22, 7, 34, 34, NULL, '2023-09-24 23:42:13'),
(842, 22, 8, 36, 36, NULL, '2023-09-24 23:42:43'),
(843, 22, 2, 7, 7, NULL, '2023-09-24 23:43:06'),
(844, 22, 15, 72, 72, NULL, '2023-09-24 23:44:26'),
(845, 22, 35, 175, 175, NULL, '2023-09-24 23:46:52'),
(846, 22, 23, 112, 112, NULL, '2023-09-24 23:48:33'),
(847, 22, 10, 50, 50, NULL, '2023-09-24 23:50:25'),
(848, 22, 32, 158, 158, NULL, '2023-09-24 23:50:38'),
(849, 22, 13, 65, 65, NULL, '2023-09-24 23:52:25'),
(850, 22, 9, 41, 41, NULL, '2023-09-24 23:52:43'),
(851, 22, 20, 100, 100, NULL, '2023-09-24 23:55:06'),
(852, 22, 17, 85, 85, NULL, '2023-09-24 23:58:49'),
(853, 22, 6, 29, 29, NULL, '2023-09-24 23:59:30'),
(854, 22, 38, 188, 188, NULL, '2023-09-25 00:01:03'),
(855, 22, 31, 154, 154, NULL, '2023-09-25 00:01:42'),
(856, 22, 24, 118, 118, NULL, '2023-09-25 00:01:59'),
(857, 22, 34, 169, 169, NULL, '2023-09-25 00:04:02'),
(858, 22, 27, 132, 132, NULL, '2023-09-25 00:07:08'),
(859, 22, 29, 141, 141, NULL, '2023-09-25 00:07:28'),
(860, 22, 5, 22, 22, NULL, '2023-09-25 00:11:17'),
(861, 22, 19, 95, 95, NULL, '2023-09-25 00:14:11'),
(862, 22, 4, 20, 20, NULL, '2023-09-25 00:15:26'),
(863, 22, 1, 2, 2, NULL, '2023-09-25 00:16:04'),
(864, 22, 16, 80, 80, NULL, '2023-09-25 00:16:22'),
(865, 22, 18, 86, 86, NULL, '2023-09-25 00:17:12'),
(866, 22, 12, 58, 58, NULL, '2023-09-25 00:17:47'),
(867, 22, 22, 108, 108, NULL, '2023-09-25 00:18:29'),
(868, 22, 30, 148, 148, NULL, '2023-09-25 00:20:48'),
(869, 22, 3, 14, 14, NULL, '2023-09-25 00:21:23'),
(870, 22, 14, 68, 68, NULL, '2023-09-25 00:23:14'),
(871, 22, 37, 182, 182, NULL, '2023-09-25 00:24:01'),
(872, 22, 11, 54, 54, NULL, '2023-09-25 00:24:43'),
(873, 22, 25, 123, 123, NULL, '2023-09-25 00:24:59'),
(874, 22, 39, 194, 194, NULL, '2023-09-25 00:25:18'),
(875, 22, 28, 137, 137, NULL, '2023-09-25 00:25:48'),
(876, 22, 33, 162, 162, NULL, '2023-09-25 00:26:57'),
(877, 22, 40, 198, 198, NULL, '2023-09-25 00:27:59'),
(878, 22, 26, 126, 126, NULL, '2023-09-25 00:28:12'),
(879, 22, 21, 101, 101, NULL, '2023-09-25 00:28:49'),
(880, 22, 36, 180, 180, NULL, '2023-09-25 00:29:01'),
(881, 23, 1, 2, 2, NULL, '2023-09-25 05:57:39'),
(882, 23, 33, 162, 162, NULL, '2023-09-25 05:59:19'),
(883, 23, 14, 70, 70, NULL, '2023-09-25 06:04:02'),
(884, 23, 10, 47, 47, NULL, '2023-09-25 06:07:06'),
(885, 23, 35, 175, 175, NULL, '2023-09-25 06:10:28'),
(886, 23, 9, 42, 42, NULL, '2023-09-25 06:10:57'),
(887, 23, 24, 120, 120, NULL, '2023-09-25 06:11:58'),
(888, 23, 23, 111, 111, NULL, '2023-09-25 06:13:00'),
(889, 23, 38, 189, 189, NULL, '2023-09-25 06:17:42'),
(890, 23, 25, 121, 121, NULL, '2023-09-25 06:18:12'),
(891, 23, 13, 61, 61, NULL, '2023-09-25 06:19:01'),
(892, 23, 12, 56, 56, NULL, '2023-09-25 06:21:57'),
(893, 23, 28, 137, 137, NULL, '2023-09-25 06:22:42'),
(894, 23, 21, 102, 102, NULL, '2023-09-25 06:24:04'),
(895, 23, 16, 80, 80, NULL, '2023-09-25 06:25:55'),
(896, 23, 19, 91, 91, NULL, '2023-09-25 06:26:50'),
(897, 23, 4, 16, 16, NULL, '2023-09-25 06:29:07'),
(898, 23, 11, 54, 54, NULL, '2023-09-25 06:29:48'),
(899, 23, 2, 7, 7, NULL, '2023-09-25 06:31:06'),
(900, 23, 37, 185, 185, NULL, '2023-09-25 06:35:44'),
(901, 23, 32, 160, 160, NULL, '2023-09-25 06:36:16'),
(902, 23, 34, 169, 169, NULL, '2023-09-25 06:38:02'),
(903, 23, 8, 36, 36, NULL, '2023-09-25 06:40:02'),
(904, 23, 39, 195, 195, NULL, '2023-09-25 06:41:40'),
(905, 23, 3, 15, 15, NULL, '2023-09-25 06:42:38'),
(906, 23, 18, 90, 90, NULL, '2023-09-25 06:43:46'),
(907, 23, 36, 179, 179, NULL, '2023-09-25 06:44:01'),
(908, 23, 29, 141, 141, NULL, '2023-09-25 06:44:36'),
(909, 23, 15, 75, 75, NULL, '2023-09-25 06:45:56'),
(910, 23, 30, 146, 146, NULL, '2023-09-25 06:47:29'),
(911, 23, 40, 200, 200, NULL, '2023-09-25 06:48:36'),
(912, 23, 7, 34, 34, NULL, '2023-09-25 06:49:34'),
(913, 23, 20, 100, 100, NULL, '2023-09-25 06:50:37'),
(914, 23, 22, 108, 108, NULL, '2023-09-25 06:50:58'),
(915, 23, 6, 30, 30, NULL, '2023-09-25 06:51:49'),
(916, 23, 27, 133, 133, NULL, '2023-09-25 06:51:55'),
(917, 23, 26, 129, 129, NULL, '2023-09-25 06:51:56'),
(918, 23, 31, 153, 153, NULL, '2023-09-25 06:51:58'),
(919, 25, 26, 128, 128, NULL, '2023-09-25 07:23:07'),
(920, 25, 2, 7, 7, NULL, '2023-09-25 07:23:39'),
(921, 25, 24, 118, 118, NULL, '2023-09-25 07:23:48'),
(922, 25, 3, 11, 11, NULL, '2023-09-25 07:24:03'),
(923, 25, 19, 91, 91, NULL, '2023-09-25 07:24:20'),
(924, 24, 36, 180, 180, NULL, '2023-09-25 07:24:22'),
(925, 25, 31, 155, 155, NULL, '2023-09-25 07:25:14'),
(926, 25, 32, 156, 156, NULL, '2023-09-25 07:25:33'),
(927, 24, 17, 82, 82, NULL, '2023-09-25 07:26:08'),
(928, 25, 8, 36, 36, NULL, '2023-09-25 07:26:11'),
(929, 25, 17, 85, 85, NULL, '2023-09-25 07:26:50'),
(930, 25, 12, 58, 58, NULL, '2023-09-25 07:27:11'),
(931, 24, 27, 131, 131, NULL, '2023-09-25 07:27:20'),
(932, 24, 16, 78, 78, NULL, '2023-09-25 07:28:23'),
(933, 25, 7, 32, 32, NULL, '2023-09-25 07:28:48'),
(934, 24, 12, 58, 58, NULL, '2023-09-25 07:29:04'),
(935, 25, 38, 187, 187, NULL, '2023-09-25 07:29:19'),
(936, 25, 22, 108, 108, NULL, '2023-09-25 07:29:29'),
(937, 24, 8, 38, 38, NULL, '2023-09-25 07:29:57'),
(938, 24, 5, 21, 21, NULL, '2023-09-25 07:30:50'),
(939, 25, 33, 165, 165, NULL, '2023-09-25 07:30:56'),
(940, 25, 6, 28, 28, NULL, '2023-09-25 07:31:03'),
(941, 25, 11, 53, 53, NULL, '2023-09-25 07:31:06'),
(942, 24, 40, 197, 197, NULL, '2023-09-25 07:31:09'),
(943, 25, 23, 112, 112, NULL, '2023-09-25 07:31:09'),
(944, 24, 31, 151, 151, NULL, '2023-09-25 07:31:27'),
(945, 24, 6, 29, 29, NULL, '2023-09-25 07:32:51'),
(946, 25, 18, 89, 89, NULL, '2023-09-25 07:32:59'),
(947, 25, 35, 174, 174, NULL, '2023-09-25 07:33:05'),
(948, 25, 14, 67, 67, NULL, '2023-09-25 07:33:09'),
(949, 25, 4, 18, 18, NULL, '2023-09-25 07:33:11'),
(950, 25, 36, 177, 177, NULL, '2023-09-25 07:33:15'),
(951, 25, 30, 148, 148, NULL, '2023-09-25 07:33:19'),
(952, 25, 39, 193, 193, NULL, '2023-09-25 07:33:22'),
(953, 25, 20, 99, 99, NULL, '2023-09-25 07:33:25'),
(954, 25, 29, 142, 142, NULL, '2023-09-25 07:33:28'),
(955, 25, 16, 78, 78, NULL, '2023-09-25 07:33:31'),
(956, 25, 27, 132, 132, NULL, '2023-09-25 07:33:35'),
(957, 25, 13, 63, 63, NULL, '2023-09-25 07:33:37'),
(958, 25, 15, 74, 74, NULL, '2023-09-25 07:33:42'),
(959, 25, 10, 48, 48, NULL, '2023-09-25 07:33:45'),
(960, 24, 10, 47, 47, NULL, '2023-09-25 07:33:47'),
(961, 25, 21, 102, 102, NULL, '2023-09-25 07:33:47'),
(962, 25, 5, 23, 23, NULL, '2023-09-25 07:33:54'),
(963, 25, 9, 41, 41, NULL, '2023-09-25 07:33:56'),
(964, 24, 15, 74, 74, NULL, '2023-09-25 07:34:05'),
(965, 25, 34, 169, 169, NULL, '2023-09-25 07:34:13'),
(966, 25, 40, 199, 199, NULL, '2023-09-25 07:34:20'),
(967, 25, 25, 123, 123, NULL, '2023-09-25 07:34:22'),
(968, 25, 1, 3, 3, NULL, '2023-09-25 07:34:25'),
(969, 25, 37, 184, 184, NULL, '2023-09-25 07:34:29'),
(970, 25, 28, 140, 140, NULL, '2023-09-25 07:34:32'),
(971, 24, 35, 171, 171, NULL, '2023-09-25 07:34:34'),
(972, 24, 23, 112, 112, NULL, '2023-09-25 07:35:16'),
(973, 24, 33, 162, 162, NULL, '2023-09-25 07:35:40'),
(974, 24, 34, 169, 169, NULL, '2023-09-25 07:35:57'),
(975, 24, 2, 7, 7, NULL, '2023-09-25 07:36:48'),
(976, 24, 24, 118, 118, NULL, '2023-09-25 07:37:20'),
(977, 24, 3, 15, 15, NULL, '2023-09-25 07:37:57'),
(978, 24, 21, 102, 102, NULL, '2023-09-25 07:38:50'),
(979, 24, 28, 138, 138, NULL, '2023-09-25 07:40:20'),
(980, 24, 13, 61, 61, NULL, '2023-09-25 07:41:16'),
(981, 24, 26, 126, 126, NULL, '2023-09-25 07:41:34'),
(982, 24, 25, 123, 123, NULL, '2023-09-25 07:41:49'),
(983, 24, 38, 186, 186, NULL, '2023-09-25 07:41:52'),
(984, 24, 7, 32, 32, NULL, '2023-09-25 07:41:55'),
(985, 24, 4, 17, 17, NULL, '2023-09-25 07:41:57'),
(986, 24, 39, 193, 193, NULL, '2023-09-25 07:42:09'),
(987, 24, 11, 53, 53, NULL, '2023-09-25 07:43:20'),
(988, 24, 1, 3, 3, NULL, '2023-09-25 07:43:45'),
(989, 24, 19, 95, 95, NULL, '2023-09-25 07:44:36'),
(990, 24, 29, 144, 144, NULL, '2023-09-25 07:45:09'),
(991, 24, 30, 146, 146, NULL, '2023-09-25 07:45:11'),
(992, 24, 18, 86, 86, NULL, '2023-09-25 07:46:12');
INSERT INTO `user_answers` (`id`, `user_quiz_id`, `question_id`, `answer_id`, `user_answer_id`, `user_answer_text`, `added_date`) VALUES
(993, 24, 20, 98, 98, NULL, '2023-09-25 07:46:52'),
(994, 24, 32, 158, 158, NULL, '2023-09-25 07:47:08'),
(995, 24, 9, 43, 43, NULL, '2023-09-25 07:47:48'),
(996, 24, 37, 182, 182, NULL, '2023-09-25 07:47:51'),
(997, 24, 14, 67, 67, NULL, '2023-09-25 07:47:53'),
(998, 24, 22, 107, 107, NULL, '2023-09-25 07:48:48'),
(999, 26, 21, 101, 101, NULL, '2023-09-25 08:09:12'),
(1000, 26, 4, 16, 16, NULL, '2023-09-25 08:09:40'),
(1001, 26, 30, 146, 146, NULL, '2023-09-25 08:10:21'),
(1002, 26, 2, 7, 7, NULL, '2023-09-25 08:11:04'),
(1003, 26, 36, 180, 180, NULL, '2023-09-25 08:11:29'),
(1004, 26, 32, 158, 158, NULL, '2023-09-25 08:11:51'),
(1005, 26, 27, 131, 131, NULL, '2023-09-25 08:11:58'),
(1006, 26, 24, 119, 119, NULL, '2023-09-25 08:12:31'),
(1007, 26, 17, 82, 82, NULL, '2023-09-25 08:12:37'),
(1008, 26, 28, 136, 136, NULL, '2023-09-25 08:13:16'),
(1009, 26, 37, 183, 183, NULL, '2023-09-25 08:13:20'),
(1010, 26, 18, 87, 87, NULL, '2023-09-25 08:13:25'),
(1011, 26, 12, 58, 58, NULL, '2023-09-25 08:13:29'),
(1012, 26, 39, 191, 191, NULL, '2023-09-25 08:13:33'),
(1013, 26, 13, 61, 61, NULL, '2023-09-25 08:13:37'),
(1014, 26, 25, 125, 125, NULL, '2023-09-25 08:13:48'),
(1015, 26, 6, 28, 28, NULL, '2023-09-25 08:13:52'),
(1016, 26, 15, 71, 71, NULL, '2023-09-25 08:13:56'),
(1017, 26, 29, 141, 141, NULL, '2023-09-25 08:14:09'),
(1018, 26, 40, 198, 198, NULL, '2023-09-25 08:14:14'),
(1019, 26, 20, 97, 97, NULL, '2023-09-25 08:14:20'),
(1020, 26, 26, 129, 129, NULL, '2023-09-25 08:14:33'),
(1021, 27, 3, 14, 14, NULL, '2023-09-25 08:14:42'),
(1022, 26, 16, 76, 76, NULL, '2023-09-25 08:14:46'),
(1023, 26, 31, 153, 153, NULL, '2023-09-25 08:14:48'),
(1024, 26, 11, 54, 54, NULL, '2023-09-25 08:14:51'),
(1025, 26, 35, 172, 172, NULL, '2023-09-25 08:14:55'),
(1026, 26, 1, 3, 3, NULL, '2023-09-25 08:14:58'),
(1027, 26, 14, 69, 69, NULL, '2023-09-25 08:15:01'),
(1028, 26, 7, 31, 31, NULL, '2023-09-25 08:15:05'),
(1029, 26, 5, 24, 24, NULL, '2023-09-25 08:15:08'),
(1030, 26, 23, 111, 111, NULL, '2023-09-25 08:15:12'),
(1031, 26, 34, 168, 168, NULL, '2023-09-25 08:15:15'),
(1032, 26, 9, 43, 43, NULL, '2023-09-25 08:15:19'),
(1033, 26, 10, 46, 46, NULL, '2023-09-25 08:15:25'),
(1034, 26, 22, 108, 108, NULL, '2023-09-25 08:15:28'),
(1035, 26, 33, 163, 163, NULL, '2023-09-25 08:15:32'),
(1036, 26, 38, 188, 188, NULL, '2023-09-25 08:15:35'),
(1037, 26, 8, 38, 38, NULL, '2023-09-25 08:15:39'),
(1038, 26, 3, 12, 12, NULL, '2023-09-25 08:15:44'),
(1039, 26, 19, 93, 93, NULL, '2023-09-25 08:15:47'),
(1040, 27, 10, 50, 50, NULL, '2023-09-25 08:16:12'),
(1041, 27, 13, 61, 61, NULL, '2023-09-25 08:16:48'),
(1042, 29, 13, 61, 61, NULL, '2023-09-25 08:17:11'),
(1043, 28, 16, 80, 80, NULL, '2023-09-25 08:17:41'),
(1044, 29, 33, 162, 162, NULL, '2023-09-25 08:17:55'),
(1045, 29, 3, 14, 14, NULL, '2023-09-25 08:18:41'),
(1046, 28, 8, 39, 39, NULL, '2023-09-25 08:18:44'),
(1047, 29, 21, 102, 102, NULL, '2023-09-25 08:18:53'),
(1048, 29, 22, 106, 106, NULL, '2023-09-25 08:19:13'),
(1049, 28, 37, 181, 181, NULL, '2023-09-25 08:19:34'),
(1050, 27, 15, 75, 75, NULL, '2023-09-25 08:19:59'),
(1051, 29, 23, 111, 111, NULL, '2023-09-25 08:20:39'),
(1052, 28, 30, 146, 146, NULL, '2023-09-25 08:20:40'),
(1053, 29, 17, 81, 81, NULL, '2023-09-25 08:20:49'),
(1054, 29, 15, 72, 72, NULL, '2023-09-25 08:20:52'),
(1055, 27, 30, 148, 148, NULL, '2023-09-25 08:20:52'),
(1056, 29, 10, 46, 46, NULL, '2023-09-25 08:21:05'),
(1057, 28, 4, 16, 16, NULL, '2023-09-25 08:21:14'),
(1058, 29, 29, 141, 141, NULL, '2023-09-25 08:21:22'),
(1059, 29, 12, 56, 56, NULL, '2023-09-25 08:21:24'),
(1060, 29, 31, 151, 151, NULL, '2023-09-25 08:21:26'),
(1061, 29, 8, 38, 38, NULL, '2023-09-25 08:21:27'),
(1062, 29, 2, 8, 8, NULL, '2023-09-25 08:21:28'),
(1063, 29, 30, 147, 147, NULL, '2023-09-25 08:21:30'),
(1064, 29, 16, 76, 76, NULL, '2023-09-25 08:21:31'),
(1065, 29, 27, 131, 131, NULL, '2023-09-25 08:21:34'),
(1066, 29, 14, 67, 67, NULL, '2023-09-25 08:21:37'),
(1067, 28, 31, 151, 151, NULL, '2023-09-25 08:21:38'),
(1068, 29, 36, 177, 177, NULL, '2023-09-25 08:21:39'),
(1069, 29, 24, 116, 116, NULL, '2023-09-25 08:21:41'),
(1070, 29, 19, 91, 91, NULL, '2023-09-25 08:21:43'),
(1071, 29, 38, 186, 186, NULL, '2023-09-25 08:21:45'),
(1072, 29, 7, 33, 33, NULL, '2023-09-25 08:21:46'),
(1073, 29, 39, 191, 191, NULL, '2023-09-25 08:21:48'),
(1074, 29, 18, 87, 87, NULL, '2023-09-25 08:21:49'),
(1075, 29, 1, 1, 1, NULL, '2023-09-25 08:21:51'),
(1076, 29, 28, 138, 138, NULL, '2023-09-25 08:21:53'),
(1077, 29, 4, 18, 18, NULL, '2023-09-25 08:21:54'),
(1078, 29, 9, 41, 41, NULL, '2023-09-25 08:21:59'),
(1079, 29, 20, 96, 96, NULL, '2023-09-25 08:22:01'),
(1080, 29, 37, 181, 181, NULL, '2023-09-25 08:22:02'),
(1081, 29, 40, 198, 198, NULL, '2023-09-25 08:22:05'),
(1082, 29, 35, 174, 174, NULL, '2023-09-25 08:22:07'),
(1083, 29, 25, 122, 122, NULL, '2023-09-25 08:22:09'),
(1084, 29, 26, 126, 126, NULL, '2023-09-25 08:22:11'),
(1085, 29, 6, 28, 28, NULL, '2023-09-25 08:22:12'),
(1086, 29, 34, 168, 168, NULL, '2023-09-25 08:22:14'),
(1087, 29, 32, 159, 159, NULL, '2023-09-25 08:22:15'),
(1088, 29, 5, 21, 21, NULL, '2023-09-25 08:22:17'),
(1089, 29, 11, 54, 54, NULL, '2023-09-25 08:22:18'),
(1090, 27, 7, 35, 35, NULL, '2023-09-25 08:22:20'),
(1091, 28, 35, 171, 171, NULL, '2023-09-25 08:22:27'),
(1092, 27, 28, 137, 137, NULL, '2023-09-25 08:22:36'),
(1093, 27, 38, 189, 189, NULL, '2023-09-25 08:23:23'),
(1094, 28, 22, 107, 107, NULL, '2023-09-25 08:23:39'),
(1095, 27, 16, 80, 80, NULL, '2023-09-25 08:23:40'),
(1096, 27, 35, 175, 175, NULL, '2023-09-25 08:23:47'),
(1097, 27, 9, 42, 42, NULL, '2023-09-25 08:24:05'),
(1098, 27, 26, 128, 128, NULL, '2023-09-25 08:24:27'),
(1099, 28, 28, 136, 136, NULL, '2023-09-25 08:24:27'),
(1100, 27, 1, 4, 4, NULL, '2023-09-25 08:24:30'),
(1101, 27, 37, 183, 183, NULL, '2023-09-25 08:25:04'),
(1102, 27, 27, 131, 131, NULL, '2023-09-25 08:25:16'),
(1103, 28, 13, 61, 61, NULL, '2023-09-25 08:25:38'),
(1104, 28, 7, 33, 33, NULL, '2023-09-25 08:26:18'),
(1105, 27, 5, 23, 23, NULL, '2023-09-25 08:26:56'),
(1106, 27, 34, 167, 167, NULL, '2023-09-25 08:26:58'),
(1107, 27, 21, 103, 103, NULL, '2023-09-25 08:27:02'),
(1108, 27, 36, 177, 177, NULL, '2023-09-25 08:27:05'),
(1109, 28, 19, 91, 91, NULL, '2023-09-25 08:27:19'),
(1110, 27, 20, 98, 98, NULL, '2023-09-25 08:27:43'),
(1111, 27, 32, 160, 160, NULL, '2023-09-25 08:27:51'),
(1112, 27, 39, 191, 191, NULL, '2023-09-25 08:27:53'),
(1113, 27, 19, 95, 95, NULL, '2023-09-25 08:28:01'),
(1114, 27, 33, 165, 165, NULL, '2023-09-25 08:28:04'),
(1115, 27, 14, 69, 69, NULL, '2023-09-25 08:29:25'),
(1116, 28, 17, 83, 83, NULL, '2023-09-25 08:28:45'),
(1117, 28, 9, 42, 42, NULL, '2023-09-25 08:28:53'),
(1118, 28, 38, 187, 187, NULL, '2023-09-25 08:28:59'),
(1119, 28, 26, 128, 128, NULL, '2023-09-25 08:29:02'),
(1120, 28, 39, 193, 193, NULL, '2023-09-25 08:29:07'),
(1121, 28, 5, 23, 23, NULL, '2023-09-25 08:29:11'),
(1122, 28, 25, 123, 123, NULL, '2023-09-25 08:29:26'),
(1123, 27, 24, 116, 116, NULL, '2023-09-25 08:29:32'),
(1124, 28, 21, 102, 102, NULL, '2023-09-25 08:29:35'),
(1125, 27, 11, 54, 54, NULL, '2023-09-25 08:29:38'),
(1126, 28, 29, 144, 144, NULL, '2023-09-25 08:30:00'),
(1127, 27, 8, 36, 36, NULL, '2023-09-25 08:30:12'),
(1128, 28, 27, 132, 132, NULL, '2023-09-25 08:30:33'),
(1129, 28, 23, 111, 111, NULL, '2023-09-25 08:30:46'),
(1130, 28, 36, 180, 180, NULL, '2023-09-25 08:30:54'),
(1131, 27, 12, 60, 60, NULL, '2023-09-25 08:31:07'),
(1132, 27, 40, 199, 199, NULL, '2023-09-25 08:31:09'),
(1133, 27, 23, 113, 113, NULL, '2023-09-25 08:31:11'),
(1134, 28, 11, 53, 53, NULL, '2023-09-25 08:31:34'),
(1135, 27, 17, 85, 85, NULL, '2023-09-25 08:31:35'),
(1136, 27, 22, 107, 107, NULL, '2023-09-25 08:31:42'),
(1137, 27, 31, 153, 153, NULL, '2023-09-25 08:31:44'),
(1138, 28, 3, 14, 14, NULL, '2023-09-25 08:31:58'),
(1139, 27, 29, 141, 141, NULL, '2023-09-25 08:31:59'),
(1140, 27, 25, 123, 123, NULL, '2023-09-25 08:32:08'),
(1141, 28, 33, 163, 163, NULL, '2023-09-25 08:32:27'),
(1142, 28, 32, 158, 158, NULL, '2023-09-25 08:32:37'),
(1143, 27, 6, 30, 30, NULL, '2023-09-25 08:32:43'),
(1144, 28, 2, 8, 8, NULL, '2023-09-25 08:32:45'),
(1145, 27, 4, 19, 19, NULL, '2023-09-25 08:32:46'),
(1146, 28, 24, 118, 118, NULL, '2023-09-25 08:32:48'),
(1147, 28, 20, 96, 96, NULL, '2023-09-25 08:32:55'),
(1148, 28, 1, 3, 3, NULL, '2023-09-25 08:32:58'),
(1149, 28, 34, 169, 169, NULL, '2023-09-25 08:33:01'),
(1150, 28, 40, 198, 198, NULL, '2023-09-25 08:33:04'),
(1151, 27, 2, 6, 6, NULL, '2023-09-25 08:33:20'),
(1152, 27, 18, 87, 87, NULL, '2023-09-25 08:33:23'),
(1153, 28, 18, 87, 87, NULL, '2023-09-25 08:33:24'),
(1154, 28, 12, 57, 57, NULL, '2023-09-25 08:33:28'),
(1155, 28, 6, 28, 28, NULL, '2023-09-25 08:33:35'),
(1156, 28, 10, 48, 48, NULL, '2023-09-25 08:33:39'),
(1157, 28, 15, 72, 72, NULL, '2023-09-25 08:33:43'),
(1158, 28, 14, 68, 68, NULL, '2023-09-25 08:33:51');

-- --------------------------------------------------------

--
-- Table structure for table `user_quizzes`
--

DROP TABLE IF EXISTS `user_quizzes`;
CREATE TABLE IF NOT EXISTS `user_quizzes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `assignment_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `added_date` datetime DEFAULT NULL,
  `success` int(11) DEFAULT NULL,
  `finish_date` datetime DEFAULT NULL,
  `pass_score_point` decimal(10,2) DEFAULT NULL,
  `pass_score_perc` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `assignment_id` (`assignment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `user_quizzes`
--

INSERT INTO `user_quizzes` (`id`, `assignment_id`, `user_id`, `status`, `added_date`, `success`, `finish_date`, `pass_score_point`, `pass_score_perc`) VALUES
(1, 4, 196, 2, '2023-09-24 18:32:56', 0, '2023-09-24 18:59:39', NULL, NULL),
(2, 4, 189, 2, '2023-09-24 19:00:26', 0, '2023-09-24 19:32:02', NULL, NULL),
(3, 4, 208, 2, '2023-09-24 19:29:22', 0, '2023-09-24 20:00:08', NULL, NULL),
(4, 4, 181, 2, '2023-09-24 19:43:27', 0, '2023-09-24 20:08:27', NULL, NULL),
(5, 4, 193, 2, '2023-09-24 19:43:43', 0, '2023-09-24 20:26:50', NULL, NULL),
(6, 4, 212, 2, '2023-09-24 19:49:12', 0, '2023-09-24 20:30:51', NULL, NULL),
(7, 4, 209, 2, '2023-09-24 20:04:32', 0, '2023-09-24 20:25:34', NULL, NULL),
(8, 4, 183, 2, '2023-09-24 20:31:51', 0, '2023-09-24 21:02:45', NULL, NULL),
(9, 4, 184, 2, '2023-09-24 20:32:14', 0, '2023-09-24 21:03:17', NULL, NULL),
(10, 4, 188, 2, '2023-09-24 20:37:00', 0, '2023-09-24 20:55:41', NULL, NULL),
(11, 4, 192, 2, '2023-09-24 20:38:33', 0, '2023-09-24 20:56:34', NULL, NULL),
(12, 4, 185, 2, '2023-09-24 20:52:01', 0, '2023-09-24 21:37:25', NULL, NULL),
(13, 4, 182, 2, '2023-09-24 20:56:09', 0, '2023-09-24 21:28:32', NULL, NULL),
(14, 4, 191, 2, '2023-09-24 20:57:29', 0, '2023-09-24 21:28:35', NULL, NULL),
(15, 4, 186, 2, '2023-09-24 20:59:05', 0, '2023-09-24 21:49:53', NULL, NULL),
(16, 4, 194, 2, '2023-09-24 21:05:05', 0, '2023-09-24 21:48:27', NULL, NULL),
(17, 4, 187, 2, '2023-09-24 21:18:49', 0, '2023-09-24 21:54:25', NULL, NULL),
(18, 4, 190, 2, '2023-09-24 21:39:31', 0, '2023-09-24 21:43:21', NULL, NULL),
(19, 4, 178, 2, '2023-09-24 22:00:20', 0, '2023-09-24 22:01:20', NULL, NULL),
(20, 4, 180, 2, '2023-09-24 22:02:01', 0, '2023-09-24 22:31:10', NULL, NULL),
(21, 4, 201, 2, '2023-09-24 22:08:09', 0, '2023-09-24 22:09:56', NULL, NULL),
(22, 4, 202, 2, '2023-09-24 23:40:32', 0, '2023-09-25 00:29:08', NULL, NULL),
(23, 4, 204, 3, '2023-09-25 05:51:58', 0, '2023-09-25 06:51:58', NULL, NULL),
(24, 4, 197, 2, '2023-09-25 07:20:24', 0, '2023-09-25 07:57:46', NULL, NULL),
(25, 4, 199, 2, '2023-09-25 07:22:53', 0, '2023-09-25 07:34:40', NULL, NULL),
(26, 4, 198, 2, '2023-09-25 08:08:21', 0, '2023-09-25 08:16:00', NULL, NULL),
(27, 4, 195, 2, '2023-09-25 08:13:57', 0, '2023-09-25 08:33:29', NULL, NULL),
(28, 4, 177, 2, '2023-09-25 08:16:11', 0, '2023-09-25 08:34:11', NULL, NULL),
(29, 4, 200, 2, '2023-09-25 08:16:16', 0, '2023-09-25 08:22:24', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `user_types`
--

DROP TABLE IF EXISTS `user_types`;
CREATE TABLE IF NOT EXISTS `user_types` (
  `id` int(11) NOT NULL,
  `type_name` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `user_types`
--

INSERT INTO `user_types` (`id`, `type_name`) VALUES
(1, 'Admin'),
(2, 'User');

-- --------------------------------------------------------

--
-- Table structure for table `v_imported_users`
--

DROP TABLE IF EXISTS `v_imported_users`;
CREATE TABLE IF NOT EXISTS `v_imported_users` (
  `UserID` int(11) DEFAULT NULL,
  `Name` varchar(250) DEFAULT NULL,
  `Surname` varchar(255) DEFAULT NULL,
  `UserName` varchar(150) DEFAULT NULL,
  `Password` varchar(150) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `answers`
--
ALTER TABLE `answers`
  ADD CONSTRAINT `answers_ibfk_1` FOREIGN KEY (`group_id`) REFERENCES `question_groups` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
